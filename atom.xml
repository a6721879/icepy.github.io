<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[icepy]]></title>
  <subtitle><![CDATA[曾记否，到中流击水，浪遏飞舟！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lcepy.github.io/"/>
  <updated>2015-06-19T08:17:33.711Z</updated>
  <id>http://lcepy.github.io/</id>
  
  <author>
    <name><![CDATA[icepy]]></name>
    <email><![CDATA[xiangwenwe@foxmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[利用AVFoundation实现扫描条码]]></title>
    <link href="http://lcepy.github.io/2015/06/16/%E5%88%A9%E7%94%A8AVFoundation%E5%AE%9E%E7%8E%B0%E6%89%AB%E6%8F%8F%E6%9D%A1%E7%A0%81/"/>
    <id>http://lcepy.github.io/2015/06/16/利用AVFoundation实现扫描条码/</id>
    <published>2015-06-16T09:39:05.000Z</published>
    <updated>2015-06-17T08:43:00.000Z</updated>
    <content type="html"><![CDATA[<p>iOS7中添加了一组原生支持扫描的组件，通过AVCaptureMetaDataOutput可以扫描各式各样的QR码，条形码，你所需要做的就是写好UI，并将它设置为AVCaptureSession的输出，再实现相应的协议即可。而且，这玩意可以跟Passbook相结合，有许多潜力可以实现，官方也非常推荐大家使用这个API。</p>
<blockquote>
<p>import AVFoundation</p>
<p>实现 AVCaptureMetadataOutputObjectsDelegate协议</p>
</blockquote>
<p>要实现这个扫描器，首先需要导入AVFoundation框架，这是一个专门处理音频，视频的框架。</p>
<p>创建一个AV设备，使用AVMediaTypeVideo常量</p>
<pre><code><span class="keyword">let</span> <span class="variable">captureDevice =</span> AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)
</code></pre><p>然后建立一个输入</p>
<pre><code><span class="keyword">let</span> input:AnyObject! = AVCaptureDeviceInput.deviceInputWithDevice(captureDevice, <span class="keyword">error</span>: &amp;<span class="keyword">error</span>)
</code></pre><p>现在，我们来看一看，最关键的部分，创建输出会话，不过在此之前，我们需要先使用AVCaptureSession创建一个会话，将输入端添加到会话中。</p>
<pre><code><span class="keyword">self</span>.captureSession = AVCaptureSession()
<span class="keyword">self</span>.captureSession?.addInput(input <span class="keyword">as</span>! AVCaptureInput)
</code></pre><p>接着，我们开始使用AVCaptureMetadataOutput创建一个输出端</p>
<pre><code><span class="keyword">let</span> <span class="variable">captureMetadataOutput =</span> AVCaptureMetadataOutput()
captureMetadataOutput.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())
captureMetadataOutput.<span class="variable">metadataObjectTypes =</span> [AVMetadataObjectTypeEAN13Code,AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code,AVMetadataObjectTypeQRCode]
</code></pre><p>指定要实现的扫描常量，添加一个协议，GCD可以使用在主线程中，并把它添加到会话中。</p>
<pre><code><span class="keyword">self</span>.captureSession?.addOutput(captureMetadataOutput)
</code></pre><p>然后我们还需要使用AVCaptureVideoPreviewLayer创建一个画布，用来显示扫描的展示区域，并添加到当前视图的layer中。</p>
<pre><code><span class="keyword">self</span>.videoPreviewLayer = <span class="constant">AVCaptureVideoPreviewLayer</span>(<span class="symbol">session:</span> <span class="keyword">self</span>.captureSession)
<span class="keyword">self</span>.videoPreviewLayer?.videoGravity = <span class="constant">AVLayerVideoGravityResizeAspect</span>
<span class="keyword">self</span>.videoPreviewLayer?.frame = <span class="keyword">self</span>.view.bounds
<span class="keyword">self</span>.view.layer.addSublayer(<span class="keyword">self</span>.videoPreviewLayer)
</code></pre><p>最后启动这个会话</p>
<pre><code><span class="keyword">self</span>.captureSession?.startRunning()
</code></pre><p>到这里，整个扫描条码的程序就已经准备就绪了，但是如果你还需要获取扫描相应的结果，那么需要实现它的协议，并实现func captureOutput(captureOutput: AVCaptureOutput!, didOutputMetadataObjects metadataObjects: [AnyObject]!, fromConnection connection: AVCaptureConnection!) {} 方法。</p>
<p>metadataObjects是一个AnyObject的数组，在这里，还需要进步的判断，获取第一个元素转化为AVMetadataMachineReadableCodeObject，通过type，可以判断扫描的类型，是二维码，还是条形码，还是其他，而值，则是在AVMetadataMachineReadableCodeObject的stringValue属性。</p>
<pre><code><span class="keyword">let</span> metadata = metadataObjects[<span class="number">0</span>] <span class="keyword">as</span>! AVMetadataMachineReadableCodeObject
<span class="comment">//metadata.type</span>
<span class="comment">//metadata.stringValue</span>
</code></pre><p>扫描的Demo可以查看<a href="https://github.com/lcepy/Mockingbird" target="_blank" rel="external">Mockingbird</a></p>
<h2 id="在Objective-C项目中使用">在Objective-C项目中使用</h2>
<p>runpath $(inherited)@executable_path/Frameworks</p>
<p>三步走图片，可查</p>
<p><img src="http://7qncz5.com1.z0.glb.clouddn.com/iOS/bridging-header-file.png" alt=""></p>
<p><img src="http://7qncz5.com1.z0.glb.clouddn.com/iOS/defines-module-yes.png" alt=""></p>
<p><img src="http://7qncz5.com1.z0.glb.clouddn.com/iOS/import-swift-file.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iOS7中添加了一组原生支持扫描的组件，通过AVCaptureMetaDataOutput可以扫描各式各样的QR码，条形码，你所需要做的就是写好UI，并将它设置为AVCaptureSession的输出，再实现相应的协议即可。而且，这玩意可以跟Passbook相结合，有许多潜]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[上架AppStore的经历]]></title>
    <link href="http://lcepy.github.io/2015/05/27/%E4%B8%8A%E6%9E%B6AppStore%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>http://lcepy.github.io/2015/05/27/上架AppStore的经历/</id>
    <published>2015-05-27T04:43:22.000Z</published>
    <updated>2015-06-08T10:28:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="开发之前的准备">开发之前的准备</h2>
<p>关于证书，以及流程，前人已有总结，请阅读</p>
<ul>
<li><a href="http://www.jianshu.com/p/6c75a6e53605" target="_blank" rel="external">iOS App提交指南(一)</a></li>
<li><a href="http://www.jianshu.com/p/c7cf65911bc1?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=mobile_author_hots&amp;utm_source=recommendation" target="_blank" rel="external">iOS App提交指南(二)-协议、税务和银行业务</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206718165&amp;idx=3&amp;sn=860ec99f81da19cd3d6faffe6d85083b#rd" target="_blank" rel="external">iOS证书说明和发布内购流程整理</a></li>
</ul>
<h2 id="准备开发">准备开发</h2>
<ul>
<li>在开发码农周刊应用之前，先写了一份PRD，把需求写清楚，然后利用storyboard画了一个简单的原型。PRD List我用的是<a href="https://trello.com/" target="_blank" rel="external">trello</a></li>
<li>图片资源我统一用Images.xcassets来进行管理</li>
<li><a href="http://pixabay.com/" target="_blank" rel="external">pixabay</a>搜索一些免费的资源</li>
<li><a href="http://makeappicon.com/" target="_blank" rel="external">makeappicon</a>生成app的启动icon</li>
<li><a href="https://icons8.com/" target="_blank" rel="external">icons8</a>下载了一份iOS的icon</li>
<li><a href="https://appscreens.io/" target="_blank" rel="external">appscreens</a>这个工具用于生成需要提交到AppStore审核的预览图片</li>
</ul>
<h2 id="准备提交">准备提交</h2>
<p>在Build Settings Code Signing中设置 Code Signing Identity和Provisioning Profile，用你在apple申请的发布证书和发布描述，然后把Device选择为真机。</p>
<p><img src="http://websources.qiniudn.com/iOS/codsigning.png" alt=""></p>
<p>选择Product中的Archive构建发布版本，可以直接点击Submit to App Store</p>
<p><img src="http://websources.qiniudn.com/iOS/archives.png" alt=""></p>
<h2 id="构建错误与警告">构建错误与警告</h2>
<p>在构建发布版本时Xcode会检测发布App所具备的逻辑，下面是我遇到的错误和警告</p>
<p>error itms -90096 : your binary is not optimized for iphone5 new iPhone apps and app updates submitted must support the 4-inch display on iphone5 and must include a launch image with the -568h size modifier immediately following the<basename> portion of the launch images’ filename. launch images must be png files and located at the top level of your bundle or provided within each. lproj folder if you localize your launch images learn more about iPhone 5 support and app launch images by reviewing the ‘iOS Human interface guidelines at</basename></p>
<p>上传启动动画PNG图片，另外还给出了三个解决方案参考的URL</p>
<p><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconsImages/IconsImages.html" target="_blank" rel="external">参考一</a><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html#//apple_ref/doc/uid/TP40006556-CH22-SW1" target="_blank" rel="external">参考二</a><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1" target="_blank" rel="external">参考三</a></p>
<p>error itms-4238 redundant binary upload. there already exists a binary upload with build version ‘1’ for train ‘1.0’ at software assets/prereleasesoftwareasset</p>
<p>因为想要提交的版本已经存在，更改build版本号</p>
<p>error itms-90032: invalid image path - no image found at the path referenced under key CFBundleIconFiles:’xxx</p>
<p>存在一个不使用的配置，在Info中删除</p>
<p>WARNING ITMS:iTunes Store operation succeeded with a warning<br>the app references non-public selectors in Payload/manongweekly.app/manongweekly:addContent</p>
<p>查找是否使用了非公用API，一些名字可能会是私有API，最好把名改了</p>
<p>WARNING ITMS 90025:Missing recommended icon file the bundle does not contain an app icon for iPhone/ipodtouch of exactly ‘120x120’pixels in.png format for iOS versions &gt;=7.0</p>
<p>添加76，76@2x的图标PNG</p>
<h2 id="查看被拒原因与加急">查看被拒原因与加急</h2>
<p>在<a href="https://developer.apple.com/membercenter/index.action" target="_blank" rel="external">Member Center</a>中应用审核的最下面，有一个解决方案中心，点击解决方案中心，可以查看被拒原因，审核人员会给你罗列以及解决方案参考。</p>
<p>如果应用审核通过了，在使用的过程中发现有重大的bug导致应用crash，可以申请加急，非常快，<a href="https://developer.apple.com/appstore/contact/?topic=expedite%3E" target="_blank" rel="external">contact</a></p>
<p>最后《码农周刊》iOS客户端愉快的上线了</p>
<p><a href="https://itunes.apple.com/cn/app/yuan-yi-yue/id990227579?l=en&amp;mt=8" target="_blank" rel="external"><img src="https://camo.githubusercontent.com/770175f6c01d89c84a020706126a9e6399ff76c4/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f4b696e676669736865722e7376673f7374796c653d666c6174" alt="AppStore"></a>  <a href="https://github.com/lcepy/manong-reading" target="_blank" rel="external"><img src="https://camo.githubusercontent.com/b0224997019dec4e51d692c722ea9bee2818c837/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667" alt="manong-reading"></a></p>
<p><a href="https://itunes.apple.com/cn/app/yuan-yi-yue/id990227579?l=en&amp;mt=8" target="_blank" rel="external">Download on the App Store</a> </p>
<p><a href="https://github.com/lcepy/manong-reading" target="_blank" rel="external">checking on the manong-reading project </a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="开发之前的准备">开发之前的准备</h2>
<p>关于证书，以及流程，前人已有总结，请阅读</p>
<ul>
<li><a href="http://www.jianshu.com/p/6c75a6e53605" target="_blank" rel="exte]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用storyboard设计app原型]]></title>
    <link href="http://lcepy.github.io/2015/05/23/%E4%BD%BF%E7%94%A8storyboard%E8%AE%BE%E8%AE%A1app%E5%8E%9F%E5%9E%8B/"/>
    <id>http://lcepy.github.io/2015/05/23/使用storyboard设计app原型/</id>
    <published>2015-05-23T12:48:13.000Z</published>
    <updated>2015-05-23T15:01:45.000Z</updated>
    <content type="html"><![CDATA[<p>今天我想写一下自己利用storyboard+swift快速设计一款App原型的经历，这是突然发现Xcode的强大之处带来的优势，你可以设计一个如下图的原型。</p>
<p><img src="http://websources.qiniudn.com/iOS/prototype.png" alt=""></p>
<p>先创建一个项目＋创建一个storyboard＋拖拽一个ViewController到storyboard中（默认你知道怎么创建一个项目，怎么新建一个storyboard，以及怎么拖拽一个ViewController到storyboard中）</p>
<p><img src="http://websources.qiniudn.com/iOS/storyboard.png" alt=""></p>
<p>给ViewController设置启动，这个设置针对storyboard是唯一的，也就是只能设置一个</p>
<p><img src="http://websources.qiniudn.com/iOS/initViewController.png" alt=""></p>
<p>给ViewController设置身份ID(identity)，它应该是唯一的，而且后期如果有多个storyboard时场景的跳转会使用到</p>
<pre><code><span class="keyword">var</span> sd:<span class="type">UIStoryboard</span> = <span class="type">UIStoryboard</span>(name: <span class="string">"Cycling"</span>, bundle: <span class="built_in">nil</span>)
<span class="keyword">var</span> cyc:<span class="type">CyclingInitViewController</span> = sd.instantiateViewControllerWithIdentifier(<span class="string">"CyclingInit"</span>) <span class="keyword">as</span>! <span class="type">CyclingInitViewController</span>
<span class="keyword">self</span>.navigationController?.pushViewController(cyc, animated: <span class="built_in">true</span>)
</code></pre><p><img src="http://websources.qiniudn.com/iOS/identity.png" alt=""></p>
<p>给ViewController应用一个NavgationController，每一个视图控制器中都有一个navigationController和navigationItem。（注意：前者应该算一个公共的，后者navigationItem是每个控制器自身独有的）在使用的时候需要注意这些，以保证标题，以及导航栏上的bar可以设置正确</p>
<p><img src="http://websources.qiniudn.com/iOS/navigationC.png" alt=""></p>
<p>拖拽一个label到视图中，我们可以通过属性板来设置它的一些属性，比如字体大小，颜色，是否居中。属性有很多，基本上和代码中的UILabel可以一一对应起来。</p>
<p><img src="http://websources.qiniudn.com/iOS/attributes.png" alt=""></p>
<p>在Size面板中可以调整x,y以及高宽</p>
<p><img src="http://websources.qiniudn.com/iOS/size.png" alt=""></p>
<p>接下来应该是一个最重要的活儿了，autolayout技术对视图进行约束，这是接下来想对UI进行正确排版所使用的技术，关于它的细节问题，你需要慢慢了解，我只能告诉你怎样在storyboard中利用Xcode给我们提供的工具去连线，去进行约束。</p>
<p>第一种方式，利用右下角的小三角形，对约束进行重置（简单的约束，Xcode非常智能的帮你排版了）</p>
<p><img src="http://websources.qiniudn.com/iOS/constraintsimage.png" alt=""></p>
<p>第二种方式，利用连线去设置constraints，属性比较多，可以记一下，上下左右高宽都有，还有居中什么的</p>
<p><img src="http://websources.qiniudn.com/iOS/constraints3.png" alt=""></p>
<p>第三种方式，利用代码去设置constraints（一般来说，我们是在设计原型，如果用代码…感觉杀鸡焉用牛刀了）推荐一个库<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a>（注明：现在还没有swift版的）</p>
<p>最后大家看看我们设计的一个结果吧，源代码可以在Github上查看<a href="https://github.com/lcepy/storyboard-app-prototype" target="_blank" rel="external">storyboard-app-prototype</a></p>
<p><img src="http://websources.qiniudn.com/iOS/result.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天我想写一下自己利用storyboard+swift快速设计一款App原型的经历，这是突然发现Xcode的强大之处带来的优势，你可以设计一个如下图的原型。</p>
<p><img src="http://websources.qiniudn.com/iOS/prototy]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Worker实现一个多线程数据缓存模块]]></title>
    <link href="http://lcepy.github.io/2015/05/20/%E4%BD%BF%E7%94%A8Worker%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9D%97/"/>
    <id>http://lcepy.github.io/2015/05/20/使用Worker实现一个多线程数据缓存模块/</id>
    <published>2015-05-20T08:24:18.000Z</published>
    <updated>2015-05-20T08:44:43.000Z</updated>
    <content type="html"><![CDATA[<p>Worker是一个可以在后台运行的任务，并提供了一个JavaScript接口让我们来使用它。Worker能够被轻松的创建，还能向它的创建者发送消息。 你只要调用 Worker() 构造函数，指定一个需要运行在 worker 线程内的脚本，就能够很容易的创建一个 worker。</p>
<p>Worker这个API的使用非常的简单</p>
<ul>
<li>postMessage()  向worker内部发送消息</li>
<li>terminate() 立即停止当前的worker</li>
<li>onmessage 一个消息事件，worker内部向前台发送消息 </li>
<li>onerror 一个错误事件，运行环境出错时，worker内部向前台发送消息</li>
</ul>
<p>属性</p>
<ul>
<li>message 一个可读的错误消息</li>
<li>filename 错误所在的文件名</li>
<li>lineno 错误所在的文本行号 </li>
</ul>
<p>JavaScript Client Code</p>
<pre><code><span class="keyword">var</span> workerQueue = [];
<span class="keyword">var</span> cacheSystem = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> isWork         = !!Worker;
    <span class="keyword">var</span> dataSource     = {};
    <span class="keyword">var</span> contains     = [];
    <span class="keyword">var</span> lock        = <span class="literal">false</span>;
    <span class="keyword">var</span> count         = <span class="number">0</span>;
    <span class="keyword">var</span> getDash     = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="keyword">var</span> dash         = localStorage.getItem(<span class="string">'scanUseDashDataSource'</span>);
        <span class="keyword">var</span> dashData     = dash ? <span class="built_in">JSON</span>.parse(dash).data : contains;
        <span class="keyword">return</span> dashData; 
    }
    <span class="keyword">return</span>    {
        allObject:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            <span class="keyword">var</span> d = localStorage.getItem(<span class="string">'scanUseModalDataSource'</span>);
            <span class="keyword">return</span> d ? d = <span class="built_in">JSON</span>.parse(d).data : <span class="literal">null</span>;
        },
        objectForKey:<span class="function"><span class="keyword">function</span><span class="params">(key)</span></span>{
            <span class="keyword">return</span> <span class="keyword">this</span>.allObject()[key];
        },
        allKeys:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            <span class="keyword">var</span> o = <span class="keyword">this</span>.allObject();
            <span class="keyword">return</span> o ? <span class="built_in">Object</span>.keys(o) : contains;
        },
        allValues:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            <span class="keyword">var</span> o = <span class="keyword">this</span>.allObject();
            <span class="keyword">if</span>(!o){
                <span class="keyword">return</span> contains;
            }
            <span class="keyword">var</span> c = [];
            <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o){
                c.push(o[k].data);
            }
            <span class="keyword">return</span> c;
        },
        allDash:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            <span class="keyword">return</span> getDash();
        },
        setObject:<span class="function"><span class="keyword">function</span><span class="params">(value)</span></span>{
            <span class="keyword">var</span> s             = <span class="keyword">this</span>;
            <span class="keyword">var</span> metadata     = <span class="keyword">this</span>.allObject() || {};
            metadata[value] = {<span class="string">"data"</span>:<span class="literal">null</span>,<span class="string">"work"</span>:<span class="literal">false</span>,<span class="string">"error"</span>:<span class="literal">false</span>};
            <span class="keyword">var</span> dashData     = <span class="keyword">this</span>.allDash();    
            <span class="comment">//如果有网络，提交给后台线程去处理网络请求</span>
            <span class="built_in">window</span>.networkState = <span class="number">1</span>;
            <span class="keyword">if</span>(isWork &amp;&amp; <span class="built_in">window</span>.networkState &gt; <span class="number">0</span>){
                <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'fetchThread.js'</span>);
                worker.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span><span class="params">(evt)</span></span>{
                    <span class="built_in">console</span>.log(evt);
                    <span class="keyword">var</span> obj = s.allObject();
                    <span class="keyword">var</span> sp     = evt.data.split(<span class="string">'@icepy-&gt;'</span>);
                    <span class="keyword">var</span> tag = sp[<span class="number">0</span>];
                    <span class="keyword">var</span> dat = sp[<span class="number">1</span>];
                    <span class="keyword">var</span> o   = obj[tag];
                    <span class="keyword">var</span> r   = <span class="built_in">JSON</span>.parse(dat);
                    <span class="keyword">if</span>(o){
                        <span class="comment">//把后台得到的数据添加到data中</span>
                        o.data     = r;
                        <span class="comment">//标记work已经完成</span>
                        o.work  = <span class="literal">true</span>;
                        <span class="comment">//标记执行线程锁</span>
                        lock     = <span class="literal">false</span>;
                        <span class="keyword">if</span>(r.error){
                            o.error = <span class="literal">true</span>;
                        }
                        localStorage.setItem(<span class="string">'scanUseModalDataSource'</span>,<span class="built_in">JSON</span>.stringify({<span class="string">"data"</span>:obj}));
                        workerQueue[count][<span class="number">2</span>] = <span class="literal">true</span>;
                        count++;
                        <span class="keyword">var</span> work = workerQueue[count];
                        <span class="keyword">if</span>(work){
                            <span class="keyword">if</span>(work[<span class="number">2</span>]){
                                <span class="keyword">var</span> i = count++;
                                <span class="keyword">var</span> f = <span class="literal">true</span>;
                                <span class="keyword">do</span>{
                                    <span class="keyword">var</span> _work = workerQueue[i];
                                    <span class="keyword">if</span>(!_work[<span class="number">2</span>]){
                                        _work[<span class="number">1</span>].postMessage(_work[<span class="number">0</span>]);
                                        f = <span class="literal">false</span>;
                                        count = i;
                                        <span class="keyword">break</span>;
                                    }
                                    i++;
                                }<span class="keyword">while</span>(f);
                            }<span class="keyword">else</span>{
                                work[<span class="number">1</span>].postMessage(work[<span class="number">0</span>]);
                            }
                        }<span class="keyword">else</span>{
                            workerQueue.length = <span class="number">0</span>;
                            count = <span class="number">0</span>;
                        }
                    }

                });
                worker.addEventListener(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span><span class="params">(evt)</span></span>{
                    <span class="built_in">console</span>.log(<span class="string">'错误信息处理'</span>);
                });
                <span class="comment">//把线程加入队列</span>
                workerQueue.push([value,worker,<span class="literal">false</span>]);
                <span class="keyword">if</span>(!lock){
                    lock = <span class="literal">true</span>;
                    worker.postMessage(value);
                }
            }
            <span class="keyword">if</span>(!(dashData.indexOf(value) &gt; -<span class="number">1</span>)){
                dashData.push(value);
            }
            localStorage.setItem(<span class="string">'scanUseDashDataSource'</span>,<span class="built_in">JSON</span>.stringify({<span class="string">"data"</span>:dashData}));
            localStorage.setItem(<span class="string">'scanUseModalDataSource'</span>,<span class="built_in">JSON</span>.stringify({<span class="string">"data"</span>:metadata}));
        },
        setValue:<span class="function"><span class="keyword">function</span><span class="params">(key,value)</span></span>{
            <span class="keyword">var</span> metadata = <span class="keyword">this</span>.allObject();
            metadata[key].data = value.concat();
            metadata[key].work = <span class="literal">true</span>;
            localStorage.setItem(<span class="string">'scanUseModalDataSource'</span>,<span class="built_in">JSON</span>.stringify({<span class="string">"data"</span>:metadata}));
        },
        removeObjectForKey:<span class="function"><span class="keyword">function</span><span class="params">(key)</span></span>{
            <span class="keyword">var</span> metadata     = <span class="keyword">this</span>.allObject();
            <span class="keyword">var</span> dash         = <span class="keyword">this</span>.allDash();
            dash.splice(dash.indexOf(key),<span class="number">1</span>);
            <span class="keyword">this</span>.pop(key);
            <span class="keyword">delete</span> metadata[key];
            localStorage.setItem(<span class="string">'scanUseDashDataSource'</span>,<span class="built_in">JSON</span>.stringify({<span class="string">"data"</span>:dash}));
            localStorage.setItem(<span class="string">'scanUseModalDataSource'</span>,<span class="built_in">JSON</span>.stringify({<span class="string">"data"</span>:metadata}));
        },
        repeat:<span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>{
            <span class="keyword">var</span> d = <span class="keyword">this</span>.allKeys();
                i = <span class="number">0</span>;
            <span class="keyword">if</span>(!d.length){
                <span class="keyword">return</span> <span class="literal">false</span>;
            }<span class="keyword">else</span>{
                <span class="keyword">var</span> lock = <span class="literal">false</span>;
                <span class="keyword">if</span>(d.indexOf(v) &gt; -<span class="number">1</span>){
                    lock = <span class="literal">true</span>;
                }
                <span class="keyword">return</span> lock;
            }
        },
        pop:<span class="function"><span class="keyword">function</span><span class="params">(key,d)</span></span>{
            <span class="keyword">if</span>(!d){
                d = <span class="keyword">this</span>.allObject();
            }
            <span class="keyword">if</span>(isWork){
                <span class="keyword">var</span> i = <span class="number">0</span>;
                <span class="keyword">var</span> e = workerQueue.length;
                <span class="keyword">if</span>(e &gt; <span class="number">0</span>){
                    <span class="keyword">for</span>(;i&lt;e;i++){
                        <span class="keyword">var</span> work = workerQueue[i];
                        <span class="keyword">if</span>(work &amp;&amp; work[<span class="number">0</span>] === key){
                            work[<span class="number">2</span>] = <span class="literal">true</span>;
                            work[<span class="number">1</span>].terminate();
                            <span class="keyword">break</span>;
                        }
                    }
                }
            }
        },
        isWork:isWork
    }
}();
</code></pre><p>JavaScript Thread Code</p>
<pre><code>addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span><span class="params">(evt)</span></span>{
    <span class="keyword">var</span> parameter     = evt.data;
    <span class="keyword">var</span> xhr         = <span class="keyword">new</span> XMLHttpRequest();
    <span class="keyword">var</span> headers        = {};
    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
           <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>){
               clearInterval(abortTimeout);
               <span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>){
                   postMessage(parameter+<span class="string">'@icepy-&gt;'</span>+xhr.responseText);
                   close();
               }
           }
       }
    xhr.open(<span class="string">'POST'</span>,<span class="string">'http://127.0.0.1:8001/'</span>,<span class="literal">true</span>);
       xhr.send(parameter);
       <span class="keyword">var</span> abortTimeout = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
           xhr.abort();
           postMessage(parameter+<span class="string">'@icepy-&gt;'</span>+<span class="string">'{"error":"timeout"}'</span>);
           close();
       },<span class="number">1000</span>*<span class="number">13</span>);

       xhr.onerror = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
           postMessage(parameter+<span class="string">'@icepy-&gt;'</span>+<span class="string">'{"error":"notnetwork"}'</span>);
           close();
       }     
});
</code></pre><p>阅读资料</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/Worker</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Worker是一个可以在后台运行的任务，并提供了一个JavaScript接口让我们来使用它。Worker能够被轻松的创建，还能向它的创建者发送消息。 你只要调用 Worker() 构造函数，指定一个需要运行在 worker 线程内的脚本，就能够很容易的创建一个 worker]]>
    </summary>
    
      <category term="JavaScript" scheme="http://lcepy.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NSDictionary]]></title>
    <link href="http://lcepy.github.io/2015/05/16/NSDictionary/"/>
    <id>http://lcepy.github.io/2015/05/16/NSDictionary/</id>
    <published>2015-05-16T11:20:01.000Z</published>
    <updated>2015-05-17T13:10:25.000Z</updated>
    <content type="html"><![CDATA[<p>使用字典，能很好的组织数据，OC中的字典有三种方式</p>
<pre><code><span class="comment">//创建字典</span>
<span class="built_in">NSDictionary</span> *dic = [[<span class="built_in">NSDictionary</span> alloc] initWithObjectsAndKeys:<span class="string">@"value"</span>,<span class="string">@"key"</span>,<span class="string">@"github"</span>,<span class="string">@"build"</span>, <span class="literal">nil</span>];
<span class="built_in">NSDictionary</span> *dic1 = @{<span class="string">@"key1"</span>:<span class="string">@"value1"</span>};
<span class="built_in">NSDictionary</span> *dic2 = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:<span class="string">@"value2"</span>,<span class="string">@"key2"</span>, <span class="literal">nil</span>];
</code></pre><p>包含多少个键值对</p>
<pre><code><span class="comment">//包含多少个键值对</span>
<span class="function">NSLog</span>(<span class="at_rule">@<span class="string">"%zd"</span>,dic.count);</span>
</code></pre><p>通过已知的key名来获取值</p>
<pre><code><span class="comment">//已知key来获取值</span>
NSString *<span class="keyword">value</span> = [dic objectForKey:<span class="string">@"key"</span>];
NSLog(<span class="string">@"%@"</span>,<span class="keyword">value</span>);
</code></pre><p>获取所有的key和获取所有的值</p>
<pre><code><span class="comment">//获取所有的key名或者值，返回一个不可变数组</span>
<span class="built_in">NSArray</span> *keys = [dic allKeys];
<span class="built_in">NSArray</span> *values = [dic allValues];
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,keys);
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,values);
</code></pre><p>通过一个数组key获取值</p>
<pre><code><span class="built_in">NSArray</span> *vals = [dic objectsForKeys:@[<span class="string">@"key"</span>] notFoundMarker:<span class="string">@"not"</span>];
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,vals);
</code></pre><p>遍历</p>
<pre><code>[dic enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span> key, <span class="keyword">id</span> obj, <span class="built_in">BOOL</span> *stop) {
    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,key);
    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,obj);
}];
</code></pre><p>排序</p>
<pre><code><span class="built_in">NSArray</span> *kesArray =  [dic keysSortedByValueUsingComparator:^NSComparisonResult(<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2) {
    <span class="built_in">NSString</span> *ke1 = obj1;
    <span class="built_in">NSString</span> *ke2 = obj2;
    <span class="keyword">return</span> [ke1 compare:ke2];
}];
</code></pre><p>过滤</p>
<pre><code>[dic keysOfEntriesPassingTes<span class="variable">t:</span>&lt;#^BOOL(id key, id obj, BOOL *<span class="keyword">stop</span>)predicate#&gt;];
</code></pre><p>Mutable版的字典，多了增删的方法</p>
<pre><code><span class="built_in">NSMutableDictionary</span> *dicmutable = [<span class="built_in">NSMutableDictionary</span> dictionaryWithDictionary:dic];
</code></pre><p>添加</p>
<pre><code>[dicmutable <span class="keyword">set</span>Object:@<span class="string">"icepy"</span> <span class="keyword">for</span>Key:@<span class="string">"io"</span>];
NSLog(@<span class="string">"%@"</span>,dicmutable);
</code></pre><p>删除</p>
<pre><code><span class="attr_selector">[dicmutable removeObjectForKey:@"build"]</span>;
<span class="function">NSLog</span>(<span class="at_rule">@<span class="string">"%@"</span>,dicmutable);</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>使用字典，能很好的组织数据，OC中的字典有三种方式</p>
<pre><code><span class="comment">//创建字典</span>
<span class="built_in">NSDictionary</span> *dic = [[<span cl]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS动画基础]]></title>
    <link href="http://lcepy.github.io/2015/05/10/iOS%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80/"/>
    <id>http://lcepy.github.io/2015/05/10/iOS动画基础/</id>
    <published>2015-05-09T17:02:06.000Z</published>
    <updated>2015-05-10T08:21:49.000Z</updated>
    <content type="html"><![CDATA[<p>貌似在哪个领域里，动画的实现都赋予了软件非常生动的交互，所以我们必须要掌握并学好它。在学习动画之前，首推<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514" target="_blank" rel="external">Core Animation Programming Guide</a>核心动画编程指南，去了解一下官方的术语，定义，以及指导，这很有帮助。</p>
<p>顾名思义，动画也就是让我们的view可以动起来，所谓的view实际上都会继承于UIView，而每一个UIView都有一个CALayer对象，它们两个是分开的，分别用于不同的地方。可以看见的是，UIView用于显示，CALayer用于绘制。（注明：CALayer属于QuartzCore框架）</p>
<p>UIView自身（注明：UIView属于UIKit框架）会有描述位置的信息，比如frame，transform。在使用一些比较简单的动画时，我们应该首选考虑的是使用UIView提供的一些方法，去改变frame，transform等属性。</p>
<pre><code><span class="title">[UIView animateWithDuration:1.6 animations:^{

}]</span><span class="comment">;</span>
</code></pre><p>对于高度复杂一些的动画，就需要我们对Core Animation整个的熟悉和了解了。这里，我建议先阅读一下<a href="http://objccn.io/issue-12-1/" target="_blank" rel="external">动画理解</a>，把一些概念性的东西了解清楚。比如Core Animation维护的层次结构，什么叫模型层树(model layer tree)，什么叫表现层树(presentation layer tree)，而且你务必要理解，当把动画添加到一个layer的时候，是不直接修改其属性的。</p>
<p>在清楚这些概念性的问题后，你可以去学习一些动画类了，比如CABasicAnimation，CATransform3D，CAKeyframeAnimation,CAAnimationGroup,CAAnimation，另外你务必要记住一点，CAAnimation是这些动画类的鼻祖(它是一个抽象类，不能直接使用)，而且要搞清楚CALayer。</p>
<p>举例一些简单的例子</p>
<p><strong>使用CABasicAnimation</strong></p>
<pre><code>CABasicAnimation *<span class="variable">animation =</span> [CABasicAnimation animation];
animation.<span class="variable">keyPath =</span> @<span class="string">"position.x"</span>;
animation.<span class="variable">duration =</span> <span class="number">1</span>;
animation.<span class="variable">fromValue =</span> @<span class="number">50</span>;
animation.<span class="variable">toValue =</span> @<span class="number">250</span>;
[view.layer addAnimation:animation forKey:@<span class="string">"left"</span>];
</code></pre><p>为了验证动画究竟修改了那个地方的值，我打印了一下view的frame，NSLog(@”%@”,NSStringFromCGRect(view.frame))，这里可以看的出来，view的frame值没有发生改变，而且在模拟器中，动画结束了，view又回到了原来的位置。说明啊，动画的执行和view的渲染是分开的，如果你还不理解，请继续阅读《核心动画编程指南》或者简单的《动画理解》。</p>
<p>如果我们不想动画结束后view回到原来的位置，可以使用</p>
<pre><code>animation.<span class="variable">fillMode =</span> kCAFillModeForwards;
animation.<span class="variable">removedOnCompletion =</span> NO;
</code></pre><p><strong>使用CAKeyframeAnimation</strong></p>
<pre><code><span class="constant">CAKeyframeAnimation</span> *animation = [<span class="constant">CAKeyframeAnimation</span> animation];
animation.keyPath = @<span class="string">"position.x"</span>;
animation.values = @[<span class="variable">@0</span>,<span class="variable">@10</span>,@-<span class="number">10</span>,<span class="variable">@10</span>,<span class="variable">@0</span>];
animation.keyTimes = @[ <span class="variable">@0</span>, @(<span class="number">1</span> / <span class="number">6.0</span>), @(<span class="number">3</span> / <span class="number">6.0</span>), @(<span class="number">5</span> / <span class="number">6.0</span>), <span class="variable">@1</span> ];
animation.duration = <span class="number">0</span>.<span class="number">4</span>;
animation.additive = <span class="constant">YES</span>;
[view.layer <span class="symbol">addAnimation:</span>animation <span class="symbol">forKey:</span>@<span class="string">"shake"</span>];
</code></pre><p><strong>使用CAAnimationGroup</strong></p>
<pre><code>CABasicAnimation *<span class="variable">right =</span> [CABasicAnimation animation];
right.<span class="variable">keyPath =</span> @<span class="string">"position.x"</span>;
right.<span class="variable">duration =</span> <span class="number">1</span>;
right.<span class="variable">toValue =</span> @<span class="number">250</span>;
right.<span class="variable">timingFunction =</span> [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];

CABasicAnimation *<span class="variable">top =</span> [CABasicAnimation animation];
top.<span class="variable">keyPath =</span> @<span class="string">"position.y"</span>;
top.<span class="variable">duration =</span> <span class="number">1</span>;
top.<span class="variable">toValue =</span> @<span class="number">10</span>;
right.<span class="variable">timingFunction =</span> [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];

CAAnimationGroup *<span class="variable">animationsGroup =</span> [CAAnimationGroup animation];
animationsGroup.<span class="variable">animations =</span> @[right,top];
[view.layer addAnimation:animationsGroup forKey:@<span class="string">"group"</span>];
</code></pre><p>阅读资料：</p>
<ul>
<li><a href="http://objccn.io/issue-12/" target="_blank" rel="external">#12动画</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/CoreAnimation_framework/index.html#//apple_ref/doc/uid/TP40004513" target="_blank" rel="external">Core Animation Reference Collection</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>貌似在哪个领域里，动画的实现都赋予了软件非常生动的交互，所以我们必须要掌握并学好它。在学习动画之前，首推<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreA]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CoreData的使用]]></title>
    <link href="http://lcepy.github.io/2015/05/05/CoreData%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://lcepy.github.io/2015/05/05/CoreData的使用/</id>
    <published>2015-05-05T02:31:04.000Z</published>
    <updated>2015-05-05T04:25:02.000Z</updated>
    <content type="html"><![CDATA[<p>CoreData是Cocoa中处理数据，绑定数据的一个框架，如果不靠谱数据的平台一致性（iOS，Android），完全可以使用它替代SQLite。虽然，iOS也有一个C实现的SQLite库，但是语法层面比较琐碎，而且使用的是C函数。如果要使用，大家可以选择使用一个开源的库来替代<a href="https://github.com/ccgus/fmdb" target="_blank" rel="external">Obje-C版</a>和<a href="https://github.com/FahimF/SQLiteDB" target="_blank" rel="external">Swift版</a></p>
<p>从代码层面上来看，要创建一个CoreData实例，需要四个步骤</p>
<ul>
<li>创建数据库文件的物理地址</li>
<li>创建模型托管对象</li>
<li>创建持久化存储调度器</li>
<li>创建上下文</li>
</ul>
<p>正常情况下，上述四个步骤，我们只使用一次，建议惰性加载它</p>
<pre><code>-(NSManagedObjectContext *)context
{
    <span class="keyword">if</span> (!_context) {
        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;
        <span class="comment">//创建db url</span>
        <span class="built_in">NSString</span> *dbPath = [<span class="keyword">self</span><span class="variable">.baseDoc</span> stringByAppendingPathComponent:<span class="string">@"manong.db"</span>];
        <span class="built_in">NSURL</span> *dbUrl = [<span class="built_in">NSURL</span> fileURLWithPath:dbPath];
        <span class="comment">//创建模型托管对象</span>
        NSManagedObjectModel *model = [NSManagedObjectModel mergedModelFromBundles:<span class="literal">nil</span>];
        <span class="comment">//创建持久化存储调度器</span>
        NSPersistentStoreCoordinator *store = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model];
        [store addPersistentStoreWithType:NSSQLiteStoreType configuration:<span class="literal">nil</span> URL:dbUrl options:<span class="literal">nil</span> error:&amp;error];
        <span class="comment">//创建上下文</span>
        _context = [[NSManagedObjectContext alloc] init];
        [_context setPersistentStoreCoordinator:store];
    }
    <span class="keyword">return</span> _context;
}
</code></pre><p>下面给出一张关系图</p>
<p><img src="http://websources.qiniudn.com/iOS/CoreData类关系图.png" alt="CoreData类关系图"></p>
<p>从上述的图中，其实可以看到一些有关系的模块</p>
<ul>
<li>Managed Object Model 用于描述数据模型，这里包括实体，属性，请求等</li>
<li>Managed Object Context 参与对数据对象进行各项操作的上下文</li>
<li>Managed Object 数据对象（用户使用的对象与上下文有关联）</li>
<li>Persistent Store 相当于数据库文件的管理器，处理底层对数据库文件的读取与写入</li>
</ul>
<p><strong>基本上创建一个Managed Object文件不需要自己去手动创建，而且建议Xcode帮助我们创建的model文件不要修改</strong></p>
<p>如果非要自己创建的话，那么继承NSManagedObject类吧</p>
<pre><code><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span>
<span class="preprocessor">#import <span class="title">&lt;CoreData/CoreData.h&gt;</span></span>

<span class="class"><span class="keyword">@interface</span> <span class="title">ManongTag</span> : <span class="title">NSManagedObject</span></span>

<span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, retain) <span class="built_in">NSNumber</span> * contentCount;
<span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, retain) <span class="built_in">NSString</span> * tagKey;
<span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, retain) <span class="built_in">NSString</span> * tagName;

<span class="keyword">@end</span>
</code></pre><h1 id="下面给出一张实际的操作图，如何使用CoreData。">下面给出一张实际的操作图，如何使用CoreData。</h1>
<p><img src="http://websources.qiniudn.com/iOS/CoreData操作图形化.jpg" alt="CoreData操作图形化"> </p>
<ul>
<li>首先add Entity添加一个实体</li>
<li>然后在Attributes中添加相应的属性，在Type中选择相应的数据类型</li>
<li>Pelationships可以对实体进行关联，比如ManongTitle实体中关联了一个ManongContent实体</li>
<li>&lt;橘黄色箭头&gt;可以设置多关联，在使用的时候它会是一个NSSet集合</li>
<li>Style可以查看设计图</li>
</ul>
<p>如果想新增一条数据，需要三个步骤才能实现，第一先创建一个实体描述，第二创建一个ManagedObject对象，第三给上下文的save方法发送消息。</p>
<pre><code>NSEntityDescription *mnTag = [NSEntityDescription entityForName:<span class="string">@"ManongTag"</span> inManagedObjectContext:<span class="keyword">self</span><span class="variable">.context</span>];
ManongTag *manongTag = [[ManongTag alloc] initWithEntity:mnTag insertIntoManagedObjectContext:<span class="keyword">self</span><span class="variable">.context</span>];
manongTag<span class="variable">.tagKey</span> = tagKey;
manongTag<span class="variable">.tagName</span> = tagNmae;
<span class="built_in">NSError</span> *error = <span class="literal">nil</span>;
<span class="built_in">BOOL</span> success;
[<span class="keyword">self</span><span class="variable">.context</span> save:&amp;error];
success = error ? <span class="literal">NO</span> : <span class="literal">YES</span>;
</code></pre><p>如果想在实体中查询数据，一般情况下两个步骤，如果是条件查询最少三个步骤，第一创建一个查询请求，第二创建一个谓词对象，第三给上下文的executeFetchRequest方法发送消息。</p>
<pre><code><span class="comment">//查询所有的数据</span>
<span class="constant">NSFetchRequest *request</span> = [[NSFetchRequest alloc] initWithEntityName:@<span class="string">"ManongDigest"</span>];
<span class="constant">NSArray *arr</span> = [self.context executeFetchRequest:request error:&amp;error];

<span class="comment">//条件查询</span>
<span class="constant">NSFetchRequest *request</span> = [[NSFetchRequest alloc] initWithEntityName:@“ManongDigest”];
<span class="constant">NSPredicate *dicate</span> = [NSPredicate predicateWithFormat:@<span class="string">"%K BEGINSWITH[c] %@"</span>,@<span class="string">"tagName"</span>,@<span class="string">"a"</span>];
<span class="constant">NSArray *arr</span> = [self.context executeFetchRequest:request error:&amp;error];
</code></pre><p>如果想更新某一条数据，正常情况下三个步骤，第一创建一个查询请求，第二修改MangedObject对象的属性，第三给上下文的save方法发送消息。</p>
<pre><code>NSFetchRequest *request = [[NSFetchRequest alloc] initWithEntityName:<span class="string">@"ManongDigest"</span>];
<span class="built_in">NSArray</span> *arr = [<span class="keyword">self</span><span class="variable">.context</span> executeFetchRequest:request error:&amp;error];
<span class="keyword">for</span>(ManongDigest *digest <span class="keyword">in</span> arr)
{
    digest<span class="variable">.tagName</span> = <span class="string">@"lcepy"</span>;
}
<span class="built_in">NSError</span> *error = <span class="literal">nil</span>;
[<span class="keyword">self</span><span class="variable">.context</span> save:&amp;error];
<span class="keyword">if</span> (error) {
    <span class="keyword">return</span> <span class="literal">NO</span>;
}<span class="keyword">else</span>{
    <span class="keyword">return</span> <span class="literal">YES</span>;
}
</code></pre><p>如果想删除某一条数据</p>
<pre><code>NSFetchRequest *<span class="built_in">request</span> = [[NSFetchRequest alloc] initWithEntityName:@<span class="string">"ManongDigest"</span>];
NSArray *arr = [self.context executeFetchRequest:<span class="built_in">request</span> <span class="keyword">error</span>:&amp;<span class="keyword">error</span>];
<span class="keyword">if</span>(arr.count){
    ManongDigest *digest = (ManongDigest *)arr[<span class="number">0</span>];
    [self.context deleteObject:digest];
}
</code></pre><p>上述四种操作方式是最常用的，当然CoreData 的API肯定不止这四种，但是使用的逻辑思维基本上是，查询－处理－使用上下文或者创建实体－处理－使用上下文。</p>
<p>这个框架算比较复杂的一个，学习起来曲线也比较大，需要耐心。</p>
<p>参考资料</p>
<ul>
<li><a href="http://www.objc.io/issue-4/" target="_blank" rel="external">objc-CoreData</a></li>
<li><a href="http://objccn.io/issue-4-2/" target="_blank" rel="external">一个完整的 Core Data 应用</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CoreData_ObjC/index.html" target="_blank" rel="external">Core Data API</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/" target="_blank" rel="external">NSPredicate API</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>CoreData是Cocoa中处理数据，绑定数据的一个框架，如果不靠谱数据的平台一致性（iOS，Android），完全可以使用它替代SQLite。虽然，iOS也有一个C实现的SQLite库，但是语法层面比较琐碎，而且使用的是C函数。如果要使用，大家可以选择使用一个开源的库来]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NSArray]]></title>
    <link href="http://lcepy.github.io/2015/05/03/NSArray/"/>
    <id>http://lcepy.github.io/2015/05/03/NSArray/</id>
    <published>2015-05-03T07:42:06.000Z</published>
    <updated>2015-05-03T13:43:23.000Z</updated>
    <content type="html"><![CDATA[<p>基础扎实才能使编程更加的得心应手，今天要写一些学习NSArray以及NSMutableArray的东西。</p>
<p>创建一个数组其实跟创建NSString一样OC也提供了三种方式，语法糖，实例化，类方法。</p>
<pre><code><span class="comment">//创建语法糖</span>
<span class="built_in">NSArray</span> *arry = @[<span class="string">@"1"</span>,<span class="string">@"2"</span>,<span class="string">@"3"</span>,<span class="string">@"4"</span>];
<span class="comment">//手动实例创建</span>
<span class="built_in">NSArray</span> *arry1 = [[<span class="built_in">NSArray</span> alloc] initWithObjects:<span class="string">@"1"</span>,<span class="string">@"2"</span>, <span class="literal">nil</span>];
<span class="comment">//类方法创建</span>
<span class="built_in">NSArray</span> *arry2 = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"1"</span>,<span class="string">@"2"</span>, <span class="literal">nil</span>];
</code></pre><p>查找一个元素在数组中是否存在</p>
<pre><code><span class="comment">//查找元素是否存在，在数组中</span>
<span class="constant">BOOL isTrue</span> = [arry containsObject:@<span class="string">"1"</span>];
</code></pre><p>获取数组的长度</p>
<pre><code><span class="comment">//数组的长度</span>
<span class="type">NSUInteger</span> <span class="built_in">count</span> = arry.<span class="built_in">count</span>;
<span class="type">NSLog</span>(@<span class="string">"%zd"</span>,<span class="built_in">count</span>);
</code></pre><p>获取第一个元素和获取最后一个元素</p>
<pre><code><span class="comment">//获取第一个元素</span>
<span class="keyword">id</span> first = arry<span class="variable">.firstObject</span>;
<span class="comment">//获取最后一个元素</span>
<span class="keyword">id</span> last = arry<span class="variable">.lastObject</span>;
</code></pre><p>查找元素在数组中的位置，还可以指定一个range来确定查找的范围</p>
<pre><code><span class="comment">//查找元素在数组中的位置</span>
<span class="built_in">NSInteger</span> index = [arry indexOfObject:<span class="string">@"1"</span>];
<span class="built_in">NSLog</span>(<span class="string">@"%zd"</span>,index);

<span class="comment">//查找元素的位置，可以指定一个range</span>
<span class="built_in">NSRange</span> arrRange = NSMakeRange(<span class="number">1</span>, <span class="number">2</span>);
<span class="built_in">NSInteger</span> rangeIndex = [arry indexOfObject:<span class="string">@"3"</span> inRange:arrRange];
<span class="built_in">NSLog</span>(<span class="string">@"%zd"</span>,rangeIndex);
</code></pre><p>指定一个下标来获取元素</p>
<pre><code><span class="comment">//指定一个下标获取元素</span>
<span class="keyword">id</span> element = [arry objectAtIndex:<span class="number">1</span>];
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,element);
</code></pre><p>添加一个元素<strong>注意 NSArray是不可变的，所以添加的元素不是旧数组，而是创建了一个包含旧数组的新数组</strong>，还可以添加一个数组</p>
<pre><code><span class="comment">//添加一个元素，返回一个新的数组</span>
<span class="constant">NSArray *lcepy</span> = [arry arrayByAddingObject:@<span class="string">"lcepy"</span>];
<span class="comment">//添加一个数组，返回一个新的数组</span>
<span class="constant">NSArray *newLcepy</span> = [arry arrayByAddingObjectsFromArray:@[@<span class="string">"lcepy"</span>,@<span class="string">"github.io"</span>]];
</code></pre><p>格式化一个数组</p>
<pre><code><span class="comment">//通过一个分隔字符串来组建一个拼接字符串</span>
<span class="built_in">NSString</span> *ress =  [newLcepy componentsJoinedByString:<span class="string">@"."</span>];
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,ress);
</code></pre><p>除了for循环，for in循环外的其它几种常用的遍历方式</p>
<pre><code><span class="comment">//NSEnumerator是一个抽象类，可以使用它的nextObject来遍历元素，通常和while一起使用</span>
NSEnumerator *enumer =  [newLcepy objectEnumerator];
<span class="built_in">BOOL</span> isEnumer = <span class="literal">YES</span>;
<span class="keyword">while</span> (isEnumer) {
    <span class="keyword">id</span> enumerValue = [enumer nextObject];
    <span class="keyword">if</span> (!enumerValue) {
        isEnumer = <span class="literal">NO</span>;
    }
    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,enumerValue);
}

[arrays enumerateObjectsUsingBlock:^(<span class="keyword">id</span> obj, NSUInteger idx, <span class="built_in">BOOL</span> *stop) {
    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,obj);
    <span class="keyword">if</span> (idx &gt; <span class="number">3</span>) {
        *stop = <span class="literal">YES</span>;
    }
}];
</code></pre><p>假设如果数组中的元素都想向某个方法发送消息，那么可以这么使用，这样的方式，比如在想移除所有子视图这样的场景中非常好用</p>
<pre><code><span class="comment">//假设有一个数组中的元素都想向某个方法发送消息，那么可以使用makeObjectsPerformSelector类定义了</span>
[newLcepy makeObjectsPerformSelector:@selector(<span class="built_in">length</span>)];
</code></pre><p>给数组排序的几种方式</p>
<pre><code><span class="comment">//排序</span>
<span class="built_in">NSArray</span> *arrays = @[@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">0</span>,@<span class="number">8</span>,@<span class="number">3</span>,@<span class="number">9</span>,@<span class="number">5</span>];

<span class="comment">//正</span>
<span class="built_in">NSArray</span> *minMax = [arrays sortedArrayUsingComparator:^NSComparisonResult(<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2) {
    <span class="keyword">return</span> obj1 &gt; obj2;
}];
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,minMax);
<span class="comment">//倒</span>
<span class="built_in">NSArray</span> *maxMin = [arrays sortedArrayUsingComparator:^NSComparisonResult(<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2) {
    <span class="keyword">return</span> obj1 &lt; obj2;
}];
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,maxMin);

<span class="comment">//    [arrays sortedArrayWithOptions:&lt;#(NSSortOptions)#&gt; usingComparator:&lt;#^NSComparisonResult(id obj1, id obj2)cmptr#&gt;]</span>

<span class="comment">//    [arrays sortedArrayUsingFunction:&lt;#(NSInteger (*)(__strong id, __strong id, void *))#&gt; context:&lt;#(void *)#&gt;]</span>

SEL execu = <span class="keyword">@selector</span>(compare:);
<span class="built_in">NSArray</span> *newArr = [arrays sortedArrayUsingSelector:execu];
<span class="built_in">NSLog</span>(<span class="string">@"s%@"</span>,newArr);
</code></pre><p>数组还可以进行筛选，NSPredicate这个类在使用Core Data时会经常用到</p>
<pre><code>[arrays filteredArrayUsingPredicate:&lt;#(NSPredicate *)#&gt;]
</code></pre><h3 id="NSMutableArray">NSMutableArray</h3>
<p>创建NSMutableArray只有两种方式，alloc和类方法，这是一个可变的数组，可以增删改滴，也可以排序，NSArray存在的方法，NSMutableArray全部具备，只是它多了可以添加，删除，修改，替换的方法，这里不一一写例子了，可以自己实际操作一下。</p>
<pre><code><span class="pp">- <span class="params">(void)</span>addObject:<span class="params">(id)</span>anObject;
- <span class="params">(void)</span>insertObject:<span class="params">(id)</span>anObject atIndex:<span class="params">(<span class="variable">NSUInteger</span>)</span>index;
- <span class="params">(void)</span>removeLastObject;
- <span class="params">(void)</span>removeObjectAtIndex:<span class="params">(<span class="variable">NSUInteger</span>)</span>index;
- <span class="params">(void)</span>replaceObjectAtIndex:<span class="params">(<span class="variable">NSUInteger</span>)</span>index withObject:<span class="params">(id)</span>anObject;
- <span class="params">(void)</span>addObjectsFromArray:<span class="params">(<span class="variable">NSArray</span> *)</span>otherArray;
- <span class="params">(void)</span>exchangeObjectAtIndex:<span class="params">(<span class="variable">NSUInteger</span>)</span>idx1 withObjectAtIndex:<span class="params">(<span class="variable">NSUInteger</span>)</span>idx2;
- <span class="params">(void)</span>removeAllObjects;
- <span class="params">(void)</span>removeObject:<span class="params">(id)</span>anObject inRange:<span class="params">(<span class="variable">NSRange</span>)</span>range;
- <span class="params">(void)</span>removeObject:<span class="params">(id)</span>anObject;
- <span class="params">(void)</span>removeObjectIdenticalTo:<span class="params">(id)</span>anObject inRange:<span class="params">(<span class="variable">NSRange</span>)</span>range;
- <span class="params">(void)</span>removeObjectIdenticalTo:<span class="params">(id)</span>anObject;
- <span class="params">(void)</span>removeObjectsFromIndices:<span class="params">(<span class="variable">NSUInteger</span> *)</span>indices numIndices:<span class="params">(<span class="variable">NSUInteger</span>)</span>cnt NS_DEPRECATED<span class="params">(<span class="number">10</span>_0, <span class="number">10</span>_6, <span class="number">2</span>_0, <span class="number">4</span>_0)</span>;
- <span class="params">(void)</span>removeObjectsInArray:<span class="params">(<span class="variable">NSArray</span> *)</span>otherArray;
- <span class="params">(void)</span>removeObjectsInRange:<span class="params">(<span class="variable">NSRange</span>)</span>range;
- <span class="params">(void)</span>replaceObjectsInRange:<span class="params">(<span class="variable">NSRange</span>)</span>range withObjectsFromArray:<span class="params">(<span class="variable">NSArray</span> *)</span>otherArray range:<span class="params">(<span class="variable">NSRange</span>)</span>otherRange;
- <span class="params">(void)</span>replaceObjectsInRange:<span class="params">(<span class="variable">NSRange</span>)</span>range withObjectsFromArray:<span class="params">(<span class="variable">NSArray</span> *)</span>otherArray;
- <span class="params">(void)</span>setArray:<span class="params">(<span class="variable">NSArray</span> *)</span>otherArray;
- <span class="params">(void)</span>sortUsingFunction:<span class="params">(<span class="variable">NSInteger</span> (*)</span><span class="params">(id, id, void *)</span>)compare context:<span class="params">(void *)</span>context;
- <span class="params">(void)</span>sortUsingSelector:<span class="params">(<span class="variable">SEL</span>)</span>comparator;
- <span class="params">(void)</span>insertObjects:<span class="params">(<span class="variable">NSArray</span> *)</span>objects atIndexes:<span class="params">(<span class="variable">NSIndexSet</span> *)</span>indexes;
- <span class="params">(void)</span>removeObjectsAtIndexes:<span class="params">(<span class="variable">NSIndexSet</span> *)</span>indexes;
- <span class="params">(void)</span>replaceObjectsAtIndexes:<span class="params">(<span class="variable">NSIndexSet</span> *)</span>indexes withObjects:<span class="params">(<span class="variable">NSArray</span> *)</span>objects;

- <span class="params">(void)</span>setObject:<span class="params">(id)</span>obj atIndexedSubscript:<span class="params">(<span class="variable">NSUInteger</span>)</span>idx NS_AVAILABLE<span class="params">(<span class="number">10</span>_8, <span class="number">6</span>_0)</span>;

- <span class="params">(void)</span>sortUsingComparator:<span class="params">(<span class="variable">NSComparator</span>)</span>cmptr NS_AVAILABLE<span class="params">(<span class="number">10</span>_6, <span class="number">4</span>_0)</span>;
- <span class="params">(void)</span>sortWithOptions:<span class="params">(<span class="variable">NSSortOptions</span>)</span>opts usingComparator:<span class="params">(<span class="variable">NSComparator</span>)</span>cmptr NS_AVAILABLE<span class="params">(<span class="number">10</span>_6, <span class="number">4</span>_0)</span>;</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>基础扎实才能使编程更加的得心应手，今天要写一些学习NSArray以及NSMutableArray的东西。</p>
<p>创建一个数组其实跟创建NSString一样OC也提供了三种方式，语法糖，实例化，类方法。</p>
<pre><code><span class="comm]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[好用的WebKit.framework]]></title>
    <link href="http://lcepy.github.io/2015/05/01/%E5%A5%BD%E7%94%A8%E7%9A%84WebKit-framework/"/>
    <id>http://lcepy.github.io/2015/05/01/好用的WebKit-framework/</id>
    <published>2015-05-01T06:25:36.000Z</published>
    <updated>2015-05-03T07:37:26.000Z</updated>
    <content type="html"><![CDATA[<p>WebKit是iOS8推出的一个用于替代UIWebView的框架，解决了很多UIWebView的问题，比如释放内存，各种稀奇古怪的bug，而且还内置了手势的处理，一句话：好用。</p>
<p>注意：<strong>2015年4月更新的苹果审核文档中明确标识，必须要用WebKit替换UIWebView，不然审核拒绝。</strong></p>
<p>在使用WebKit框架的过程中，自己也遇到了一些问题，有些解决了，有些还未解决。</p>
<ul>
<li>WebKit目前还未能在storyboard中直接使用，需要用代码的方式创建，手动添加约束</li>
<li>对于某些页面如果设置了overflow-x，这可能引起scrollView的contentSize的变化，进一步影响WKWebView的内置手势，swipe返回失效</li>
<li>目前还未找到怎么处理NSURLCache的问题，也就是页面的缓存机制，看样子好像要自己实现</li>
</ul>
<p>如何创建一个WKWebView？首先要在link中引入WebKit.framework，然后使用代码的方式：</p>
<pre><code>-(<span class="constant">WKWebView</span> *)<span class="constant">WKWebPageView</span>
{
    <span class="keyword">if</span> (!_WKWebPageView) {
        _WKWebPageView = [[<span class="constant">WKWebView</span> alloc] <span class="symbol">initWithFrame:</span><span class="keyword">self</span>.view.bounds];
        _WKWebPageView.navigationDelegate = <span class="keyword">self</span>;
    }
    <span class="keyword">return</span> _WKWebPageView;
}
</code></pre><p>WKWebView主要需要实现两个协议WKNavigationDelegate和WKUIDelegate，前一个用于一个页面的加载状态，包括第一次响应成功，加载中，加载完成，加载错误等，后面一个我个人感觉有点意思，主要用于改变UI界面，比如客户端JavaScript使用了一个alert，这个协议可以捕获到，然后使用原生的控件来替代。</p>
<p>WebKit框架还提供了一个任务配置类WKWebViewConfiguration，跟NSURLSessionConfiguration的使用方式类似,可以重新初始化WKWebView的一些配置。</p>
<p>WKNavigationDelegate协议，我主要使用了三个来处理我的应用，加载中，加载完成，加载错误的处理：</p>
<pre><code><span class="pp">-<span class="params">(void)</span>webView:<span class="params">(<span class="variable">WKWebView</span> *)</span>webView didStartProvisionalNavigation:<span class="params">(<span class="variable">WKNavigation</span> *)</span>navigation
{

}

-<span class="params">(void)</span>webView:<span class="params">(<span class="variable">WKWebView</span> *)</span>webView didFinishNavigation:<span class="params">(<span class="variable">WKNavigation</span> *)</span>navigation
{

}

-<span class="params">(void)</span>webView:<span class="params">(<span class="variable">WKWebView</span> *)</span>webView didFailProvisionalNavigation:<span class="params">(<span class="variable">WKNavigation</span> *)</span>navigation withError:<span class="params">(<span class="variable">NSError</span> *)</span>error
{

}</span>
</code></pre><p>另外一些属性我用KVO来监听：</p>
<pre><code>[<span class="keyword">self</span>.<span class="constant">WKWebPageView</span> <span class="symbol">addObserver:</span><span class="keyword">self</span> <span class="symbol">forKeyPath:</span>@<span class="string">"estimatedProgress"</span> <span class="symbol">options:</span><span class="constant">NSKeyValueObservingOptionNew</span> <span class="symbol">context:</span><span class="keyword">nil</span>];
[<span class="keyword">self</span>.<span class="constant">WKWebPageView</span> <span class="symbol">addObserver:</span><span class="keyword">self</span> <span class="symbol">forKeyPath:</span>@<span class="string">"title"</span> <span class="symbol">options:</span><span class="constant">NSKeyValueObservingOptionNew</span> <span class="symbol">context:</span><span class="keyword">nil</span>];
[<span class="keyword">self</span>.<span class="constant">WKWebPageView</span> <span class="symbol">addObserver:</span><span class="keyword">self</span> <span class="symbol">forKeyPath:</span>@<span class="string">"URL"</span> <span class="symbol">options:</span><span class="constant">NSKeyValueObservingOptionNew</span> <span class="symbol">context:</span><span class="keyword">nil</span>];
[<span class="keyword">self</span>.<span class="constant">WKWebPageView</span> <span class="symbol">addObserver:</span><span class="keyword">self</span> <span class="symbol">forKeyPath:</span>@<span class="string">"canGoBack"</span> <span class="symbol">options:</span><span class="constant">NSKeyValueObservingOptionNew</span> <span class="symbol">context:</span><span class="keyword">nil</span>];
</code></pre><p>它们分别是，页面的加载进度，页面的标题，页面的URL，页面是否回退过</p>
<p>WKWebView默认是没有开启内置手势的，可以通过allowsBackForwardNavigationGestures来设置</p>
<p>与JavaScript的交互，我目前主要使用[self.WKWebPageView evaluateJavaScript:&lt;#(NSString <em>)#&gt; completionHandler:&lt;#^(id, NSError </em>)completionHandler#&gt;]来动态改变页面加载完成之后的css样式，还有WKUserScript <em>script = [[WKUserScript alloc] initWithSource:&lt;#(NSString </em>)#&gt; injectionTime:&lt;#(WKUserScriptInjectionTime)#&gt; forMainFrameOnly:&lt;#(BOOL)#&gt;]来创建脚本，它可以明确指定加载前后注入的方式。</p>
<p><strong>注明：上述的两种创建脚本的方式都是单方向的</strong></p>
<p>如果我们想互相调用，那么就要实现WKScriptMessageHandler协议了，具体的使用方式可以参考下面给出的的参考资料。</p>
<p>参考资料：</p>
<ul>
<li><a href="http://nshipster.cn/wkwebkit/" target="_blank" rel="external">WKWebView-NSHipster</a></li>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/WebKit/Reference/WKScriptMessageHandler_Ref/index.html" target="_blank" rel="external">WKScriptMessageHandler</a></li>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/WebKit/Reference/WKWebView_Ref/index.html" target="_blank" rel="external">WKWebView</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/WebKit/Reference/WKWebViewConfiguration_Ref/index.html" target="_blank" rel="external">WKWebViewConfiguration</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/WebKit/Reference/WKUIDelegate_Ref/index.html" target="_blank" rel="external">WKUIDelegate</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/WebKit/Reference/WKNavigationDelegate_Ref/index.html" target="_blank" rel="external">WKNavigationDelegate</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>WebKit是iOS8推出的一个用于替代UIWebView的框架，解决了很多UIWebView的问题，比如释放内存，各种稀奇古怪的bug，而且还内置了手势的处理，一句话：好用。</p>
<p>注意：<strong>2015年4月更新的苹果审核文档中明确标识，必须要用WebK]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS的网络编程NSURL]]></title>
    <link href="http://lcepy.github.io/2015/04/22/iOS%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BNSURL/"/>
    <id>http://lcepy.github.io/2015/04/22/iOS的网络编程NSURL/</id>
    <published>2015-04-22T04:37:14.000Z</published>
    <updated>2015-04-27T03:57:53.000Z</updated>
    <content type="html"><![CDATA[<p>如果只是说iOS中的URL系统，它的东西还不算比较多。但是，如果想用好它，可能还需要具备一些其他方面的知识，特别是多任务编程，比如GCD，NSOperation，NSOperationQueue，NSURLSession等等，而且苹果公司在后期还推了一个叫NSURLComponents的东西，这也是需要去学习的。</p>
<p>一个简单的URL是这样发送出去的：</p>
<pre><code><span class="built_in">NSString</span> *path = <span class="string">@"http://lcepy.github.io"</span>;
<span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:path];
<span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];
NSURLResponse *response = <span class="literal">nil</span>;
<span class="built_in">NSError</span> *error = <span class="literal">nil</span>;
[<span class="built_in">NSURLConnection</span> sendSynchronousRequest:request returningResponse:&amp;response error:&amp;error];
</code></pre><p>基本上如果要构造一个request需要先构造一个NSURL对象，然后通过NSURLConnection发送出去。NSURLRequest是一个不可变的对象，默认发送的是GET的请求，如果想要发送POST请求，可以用它可变的NSMutableURLRequest来支持POST请求，包括超时时间等等。</p>
<p>关于NSURLConnection有三种方式可以发送请求，前面同步版本我们已经看过了，下面是异步和使用协议的方式：</p>
<pre><code>[NSURLConnection sendAsynchronousRequest:request queue:nil completionHandler:^(NSURLResponse <span class="keyword">*</span>response, NSData <span class="keyword">*</span>data, NSError <span class="keyword">*</span>connectionError) {

}];
</code></pre><p>协议：</p>
<pre><code><span class="comment">//实现NSURLConnectionDataDelegate协议</span>

<span class="built_in">NSURLConnection</span> *connection = [<span class="built_in">NSURLConnection</span> connectionWithRequest:request delegate:<span class="keyword">self</span>];
[connection start];

<span class="comment">//常用的需要实现下面四种方法</span>

-(<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didFailWithError:(<span class="built_in">NSError</span> *)error
{
    <span class="comment">//请求超时，错误的时候</span>
}

-(<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didReceiveResponse:(NSURLResponse *)response
{
    <span class="comment">//服务器第一次响应一个response的时候</span>
}

-(<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didReceiveData:(NSData *)data
{
    <span class="comment">//传输数据</span>
}

-(<span class="keyword">void</span>)connectionDidFinishLoading:(<span class="built_in">NSURLConnection</span> *)connection
{
    <span class="comment">//完成的时候</span>
}
</code></pre><p>对于某些任务，比如下载图片，文件等等大数据的时候，可以使用一个临时会话来启动一个请求，也就是构造一个NSURLSession。</p>
<pre><code>NSURLSessionConfiguration <span class="keyword">*</span>configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
NSURLSession <span class="keyword">*</span>session = [NSURLSession sessionWithConfiguration:configuration];
NSURLSessionDataTask <span class="keyword">*</span>task = [session dataTaskWithRequest:request completionHandler:^(NSData <span class="keyword">*</span>data, NSURLResponse <span class="keyword">*</span>response, NSError <span class="keyword">*</span>error) {

    //请求的结果
}];
[task resume];
</code></pre><p>临时会话的好处是每一个都不是在主线程执行，写的代码量比较少，适合简单的任务。</p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="http://nshipster.cn/nsurl/" target="_blank" rel="external">NSURL/NSURLComponents</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURLRequest_Class/" target="_blank" rel="external">NSURLRequest</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURL_Class/index.html" target="_blank" rel="external">NSURL</a></li>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/index.html" target="_blank" rel="external">NSURLConnection</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSession_class/" target="_blank" rel="external">NSURLSession</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURLResponse_Class/index.html" target="_blank" rel="external">NSURLResponse</a></li>
<li><a href="http://objccn.io/issue-5-4/" target="_blank" rel="external">从 NSURLConnection 到 NSURLSession</a></li>
<li><a href="http://ubluesky.com/archives/55" target="_blank" rel="external">NSURL详解</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果只是说iOS中的URL系统，它的东西还不算比较多。但是，如果想用好它，可能还需要具备一些其他方面的知识，特别是多任务编程，比如GCD，NSOperation，NSOperationQueue，NSURLSession等等，而且苹果公司在后期还推了一个叫NSURLComp]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NSString]]></title>
    <link href="http://lcepy.github.io/2015/04/18/NSString/"/>
    <id>http://lcepy.github.io/2015/04/18/NSString/</id>
    <published>2015-04-18T15:05:37.000Z</published>
    <updated>2015-04-18T16:52:13.000Z</updated>
    <content type="html"><![CDATA[<p>NSString是我学习的第一个类，它是iOS中专门处理字符串的一个类，包括有从文件读取，从网络读取，标准C的转换，格式化，大小写转换，查询，写入文件等，当然它也有一个对应的Mutable。</p>
<p><strong>优化指南：尽早开启ARC，以下都是ARC版</strong></p>
<p>要使用NSString有三种方式，第一种语法糖方式，第二种alloc方式，第三种使用类方法方式。</p>
<pre><code><span class="built_in">NSString</span> *str = <span class="string">@""</span>;
<span class="built_in">NSString</span> *str1 = [[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@"%@"</span>,<span class="string">@"hello"</span>];
<span class="built_in">NSString</span> *str2 = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,<span class="string">@"hello"</span>];
</code></pre><p>开发中用语法糖或者类方法的方式比较多</p>
<h3 id="NSString常用">NSString常用</h3>
<p>查询前缀，后缀</p>
<pre><code><span class="constant">NSString *str</span> = @<span class="string">"http://lcepy.github.io"</span>;
<span class="constant">BOOL isF</span> = [str hasPrefix:@<span class="string">"http"</span>];
<span class="constant">BOOL isL</span> = [str hasSuffix:@<span class="string">"io"</span>];
</code></pre><p>创建格式化字符串</p>
<pre><code><span class="built_in">NSString</span> *formatter = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://%@"</span>,<span class="string">@"lcepy.github.io"</span>];
<span class="built_in">NSString</span> *formatter1 = [[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@"http://%@"</span>,<span class="string">@"lcepy.github.io"</span>];
</code></pre><p>从网络读取以及响应，当然很少有人会这么干PS :会block主线程</p>
<pre><code><span class="built_in">NSURL</span> *urlS = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://lcepy.github.io"</span>];
<span class="built_in">NSString</span> *urlStr = [<span class="built_in">NSString</span> stringWithContentsOfURL:urlS encoding:NSUTF8StringEncoding error:<span class="literal">nil</span>];
<span class="built_in">NSString</span> *urlStr1 = [[<span class="built_in">NSString</span> alloc] initWithContentsOfURL:urlS encoding:NSUTF8StringEncoding error:<span class="literal">nil</span>];
[urlStr writeToURL:urlS atomically:<span class="literal">YES</span> encoding:NSUTF8StringEncoding error:<span class="literal">nil</span>];
</code></pre><p>从本地文件中读取以及写入</p>
<pre><code><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"lcepy"</span> ofType:<span class="string">@"html"</span>];
<span class="built_in">NSString</span> *fileStr = [<span class="built_in">NSString</span> stringWithContentsOfFile:path encoding:NSUTF8StringEncoding error:<span class="literal">nil</span>];
<span class="built_in">NSString</span> *fileStr1 = [[<span class="built_in">NSString</span> alloc] initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:<span class="literal">nil</span>];
[fileStr writeToFile:str atomically:<span class="literal">YES</span> encoding:NSUTF8StringEncoding error:<span class="literal">nil</span>];
</code></pre><p>字符串的比较，因为OC是C语言的超集，所以字符串有两种比较方式，指针一样，还有指针一样内容一样的比较，而==一般都不建议使用，它比较的是引用，NSString有它的比较方法。</p>
<pre><code>isEqualToString

<span class="type">NSString</span> *astring01 = @<span class="string">"This is a String!"</span>;
<span class="type">NSString</span> *astring02 = @<span class="string">"This is a String!"</span>;
<span class="type">BOOL</span> <span class="literal">result</span> = [astring01 compare:astring02] == <span class="type">NSOrderedSame</span>;    //<span class="type">NSOrderedSame</span>判断两者内容是否相同
<span class="type">NSLog</span>(@<span class="string">"result:%d"</span>,<span class="literal">result</span>);
<span class="type">BOOL</span> result1 = [astring01 compare:astring02] == <span class="type">NSOrderedAscending</span>;    //<span class="type">NSOrderedAscending</span>判断两对象值的大小(按字母顺序进行比较，astring02大于astring01为真)
<span class="type">NSLog</span>(@<span class="string">"result:%d"</span>,result1);
<span class="type">BOOL</span> result2 = [astring01 compare:astring02] == <span class="type">NSOrderedDescending</span>;    //<span class="type">NSOrderedDescending</span>判断两对象值的大小(按字母顺序进行比较，astring02小于astring01为真)
<span class="type">NSLog</span>(@<span class="string">"result:%d"</span>,result2);
</code></pre><p>大小写以及首字母大写</p>
<pre><code><span class="built_in">NSString</span> *io = <span class="string">@"hello"</span>;
<span class="built_in">NSString</span> *IO = <span class="string">@"HELLO"</span>;
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[io uppercaseString]);
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[IO lowercaseString]);
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[io capitalizedString]);
</code></pre><p>查询截取PS—&gt;<strong>我觉得NSString使用最频繁的一处，查询截取是在开发中无法避免的事项，它非常有用</strong>其实，在使用查询这一系列的方式时，它和NSRange有紧密相连的关系。NSRange是一个结构体，用来描述起始位置，以及计数。</p>
<pre><code><span class="built_in">NSString</span> *str = <span class="string">@"http://lcepy.github.io"</span>;
<span class="built_in">NSRange</span> httpRange =  [str rangeOfString:<span class="string">@"http"</span>]; <span class="comment">//返回一个range结构体</span>
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,NSStringFromRange(httpRange));


<span class="built_in">NSRange</span> ioRange = [str rangeOfString:<span class="string">@"io"</span>];
<span class="built_in">NSString</span> *subs = [str substringWithRange:NSMakeRange(ioRange<span class="variable">.location</span>, ioRange<span class="variable">.length</span>-<span class="number">1</span>)]; <span class="comment">//从指定位置开始截取字符串</span>
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,subs);

<span class="comment">//从字符串开头一直截取到指定位置</span>
<span class="built_in">NSString</span> *indexStr = [str substringToIndex:<span class="number">4</span>];
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,indexStr);

<span class="comment">//从指定位置开始截取到最后的字符串（包括）</span>
<span class="built_in">NSString</span> *lastStr = [str substringFromIndex:<span class="number">4</span>];
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,lastStr);
</code></pre><p>扩展路径以及获取扩展文件名</p>
<pre><code><span class="built_in">NSString</span> *doc = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, <span class="literal">YES</span>)[<span class="number">0</span>];
<span class="built_in">NSString</span> *filePath = [doc stringByAppendingPathComponent:<span class="string">@"PhotoCache"</span>];
<span class="built_in">NSString</span> *file = <span class="string">@"~/lcepy.io"</span>;
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[file pathExtension]);
</code></pre><h3 id="NSMutableString常用">NSMutableString常用</h3>
<p>注意PS—&gt;<strong>NSString可以使用的方法，Mutable版全部具备，Mutable版的方法，NSString不一定有</strong></p>
<p>在字符串最后插入或者格式化插入字符串</p>
<pre><code>NSMutableString *str1 = [NSMutableString stringWithStrin<span class="variable">g:</span>@<span class="string">"http://lcepy.github.io"</span>];
[str1 appendStrin<span class="variable">g:</span>@<span class="string">"#login"</span>];
[str1 appendForma<span class="variable">t:</span>@<span class="string">"%@"</span>,@<span class="string">"#login"</span>];
NSLog(@<span class="string">"%@"</span>,str1);
</code></pre><p>在指定的位置插入字符串</p>
<pre><code><span class="attr_selector">[str1 insertString:@"?id=fjdkfjkgfgi384jkg" atIndex:str1.length]</span>;
<span class="function">NSLog</span>(<span class="at_rule">@<span class="string">"%@"</span>,str1);</span>
</code></pre><p>在指定的范围内替换</p>
<pre><code><span class="built_in">NSRange</span> login = [str1 rangeOfString:<span class="string">@"#login"</span>];
[str1 replaceCharactersInRange:login withString:<span class="string">@"#logou"</span>];
<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,str1);
</code></pre><p>延伸阅读：</p>
<ul>
<li><a href="http://blog.devtang.com/blog/2012/02/14/nsstring-java-like-wrapper/" target="_blank" rel="external">给NSString添加java风格：（感觉有点意思）</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/index.html" target="_blank" rel="external">NSString</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>NSString是我学习的第一个类，它是iOS中专门处理字符串的一个类，包括有从文件读取，从网络读取，标准C的转换，格式化，大小写转换，查询，写入文件等，当然它也有一个对应的Mutable。</p>
<p><strong>优化指南：尽早开启ARC，以下都是ARC版</str]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NSURLProtocol]]></title>
    <link href="http://lcepy.github.io/2015/04/13/NSURLProtocol/"/>
    <id>http://lcepy.github.io/2015/04/13/NSURLProtocol/</id>
    <published>2015-04-13T03:38:06.000Z</published>
    <updated>2015-04-13T04:35:48.000Z</updated>
    <content type="html"><![CDATA[<p>阅读资料：</p>
<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLProtocol_Class/index.html" target="_blank" rel="external">Apple Foundation NSURLProtocol</a></li>
<li><a href="http://nshipster.cn/nsurlprotocol/" target="_blank" rel="external">http://nshipster.cn/nsurlprotocol/</a></li>
</ul>
<p>正如NSHipster在上篇文章所写的一样，iOS离不开网络，那么这就需要网络编程。cocoa提供了一系列的API来操作网络，比如NSURL，NSURLRequest，NSURLSession等等，以及处理网络的GCD，NSOperation多任务处理。</p>
<p>那么NSURLProtocol，它有什么用呢？官方给它的解释是，可以重新定义已经加载的URL的行为或者定义一个新的URL。换句话来说，就是这个类可以监管应用的网络活动，只要是通过URL来进行的。</p>
<p>NSURLProtocol是一个抽象类，也就是说它需要一个子类继承它才可以正常工作，关于怎么使用可以阅读NSHipster的文章，把子类注册到NSURLProtocol中。</p>
<pre><code>+ (<span class="keyword">void</span>)consolelog:(<span class="built_in">UITextView</span> *)debugText
{
    debug = debugText;
    [NSURLProtocol registerClass:<span class="keyword">self</span>];
}
</code></pre><h3 id="案例需求，监管应用的URL加载系统，并且支持web_client_console_log">案例需求，监管应用的URL加载系统，并且支持web client console log</h3>
<p>案例可以在Github中查看<a href="https://github.com/lcepy/MFLog" target="_blank" rel="external">MFLog</a></p>
<pre><code>+ (BOOL)registerClass:(<span class="class"><span class="keyword">Class</span>)<span class="title">protocolClass</span></span>
</code></pre><p>把子类注册到NSURLProtocol中</p>
<pre><code>+ (<span class="keyword">void</span>)unregisterClass:(<span class="keyword">Class</span>)protocolClass
</code></pre><p>把子类从NSURLProtocol中移除</p>
<p>NSURLProtocol提供了一系列的方法来操作一个URL Data，先看其一，一个静态方法。</p>
<pre><code>+ (<span class="built_in">BOOL</span>)canInitWithRequest:(<span class="built_in">NSURLRequest</span> *)request
</code></pre><p>canInitWithRequest <strong>注意，这些是覆盖父类NSURLProtocol的静态方法</strong>是系统询问，是否处理该请求URL，如果返回NO，不处理。如果返回YES，子类进一步控制。</p>
<pre><code><span class="bullet">+ </span>(NSURLRequest <span class="emphasis">*)canonicalRequestForRequest:(NSURLRequest *</span>)request
</code></pre><p>返回请求的原始request</p>
<pre><code><span class="pp">- <span class="params">(void)</span>startLoading</span>
</code></pre><p>加载此次请求，可以通过self.request获取当前URL的request对象</p>
<pre><code><span class="pp">- <span class="params">(void)</span>stopLoading</span>
</code></pre><p>此次请求完成时，可以在这个方法中处理</p>
<p>每一个NSURLProtocol都有一个client属性，这个属性是NSURLProtocolClient。另外，还可以实现NSConnectionDataDelegate协议，把NSURLProtocol与NSURLConnection链接起来，这样就可以在statLoading调用之后，系统将回调NSConnectionDataDelegate中定义的各种方法，这个在自定义时非常有用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>阅读资料：</p>
<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLProtocol_Class/]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[纪录开发第一个iOS客户端遇见的坑]]></title>
    <link href="http://lcepy.github.io/2015/03/28/%E7%BA%AA%E5%BD%95%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AAiOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%81%87%E8%A7%81%E7%9A%84%E5%9D%91/"/>
    <id>http://lcepy.github.io/2015/03/28/纪录开发第一个iOS客户端遇见的坑/</id>
    <published>2015-03-28T06:51:34.000Z</published>
    <updated>2015-04-10T07:01:36.000Z</updated>
    <content type="html"><![CDATA[<p>来到新公司做的第一个产品就是iOS客户端，我负责的是基于LeanCloud SDK开发的售后服务IM系统，也就是一个聊天的模块。第一次比较纯粹的在工作中，写Objective-c，遇到了一些坑，解决之后才发现原来是这么回事，而且还复习了它的基础语法知识。</p>
<p><strong>block的问题</strong></p>
<p>引用资料：</p>
<ul>
<li><a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/" target="_blank" rel="external">谈Objective-C Block的实现</a></li>
<li><a href="http://www.cnbluebox.com/?p=255" target="_blank" rel="external">Block防止循环引用</a></li>
</ul>
<p>本来我想使用Block来解决通信的问题，后来我发现语法以及对Block的理解有些忘记了。基础不扎实，带来了严重的后果。Block使用^来声明，用;来结束一个完整的Block，缺一不可。</p>
<pre><code><span class="keyword">void</span> (^ blockde)(<span class="built_in">NSString</span> *,<span class="built_in">NSString</span> *) = ^(<span class="built_in">NSString</span> *test1,<span class="built_in">NSString</span> *test2){
    <span class="built_in">NSString</span> *log = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@,%@"</span>,test1,test2];
    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,log);
};
</code></pre><p>Block的语法有些难度，特别是灵活运用的时候，但是记住一点，先声明返回值，然后两个括号用来描述这个Block的签名，以及参数类型，如果是OC对象，需要写上指针符号。如果没有签名，可以什么也不写。<strong>有一个情况例外，利用typedef定义的block必须写上签名</strong></p>
<p>我想在动态方法中提供一个Block来处理一些事情，定义它有两种写法。</p>
<p>第一种写法是利用typedef定义一个别名，描述还是第一项声明返回值参数，第二项别名签名，第三项传入的参数类型。</p>
<pre><code><span class="keyword">typedef</span> <span class="built_in">NSString</span> *(^handlerBlock)(<span class="built_in">NSDictionary</span> * dic,<span class="built_in">NSArray</span> * arr);

-(<span class="keyword">void</span>)sendMessageText:(handlerBlock)block
{
    block();
}
</code></pre><p>第二种写法是直接写在动态方法中，方法的参数形式一般都是()名字，所以block的声明就要写在一个圆括号中，这种写法可以省略block的签名。</p>
<pre><code><span class="pp">-<span class="params">(void)</span>setSource:<span class="params">(<span class="variable">NSString</span> *)</span> source andBlock:<span class="params">(<span class="function_name">void</span>(^)(<span class="variable">NSString</span> *treme)</span>) block
{
    block<span class="params">()</span>;
}</span>
</code></pre><p>因为公司的项目都是ARC的，所以copy就省略了，其他方面主要是需要避免循环引用的问题，比如使用__weak关键字给self对象。</p>
<p><strong>导入第三方库的问题</strong></p>
<p>这个IM模块是基于第三方SDK实现的，所以需要导入第三方库，在这里也踩了下坑。LeanCloud依赖了其他五个框架，需要手动的添加到Link Binary With Libraries中，必须得承认学艺不精的后果是这个编译的错，琢磨了很久，而且还需要把openssl的include的路径添加到Head中。</p>
<p>关于Xcode的使用，一定要把cocoaChina的那个Xcode系列阅读完。</p>
<p><strong>开发者证书的问题</strong></p>
<p>根据以往的经验想真机调试，那就必须的添加开发者证书，于是按照老旧的流程，去<a href="https://developer.apple.com/account/ios/certificate/certificateList.action" target="_blank" rel="external">https://developer.apple.com/account/ios/certificate/certificateList.action</a> 下载证书，然后添加设备UID，接着添加Profile一路Next。</p>
<p>现在这些步骤真的不需要了，在Xcode中登录自己的Apple ID，然后在项目的Team选项中选择正确的签名，Xcode自动下载，自动匹配设备UID，一切自动化，当然首先要把设备连接好。</p>
<p>它不是坑，而是因为自己不知道，在安装证书时发现了现在有这么方便的流程。    </p>
<p><strong>访问相册或者摄像头返回给web端</strong>    </p>
<p>引用资料：</p>
<ul>
<li><a href="http://blog.devtang.com/blog/2012/02/22/use-gcd/" target="_blank" rel="external">GCD</a></li>
</ul>
<p>在拿到图片image对象后，怎么处理，是一个非常头疼的问题。LeanCloud的AVIMImageMessage类需要的是一个filePath而不是UIImage或者NSData对象，iOS应用是没有权限访问应用沙盒之外的东西的。首先想到的解决办法是把这个UIImage写入到应用内的Documents目录下的Photos目录，然后把这个地址发送给AVIMImageMessage对象。考虑到文件IO操作，还会对应用界面卡顿，所以把这个任务委托给了GCD去调度。</p>
<p>在使用dispatch_async之前，还需要处理一个问题，那就是UI展示的问题。大坑在这里，我们的UI是web的。所以对于图片，调用UIImageJPEGRepresentation去压缩体积，然后再转成base64，把这个base64发送给客户端。</p>
<p>为什么说这里是坑呢？因为它是一个IM系统，操作会非常的频繁，最关键的是展示是在web中，它的交互流程很坑。</p>
<p><strong>文件处理</strong></p>
<ul>
<li><a href="http://nshipster.cn/nsfilemanager/" target="_blank" rel="external">NSFileManager</a></li>
</ul>
<p>针对每一个用户都应该在应用沙盒内有它对应的一个缓存文件，它必须写入在Documents目录下，当人在获取之前，可以先判断一下，文件是否存在。</p>
<p><strong>使用ionic添加插件时的巨坑</strong></p>
<p>在升级了ionic为1.3.18之后，它的plugin编译时需要手动添加，据说这个版本他们去掉了自动添加的模块，于是写在配置文件中的插件，需要在platform add ios后，再ionic plugin add im手动添加到编译环境中，每一个都需要重复上述的动作，最后ionic build ios。</p>
<p>希望下一个版本，ionic能把这个补上吧。</p>
<p><strong>debug模式|重构IM|Date处理</strong></p>
<p>debug workflow 如果选择了汇编debug，进入的是直接查看内存地址的debug模式，这种模式某些情况下有用。本来使用web来写IM我们发现它的性能实在是不能忍受，于是用OC把它重构了。</p>
<p>使用NSDate来处理时间的时候，还需要NSDateFormatter来格式化，而且拿到的毫秒还需要除以1000，因为OC只处理秒单位。</p>
<p><strong>代码布局聊天界面的cell</strong></p>
<p>利用CGFloat mainScreenWidth = [UIScreen mainScreen].bounds.size.width来获取屏幕的宽度，然后计算自定义的cell，统计出来一个高度，在-(CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath 返回给TableView。</p>
<pre><code>-(<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath
{
    MissIMFrame *missIMFrame = [<span class="keyword">self</span><span class="variable">.modelManager</span><span class="variable">.dataSource</span> objectAtIndex:indexPath<span class="variable">.row</span>];
    <span class="keyword">return</span> missIMFrame<span class="variable">.cellHeight</span>;
}
</code></pre><p><strong>解析历史纪录</strong></p>
<p>第三方的leanCloud拉取的历史纪录全部是字符串，还要进一步的处理，转成JSON，这个地方主要是使用了NSJSONSerialization来处理，判断解析的错误，如果错误了，说明它是一个真正的文本，如果是正确的，那么说明它是一个可以转化为字典的字符串，然后再进一步处理。</p>
<p><strong>滚动上拉加载历史纪录</strong></p>
<p>实现scrollView的三个协议</p>
<pre><code>-(<span class="keyword">void</span>)scrollViewWillBeginDragging:(<span class="built_in">UIScrollView</span> *)scrollView
{
    <span class="comment">//手指触摸屏幕，准备滚动的那一刻</span>
    <span class="built_in">NSLog</span>(<span class="string">@"手指滑动开始－－－－－的那一瞬间"</span>);
    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,NSStringFromCGPoint(scrollView<span class="variable">.contentOffset</span>));
}

-(<span class="keyword">void</span>)scrollViewWillEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView withVelocity:(<span class="built_in">CGPoint</span>)velocity targetContentOffset:(<span class="keyword">inout</span> <span class="built_in">CGPoint</span> *)targetContentOffset
{
    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,NSStringFromCGPoint(scrollView<span class="variable">.contentOffset</span>));
}

-(<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate
{
    <span class="comment">//手指离开屏幕，放下的那一刻</span>
    <span class="built_in">NSLog</span>(<span class="string">@"刷动到顶部，放下的时候"</span>);
    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,NSStringFromCGPoint(scrollView<span class="variable">.contentOffset</span>));
    <span class="keyword">if</span> (scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span> &lt; <span class="number">0</span> &amp;&amp; <span class="keyword">self</span><span class="variable">.historyTimeId</span> &gt; <span class="number">0</span>) {
        <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.isScroll</span>) {
            <span class="keyword">self</span><span class="variable">.application</span><span class="variable">.networkActivityIndicatorVisible</span> = <span class="literal">YES</span>;
            [<span class="keyword">self</span><span class="variable">.mainUI</span><span class="variable">.MissIMActivity</span> startAnimating];
            <span class="keyword">self</span><span class="variable">.isScroll</span> = <span class="literal">NO</span>;
            [<span class="keyword">self</span> fetchHistoryMessage:<span class="keyword">self</span><span class="variable">.conversationId</span> timeId:<span class="keyword">self</span><span class="variable">.historyTimeId</span>];
        }
    }
}
</code></pre><p><strong>UIApplication</strong></p>
<p>在info.plist文件中设置Application dose not run is background 设置为YES，就可以在应用退出的时候进行存盘了</p>
<p><strong>Category添加自定义属性</strong></p>
<p>分类只能在运行时，利用它的机制，动态的添加属性，使用@dynamic关键字，和两个函数objc_setAssociatedObject，objc_getAssociatedObject。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>来到新公司做的第一个产品就是iOS客户端，我负责的是基于LeanCloud SDK开发的售后服务IM系统，也就是一个聊天的模块。第一次比较纯粹的在工作中，写Objective-c，遇到了一些坑，解决之后才发现原来是这么回事，而且还复习了它的基础语法知识。</p>
<p><s]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[陀螺]]></title>
    <link href="http://lcepy.github.io/2015/03/19/%E9%99%80%E8%9E%BA/"/>
    <id>http://lcepy.github.io/2015/03/19/陀螺/</id>
    <published>2015-03-19T08:25:26.000Z</published>
    <updated>2015-03-28T06:33:24.000Z</updated>
    <content type="html"><![CDATA[<p>最近在生活中遇到了很多挫折，一个无所事事的状态，其实非常的糟糕，为什么这么说，因为人一旦无所谓，就会无所畏惧，就会混乱。也许走入社会一直以来，都非常的顺利，没有经历这些挫折，根本无法了解这个社会的残酷。</p>
<p>最近一直喜欢听李健的歌，特别是这首《陀螺》，很真实的写照。人，应该要学会陀螺的心态，把一些负面的情绪，心态，全部转走。为什么？因为只有这样，才能调整好自己，用一个很轻松的状态去面对自己。陀螺，其实它一直在旋转，就好比，它会面对很多不断接触的东西，喜怒哀乐，而且一直停不下来。它要在沉默中转，在孤独中转，在欢笑中转，在泪水中转。</p>
<p>如果我能陀螺的心，那该多好，但我还是我，一个非常任性的人。喜欢了，特别的喜欢。不喜欢了，特别的不喜欢。这样的对错是非观念非常强烈的一个人，在社会中，摸爬滚打，是非常不利的。我的情绪都表现在脸上，无形中，或许得罪或者让别人感觉到难堪。但是，如果我有一个陀螺的心，我能很从容，荣辱不惊的面对这些，迟早要转过这一页，不是么？</p>
<p>李健不愧是一个用诗唱歌的人，这样的情绪，直透人心。是非曲折，道理谁都会明白，但是往往处理起来，却又很意想不到。时至今日，我该有一个陀螺的心了，不能再像以前那样，如此任性。虽然这些年里，欢笑，泪水相交织，度过了人生，很重要的一个时刻。从一个平平无奇的过路人，到了一个人爱编程，分享，写作的程序员，其实背后的付出，真的是，可以用‘心酸’二字。真正的摸爬滚打的真谛，我还未触及，因为这一路，有人帮助，有人提携，有人教授。于是，有了一次，比较真正的面对自我的过程。来到北京，去面试，去找工作。</p>
<p>人是一个非常复杂的情绪化的动物，人也是一个很有欲望的动物。但是，为什么说，欲望能促进进步呢？很可能，欲望会转化为动力，动力就能推动人自身的进步。我有欲望吗？其实是有的，但是这样的欲望，又有些不切实际。时间，就像是一把锁，已经把过去的锁住了。我们没法改变时间，也没法去打开这把锁。而我欲望，这看来，确实很傻逼。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在生活中遇到了很多挫折，一个无所事事的状态，其实非常的糟糕，为什么这么说，因为人一旦无所谓，就会无所畏惧，就会混乱。也许走入社会一直以来，都非常的顺利，没有经历这些挫折，根本无法了解这个社会的残酷。</p>
<p>最近一直喜欢听李健的歌，特别是这首《陀螺》，很真实的写照]]>
    </summary>
    
      <category term="生活" scheme="http://lcepy.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Native与H5交互的原理]]></title>
    <link href="http://lcepy.github.io/2015/03/14/Native%E4%B8%8EH5%E4%BA%A4%E4%BA%92%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://lcepy.github.io/2015/03/14/Native与H5交互的原理/</id>
    <published>2015-03-14T04:14:50.000Z</published>
    <updated>2015-03-20T12:05:46.000Z</updated>
    <content type="html"><![CDATA[<p>在做混合应用时，H5与Native通信的重要性，我想每一个H5开发者都非常的清楚。通过它，我们可以很好的借用Native API的优势来实现自己想做的事情，业界有一个非常成熟的框架让大家选择，它就是PhoneGap。混合开发，并不是意味着什么App都可以做，它也有局限性。在写交互原理之前，我想先写写自己的体会。</p>
<ul>
<li>混合开发使用的语言是JavaScript由于系统分配的资源始终有限，在UIWebView这个容器中运行，效率跟原生的差距是非常明显的</li>
<li>应用需要解决首次加载白屏的问题，因为资源加载的速度始终有些慢</li>
<li>这玩意调试起来很痛苦，不像在web端有chrome的开发者工具，iOS有Xcode</li>
<li>iOS和android交互始终不一样，但是混合应用提供了一个统一的UI，目前不清楚用户是否能习惯交互</li>
<li>关于通信JavaScript到Native是一个异步的过程，而Native到JavaScript是一个同步的过程</li>
</ul>
<p>那么使用混合应用在什么场景下比较有优势呢？</p>
<ul>
<li>内容驱动型的应用</li>
<li>经常需要调整UI的应用</li>
<li>经常需要调整业务的应用</li>
<li>交互不复杂并且不需要大量计算的应用</li>
</ul>
<p>总结起来，比如携程的App，因为都是内容驱动，比如购买门票，旅游之类的，又比如淘宝的App，大量商品类的展示，以及一些如图书，查询，工具类的应用，混合开发在这些场景下，有很明显的优势。</p>
<p>言归正传，因为iOS并没有提供原生的调用API，所以当JavaScript跟Native进行通信时，就需要利用一些技巧了。UIWebView这个容器，除了可以加载请求之外，也可以加载本地资源，如果当一个页面发起请求时，是要经过UIWebView的，于是有人会想，我能知道这个URL么？不错，UIWebView可以拦截这个request，并且知道它的全部。那么UIWebView可以通知页面不，这个依然可以。利用这些原理技巧，于是两端通信的问题就解决了。</p>
<p>在UIWebView中实现UIWebViewDelegate协议，就可以拦截到页面端发送的request。</p>
<pre><code>-(<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(UIWebViewNavigationType)navigationType
{
    <span class="built_in">NSURL</span> *url = [request URL];
    <span class="keyword">if</span> ([[url scheme] isEqualToString:<span class="string">@"test"</span>]) {
        [_webView stringByEvaluatingJavaScriptFromString:<span class="string">@"window.iOSPhoneName = 'iam lcepy'"</span>];
        <span class="keyword">return</span> <span class="literal">NO</span>;
    }
    <span class="keyword">return</span> <span class="literal">YES</span>;
}
</code></pre><p>返回YES表示执行浏览器的默认执行，返回NO表示不执行浏览器的默认执行</p>
<p>而从Native到JavaScript可以利用上stringByEvaluatingJavaScriptFromString方法，执行Js字符串，它就能在UIWebView中执行这一段Js代码。在客户端，我们知道全局的对象是window，如果在客户端需要获取结果，可以把Native执行的结果放到window上。</p>
<p>那么Js这一端如何实现呢？不错，利用的就是隐藏的iframe。</p>
<pre><code><span class="keyword">var</span> requ = $(<span class="string">'#requestToNative'</span>);
requ.bind(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);
    iframe.style.display = <span class="string">'none'</span>;
    iframe.src = <span class="string">'test://iOS/userInfo'</span>;
    <span class="keyword">var</span> requs = requ[<span class="number">0</span>];
    requs.appendChild(iframe);
    iframe = <span class="literal">null</span>;
    alert(<span class="built_in">window</span>.iOSPhoneName);
});
</code></pre><p>发送这个request让Native进行拦截，协议名可以随便取，当然这个名字要取的有意义。</p>
<p><a href="https://github.com/lcepy/geekObjective-C/tree/master/WebViewNativeToJavaScript" target="_blank" rel="external">例子查看</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在做混合应用时，H5与Native通信的重要性，我想每一个H5开发者都非常的清楚。通过它，我们可以很好的借用Native API的优势来实现自己想做的事情，业界有一个非常成熟的框架让大家选择，它就是PhoneGap。混合开发，并不是意味着什么App都可以做，它也有局限性。在]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年面试之囧途]]></title>
    <link href="http://lcepy.github.io/2015/03/13/2015%E5%B9%B4%E9%9D%A2%E8%AF%95%E4%B9%8B%E5%9B%A7%E9%80%94/"/>
    <id>http://lcepy.github.io/2015/03/13/2015年面试之囧途/</id>
    <published>2015-03-13T11:07:52.000Z</published>
    <updated>2015-03-28T06:41:31.000Z</updated>
    <content type="html"><![CDATA[<p>至去年从携程离职之后，就开启了一次新的面试囧途，面试这东西，主要可以了解自己所处的水平，写写它是想告诉自己一些事情，有事，人应该要了解和想清楚自己到底需要什么，到底适合什么样的工作，而不是为了生活，为了好的公司，为了高的薪水去妥协，在与兴趣之间平衡的坍塌，会造成很严重的后果，诱惑，是每一个人都会遇到的，如何面对这些诱惑，而明确自己所想，才是最重要的。</p>
<p>2015年面试了大概有七家公司，为什么会出现这样的状况，是我今天想要反思的主要目的。在去面试极客学院时，包括电话几轮的沟通，双方都非常满意，给出了17K的offer。其实这，是一个很心动的数字，毕竟比上一份work多出了3K。有时候，选择，往往很意外。</p>
<p>我是一个非常直接的人，我很忍受不了忽悠和欺骗。明明在面试时，就已经沟通过，我能做什么，以及我根本不考虑做什么，为什么入职之后往往的工作就要偏离呢？这个问题，其实我一直很思考不明白，最后的结局是我只能离职走人，浪费了时间，精力，当然还有金钱。</p>
<p>下面要写的事情，都非常琐碎，两周的时间内发生的事情。在过年之前，我来到北京，寻找机会，老乡给我推荐了聚美优品，面试时的一些沟通，包括自己的情况，想法，以及能做的事情，都很明白的说了。从1月4号面试到了1月14号，经历了四轮，然后就没有消息了。</p>
<p>大家都明白没有消息意味着什么，抱着挂了的心态，1月20号回到湖南。在和淳敏沟通了之后，我答应了在27号之前，去上海他那边工作。过完年后买了高铁票，去了上海，可是下午北京聚美优品又通知我，审批过了，如果我来北京，立马就发聚美的offer。其实，这里我就犯了一个很严重的错误，<strong>没有能抵制住诱惑</strong>。当天，我纠结郁闷了很久，淳敏也和我说了很多，包括聚美的工作气氛，研发团队，以及未来可以学习的东西到底有多少。也许当时我被这样的惊喜冲昏了头脑，一发热，连夜买了去北京的火车票，当我坐上火车时，我又接到了通知，还需要在继续面试。</p>
<p>当时在心里，真是一万只草泥马奔腾而过，这不是逗我玩么？如果，能让时光倒流，告诉我是来北京面试的话，我想大家应该都可以知道，自己会选择什么。用一句现在的话说，会来的是<strong>傻逼</strong>，于是我傻逼了。可是，时间没法回滚，发生了就要自己面对这些。其实当时的心里状态是很后悔的，后悔没听淳敏的话，后悔跑来北京。如果这边的工作黄了，接下来怎么办。自己没有任何想法，那只能继续面试，继续找工作了。</p>
<p>3月2日上午去了JD，我只能说我的简历写的很清楚。如果你需要正规军，就不应该来找我。JD的男HR真的是屌的一逼。下午去了一家创业公司，我大呼伤不起，各种奇葩要求。比如你能不能做服务，对不起，我不能。那你能不能写移动客户端，对不起，我不能。我简历写的是，移动前端好吧？未必，汉字这么难理解？那一天，我对后面的面试安排，已经不抱任何想去的态度了，但是朋友推荐的，还是去了。</p>
<p>3月3日下午的时候接到了聚美HR的电话，通知我她们人事搞错对象了，把别人的结果拿去审批了，而我是不需要面试了，在跟我确定了一下薪水之后，语重的告诉我，不过还是需要审批。如果老板审批不通过，她也没有办法，只能和我说声对不起。当时，我心里只是呵呵的，反正是有了不信任感。</p>
<p>3月4日去联想研究院面试，结果很理想，包括聊了很多关于移动H5的一些开发心得，中午面试的大哥还请我吃了一顿午饭，反正是心情很愉悦，唯一可惜的是联想研究院的HC计划需要等待到3月底，当时面试大哥的领导就询问我，是否愿意等待，告诉我如果公司的HC一开，优先联系我，只要我愿意。</p>
<p>吃过午饭的时候接到了聚美HR的电话，告诉我审批通过了，让我耐性等待offer。下午时聚美的offer发到了我的邮箱里，通知我3月10号入职。但是我没注意查收邮箱，其实，这也很狗血，我在想着，唉，工作哪里不是做，只要自己踏踏实实，本本份份的做好工作，管他呢。</p>
<p>3月5日去每日优鲜面试，本来经历了2号奇葩的面试之后，后面的一些网投的面试邀请，我都不打算去了。那天，接到个超美小姑娘的电话，而且还是个性感HR负责人，啧啧，来吧来吧，过来聊一聊。抱着想调戏调戏HR妹纸的心态，下午4点半搭地铁去望京那边，最后愣没找到地方。我在想，反正也就是聊会天，心中不快跟陌生人吐一吐，也许能减轻心理的压抑感。去了之后，跟技术，跟其他人聊的还挺愉快。反正HR的美色，没有让我失望，我在感谢老天，终于遇上了一家正常的公司。</p>
<p>第二天上午又跑去了每日优鲜，跟她们的CEO大哥聊聊，挺对味的。只是我还答应了朋友要去面试，所以没有急着答应他。当天下午还去百度面试了，上来做了三个题目，解析URL，实现深浅拷贝，对数字字符串进行以每四个一组的分隔。只是后面问到的一些问题，比如盒子模型，我知道它是由高宽内边距外边距线组成的，可是它在浏览器中的渲染顺序，我是真心不知道，这些问题有些变态了。后来，我朋友帮我去问，他告诉我百度对毕业证有要求，必须要统招，虽然面试了一个下午，但是没有然后了。于是，我能想到是什么。</p>
<p>最后我还是没有能抵制住”好公司”的诱惑，选择了去聚美优品，本来我朋友说，你别去聚美，你看看你面试的那个经历，太不靠谱了，让人感觉就像是把你吊着，他们一直在找人，只不过没找到合适的，最后才选择你。至于，是不是这样，我不清楚，但是从面试到发offer，确实让我有不信任的感受。</p>
<p>说起来，人嘛，都有头脑发热的时候，也很难抵制的了诱惑。没有办法，选择去了，那只能继续往前走，不然还能怎么办？入职聚美之后，第二天Leader告诉我还需要签署一份补充的协议，虽然我去签了，但是我发现一同来的那几个人都没签补充协议，就我一个人签了，为什么？这是有甄别的对待么？如果试用期的一些考核，不通过，立马开掉，那就呵呵了。我朋友说，我真蠢，这种开人协议也签，我也只能呵呵了。而我的试用期两项任务，都是切图，写CSS和静态页面。</p>
<p>确实，在我提交离职申请的时候，Leader跟我说，我是第一个签了这种补充协议的人。本来工作，就应当是有一个安心的氛围，我是没法安心。这对我来说有风险的，任何一个平常的人，都会这么想。如果一切都是看表现，安排一个没有切过图，没写过CSS的人去做这些事情，这可以看出他的表现吗？我想不能。而且，最重要的是，在和Leader沟通毕业证的时候，他要我自己去和HR协商，这让我更加的产生了危机感。如果6月不能顺利转正，是否意味着我还要接着找工作，然后又是三个月的试用期，到那个时候就已经10月，11月了，这一年又废了。这样的情况，如何能让人安心工作，我想，任何一个人都不能。</p>
<p>今天我办了离职手续，跟聚美负责技术的总监，Leader最后沟通了一下。也许在你们看来，这是一个很不负责的表现。如果换位思考一下，从面试到发offer，入职到第一个签到这种补充协议，如何能让感觉到是被信任的，是能安心工作的。其实很反感Leader最后说的一句话，有些威胁的味道，至于他想表述的本意是不是这样，我不清楚，但是让我感觉到威胁的味道是实在的。他说：<strong>互联网圈子这么小，基本上每个公司的技术人员我都认识。你能来聚美，我找携程的同事打听过你的事情，正因为你比较实在，所以才招你来。就你这样的，如果有人问起来，你觉得我该怎么说？只怕会影响你今后的发展。</strong></p>
<p>在坐地铁回来的路上，我自己又想了很多。一开始，从上海跑来北京，就是一个错误的选择。我没有听淳敏的建议，一腔热血的往前冲，后来我发现我冲到坑里了。这样的原因是什么？</p>
<ul>
<li>没有了解好自己真正的需求，擅长什么，对什么有兴趣</li>
<li>没有想好自己可以真正发展的城市，北京上海来回跑，什么意义都没有</li>
<li>内心不够强大，不能抵挡诱惑，比如有名的公司，较高的薪水</li>
<li>没有坚定自己发展的方向，PC移动都有前端，我没选择好方向</li>
<li>没有想好自己是否可以独自上路</li>
<li>没有选择好正确的公司</li>
</ul>
<p>以后我该怎么办？经历了这些之后，我才明白了一个道理，在做一项决定的时候，一定要考虑清楚了自己是否合适，这是不是我想要的。挫折，每个人都要面对，唯一不同的是，我如何从挫折中吸取教训，总结教训，未来能正确的行在路上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>至去年从携程离职之后，就开启了一次新的面试囧途，面试这东西，主要可以了解自己所处的水平，写写它是想告诉自己一些事情，有事，人应该要了解和想清楚自己到底需要什么，到底适合什么样的工作，而不是为了生活，为了好的公司，为了高的薪水去妥协，在与兴趣之间平衡的坍塌，会造成很严重的后果]]>
    </summary>
    
      <category term="生活" scheme="http://lcepy.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS多线程GCD的使用]]></title>
    <link href="http://lcepy.github.io/2015/03/07/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8BGCD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://lcepy.github.io/2015/03/07/iOS多线程GCD的使用/</id>
    <published>2015-03-07T09:07:36.000Z</published>
    <updated>2015-03-08T04:43:57.000Z</updated>
    <content type="html"><![CDATA[<p>在做iOS开发的时候线程的使用场景还是蛮多的，比如网络请求，比如大的数据处理等等。因为iOS只有一个主线程，而且这个主线程是让UIKit来使用的，如果我们不想让UI界面因为某些操作而出现卡顿，那么就必须把一些需要时间等待的操作，分配给其他的线程去处理，并且保证主线程不让UIKit之外的程序来使用。</p>
<p>在UIKit中某些对象是可以在其他线程中正常工作的，比如UIImage，UIColor等。但是UIKit的大部分只能在主线程中正常工作的，明白这一点非常的重要。</p>
<p>iOS中实现多任务编程，主要使用三种方式，1、NSThread 2、NSOperation 3、GCD；个人感觉GCD比较好使用，它主要是与block来配合使用的。比如在网络活动时，我想在<a href="http://wow.163.com" target="_blank" rel="external">http://wow.163.com</a>下载一张图片显示在UIImageView，但是下载的过程，如果不使用其他线程来下载图片数据，UI界面就会出现卡顿的感觉，用户体验非常不好。</p>
<p>GCD主要可以使用的函数有几个：</p>
<ul>
<li>dispatch_queue_create(“name”,NULL) </li>
<li>dispatch_async(dispatch_queue_t queue,^{})</li>
<li>dispatch_get_main_queue</li>
<li>dispatch_sync</li>
<li>dispatch_get_global_queue</li>
</ul>
<p>dispatch_get_main_queue顾名思义，运行在主线程的Main queue，可以通过dispatch_get_main_queue获取。</p>
<p>dispatch_async用于异步操作</p>
<p>dispatch_sync用于同步操作</p>
<p>dispatch_queue_create一般用来创建串行queue，而且只可能创建一个线程，顺序执行</p>
<p>dispatch_get_global_queue 添加到主queue的可能会并行执行，也就意味着创建了多个线程</p>
<p>回到例子上来说，如果我有两个界面，从其中一个界面点击一个按钮到另外一个界面中显示一张图片，而这个图片需要在网络上下载。如果这里不使用多线程，在视觉上得到的反馈，就有可能在第一个界面中出现卡顿，因为网络下载把主线程阻塞了。</p>
<p>例子：</p>
<pre><code>    <span class="comment">//创建一个请求</span>
    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:<span class="keyword">self</span><span class="variable">.imageURL</span>];
    NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration ephemeralSessionConfiguration];
    NSURLSession *session = [NSURLSession sessionWithConfiguration:configuration];
    NSURLSessionDownloadTask *task = [session downloadTaskWithRequest:request completionHandler:^(<span class="built_in">NSURL</span> *location, NSURLResponse *response, <span class="built_in">NSError</span> *error) {
        <span class="keyword">if</span> (!error) {
            <span class="keyword">if</span> ([request<span class="variable">.URL</span> isEqual:<span class="keyword">self</span><span class="variable">.imageURL</span>]) {
                <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:[NSData dataWithContentsOfURL:location]];
                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^{
                    <span class="keyword">self</span><span class="variable">.image</span> = image;
                });
            }
        }
    }];
    [task resume];    
</code></pre><p>在这个例子中主要是利用了NSURLSession临时会话，NSURLSessionDownloadTask任务，NSURLSessionConfiguration配置与dispatch_async相结合的方式来处理的多线程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在做iOS开发的时候线程的使用场景还是蛮多的，比如网络请求，比如大的数据处理等等。因为iOS只有一个主线程，而且这个主线程是让UIKit来使用的，如果我们不想让UI界面因为某些操作而出现卡顿，那么就必须把一些需要时间等待的操作，分配给其他的线程去处理，并且保证主线程不让UI]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS自动布局的理解]]></title>
    <link href="http://lcepy.github.io/2015/03/07/iOS%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://lcepy.github.io/2015/03/07/iOS自动布局的理解/</id>
    <published>2015-03-07T03:47:44.000Z</published>
    <updated>2015-03-20T11:55:23.000Z</updated>
    <content type="html"><![CDATA[<p>一般情况下iOS的自动布局可以在Xcode中利用图形化的工具来操作完成，当然也可以使用代码的方式来完成，这些工作主要是对视图定义一些规则和约束，在容器变化的时候，视图可以遵守这些约束。</p>
<p>实现约束的三种方式：</p>
<ul>
<li>比如拖动一个Label在storyboard中，会出现蓝色的辅助线，放定好位置时，在下方的小按钮中点击Reset to Suggested Constraints，系统会帮助我们选择最佳的自动布局方式</li>
<li>拖动一个Label到storyboard中，依然是点击下方小按钮，有add，手动添加。</li>
<li>拖动一个Label到storyboard中按住control键，拖动到想放的位置上，这里有一个前提，是有一个参照视图，放开的时候会弹出一个小框来让你选择约束</li>
</ul>
<p>比如要查看效果，可以右边的属性栏中选择Orientation中的Landscape，就变成了横屏。如果想删除约束，可以在左侧的文档大纲中进行删除，假设一个视图没有约束，也可以在文档大纲中来add约束。</p>
<p>如果想要查看一个约束，可以在Show the size inspector中查看constraints。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一般情况下iOS的自动布局可以在Xcode中利用图形化的工具来操作完成，当然也可以使用代码的方式来完成，这些工作主要是对视图定义一些规则和约束，在容器变化的时候，视图可以遵守这些约束。</p>
<p>实现约束的三种方式：</p>
<ul>
<li>比如拖动一个Label在s]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript解析URL字符串]]></title>
    <link href="http://lcepy.github.io/2015/03/06/JavaScript%E8%A7%A3%E6%9E%90URL%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://lcepy.github.io/2015/03/06/JavaScript解析URL字符串/</id>
    <published>2015-03-06T06:38:32.000Z</published>
    <updated>2015-03-06T06:56:33.000Z</updated>
    <content type="html"><![CDATA[<p>说到解析URL思路应该有多种多样的，比如一点一点的分解，先indexOf(‘?’)判断是否有参数，完了之后split(‘?’)一下，后面的参数继续split(‘&amp;’)成一个数组然后循环再split(‘=’)组装成一个一个key和vaule的键值对对象。前面那一部分也可以继续分解，把端口，协议，路径等等分解出来。或者用正则表达式，一个一个的分解。除了上述的思路，其实还有一个更简单的办法，利用a标签。</p>
<pre><code><span class="keyword">var</span> parseURL = function(url){
    <span class="keyword">var</span> temp =  document.createElement('a');
    temp.href = url;
    <span class="keyword">var</span> <span class="literal">result</span> = {
        <span class="string">"port"</span>:temp.port,
        <span class="string">"protocol"</span>:temp.protocol.replace(':',''),
        <span class="string">"hash"</span>:temp.hash.replace('<span class="comment">#',''),</span>
        <span class="string">"host"</span>:temp.host,
        <span class="string">"href"</span>:temp.href,
        <span class="string">"hostname"</span>:temp.hostname,
        <span class="string">"pathname"</span>:temp.pathname,
        <span class="string">"search"</span>:temp.search,
        <span class="string">"query"</span>:{}
    }
    <span class="keyword">var</span> seg = <span class="literal">result</span>.search.replace(/^\?/,'').split('&amp;'),
        leng = seg.length,
        i = <span class="number">0</span>,
        target;
    <span class="keyword">for</span>(;i&lt;leng;i++){
        <span class="keyword">if</span>(!seg[i])<span class="keyword">continue</span>;
        target = seg[i].split('=');
        <span class="literal">result</span>.query[target[<span class="number">0</span>]] = target[<span class="number">1</span>];
    }
    temp = null;
    <span class="keyword">return</span> <span class="literal">result</span>;
}
<span class="keyword">var</span> url = 'https://github.com:<span class="number">8989</span>?key=value&amp;hub=<span class="number">123</span>ASFDGGR<span class="comment">#github';</span>
parseURL(url);
</code></pre><p>最后使用完了，把对象的引用设置为null，等待内存回收。</p>
<p>说到URL就不得不提一下编码和解码的函数，Js里提供了三组，其中最常用的一组是encodeURIComponent和decodeURIComponent。</p>
<p>通过对三个函数的分析，我们可以知道：escape()除了 ASCII 字母、数字和特定的符号外，对传进来的字符串全部进行转义编码，因此如果想对URL编码，最好不要使用此方法。而encodeURI() 用于编码整个URI,因为URI中的合法字符都不会被编码转换。encodeURIComponent方法在编码单个URIComponent（指请求参数）应当是最常用的，它可以讲参数中的中文、特殊字符进行转义，而不会影响整个URL。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>说到解析URL思路应该有多种多样的，比如一点一点的分解，先indexOf(‘?’)判断是否有参数，完了之后split(‘?’)一下，后面的参数继续split(‘&amp;’)成一个数组然后循环再split(‘=’)组装成一个一个key和vaule的键值对对象。前面那一部分也]]>
    </summary>
    
      <category term="JavaScript" scheme="http://lcepy.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript中的深拷贝与浅拷贝]]></title>
    <link href="http://lcepy.github.io/2015/03/04/JavaScript%E4%B8%AD%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://lcepy.github.io/2015/03/04/JavaScript中的深拷贝与浅拷贝/</id>
    <published>2015-03-04T12:56:49.000Z</published>
    <updated>2015-03-05T03:27:31.000Z</updated>
    <content type="html"><![CDATA[<p>关于拷贝的问题，主要分为深拷贝和浅拷贝，但是如果从空间分配上来说JavaScript的拷贝不应该算是深拷贝，比如：</p>
<pre><code><span class="keyword">var</span> d = {};
<span class="keyword">for</span>(k <span class="keyword">in</span> a){
    d[k] = a[k];
}
<span class="keyword">return</span> d;
</code></pre><p>今天突然想到了这么一个问题，在C语言中，所谓的拷贝，就是分两种情况，一种是把指针地址拷贝给另外一个变量，虽然也开辟的了一个内存空间，在栈上也存在着一个地址，我对这个变量进行修改，同一个指针是会改变其值的，这种拷贝叫浅拷贝。另外一种情况，直接开辟一个新空间，把需要复制的值都复制在这个新的空间中，这种拷贝叫中深拷贝。</p>
<p>如果看到上述的一段Js代码，很多人说它是浅拷贝，假设传入一个a对象，拷贝完成之后返回一个d，当我修改返回对象的值时并不能同时修改a对象，于是，在这里我有一个很大的疑问，在Js中到底什么是浅拷贝，什么是深拷贝的问题？</p>
<p>这一点上感觉Js真的很奇葩，如果在开发iOS中，不可变对象copy一下，依然是不可变，所以是浅拷贝，拷贝了指针变量中存储的地址值。如果是可变对象copy一下，到不可变，空间变化了，包括不可变mutableCopy到不可变，空间依然变化了，所以是深拷贝。但是JavaScript中对于这一点要考虑一种情况，值类型，和引用类型，这个基础知识，我相信大家都非常清楚。数字，字符串等都是值类型，object，array等都是引用类型。</p>
<pre><code><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];
<span class="keyword">var</span> b = a;

b.push(<span class="number">4</span>);
<span class="built_in">console</span>.log(a); <span class="comment">//[1,2,3,4]</span>

<span class="keyword">var</span> numb = <span class="number">123</span>;
<span class="keyword">var</span> _numb = numb;
_numb = <span class="number">567</span>;

<span class="built_in">console</span>.log(numb); <span class="comment">//123</span>
</code></pre><p>从这个例子中可以看的出来，它们使用的都是＝符号，而数组a发生了变化，numb数字却没有发生变化。那么从这里，可以有一个总结，所谓了深拷贝，浅拷贝的问题，应该针对的是有多个嵌套发生的情况。不然假设是这样的情况，还能叫浅拷贝么？</p>
<pre><code><span class="keyword">var</span> <span class="class"><span class="keyword">object</span> = </span>{<span class="string">"de"</span>:<span class="number">123</span>};
<span class="keyword">var</span> o = copy(<span class="keyword">object</span>);

o.de = <span class="number">456</span>;

console.log(<span class="keyword">object</span>) <span class="comment">//{"de":123}</span>
</code></pre><p>明显对象o中的de属性修改并没有影响到原始对象，一个对象中的属性是一个字符串，如果从内存空间的角度上来说，这里明显是开辟了新的空间，还能说是浅拷贝么？那么针对另外一种情况。</p>
<pre><code><span class="keyword">var</span> <span class="class"><span class="keyword">object</span> = </span>{
    <span class="string">"de"</span>:{
        <span class="string">"d"</span>:<span class="number">123</span>
    }
}

<span class="keyword">var</span> o = deepCopy(<span class="keyword">object</span>);
o.de.d = <span class="string">"asd"</span>;
</code></pre><p>如果一个对象中的第一层属性，不是值类型，只单层循环，这样来看的话确实是一个浅拷贝，因为在Js中引用类型用＝赋值，实际上是引用，这样说的通。所以，深拷贝，还需要做一些处理，把object，array等引用类型识别出来，深层递归到最后一层，一个一个的拷贝。</p>
<pre><code><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span><span class="params">(o)</span></span>{
    <span class="keyword">var</span> target = {};
    <span class="keyword">if</span>(<span class="keyword">typeof</span> o !== <span class="string">'object'</span> &amp;&amp; !<span class="built_in">Array</span>.isArray(o)){
        <span class="keyword">return</span> o;
    }
    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o){
        target[k] = deepCopy(o[k]);
    }
    <span class="keyword">return</span> target;
}
</code></pre><p>思路是如此，这个例子只考虑了两种情况，对象和数组，为了验证这样的思路，最后的结果与预期是一样的。</p>
<pre><code><span class="keyword">var</span> _copy = {
    <span class="string">'object'</span>:{
        <span class="string">'name'</span>:<span class="string">'wen'</span>
    },
    <span class="string">'array'</span>:[<span class="number">1</span>,<span class="number">2</span>]

}
<span class="keyword">var</span> h = deepCopy(_copy);
h.object.name = <span class="string">'lcepy'</span>;
h.array[<span class="number">1</span>] = <span class="number">8</span>;
<span class="built_in">console</span>.log(h);
<span class="built_in">console</span>.log(_copy);
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>关于拷贝的问题，主要分为深拷贝和浅拷贝，但是如果从空间分配上来说JavaScript的拷贝不应该算是深拷贝，比如：</p>
<pre><code><span class="keyword">var</span> d = {};
<span class="keyword">f]]>
    </summary>
    
      <category term="JavaScript" scheme="http://lcepy.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
