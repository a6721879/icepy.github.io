<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[lcepy]]></title>
  <subtitle><![CDATA[曾记否，到中流击水，浪遏飞舟!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lcepy.github.io/"/>
  <updated>2015-02-08T11:27:35.018Z</updated>
  <id>http://lcepy.github.io/</id>
  
  <author>
    <name><![CDATA[lcepy]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[理解UITableView]]></title>
    <link href="http://lcepy.github.io/2015/02/06/%E7%90%86%E8%A7%A3UITableView/"/>
    <id>http://lcepy.github.io/2015/02/06/理解UITableView/</id>
    <published>2015-02-06T13:06:07.000Z</published>
    <updated>2015-02-08T11:27:19.000Z</updated>
    <content type="html"><![CDATA[<p>UITableView是在iOS开发中使用非常频繁的一个控件，比如QQ的消息人列表，淘宝的商品，微信等等都会使用到它，对于它的理解有一个前提，那就是要理解iOS MVC的设计思路。</p>
<p>创建一个UITableView可以使用代码的方式，也可以使用xib或者storyboard。</p>
<pre><code><span class="built_in">UITableView</span> *tableView = [[<span class="built_in">UITableView</span> alloc] initWithFrame:[[UIScreen mainScreen] applicationFrame]];
</code></pre><p>在MVC的设计思想中控制器控制着要从模型中拿数据，然后把数据装载给视图。在UITableView中模型主要是实现在UITableViewDataSource数据源中，也就是UITableView有几行，分组么，然后每一行装载什么？数据源的目的就是想问开发者这些问题。</p>
<pre><code><span class="pp">-<span class="params">(<span class="variable">NSInteger</span>)</span>numberOfSectionsInTableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView
{

}</span>
</code></pre><p>这个方法如果存在有分组，系统就会询问，有几个分组？如果不是分组的，可以不实现这个方法，系统默认是1。</p>
<p>有了分组之后，然后系统会询问会有几行？</p>
<pre><code><span class="pp">-<span class="params">(<span class="variable">NSInteger</span>)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView numberOfRowsInSection:<span class="params">(<span class="variable">NSInteger</span>)</span>section
{

}</span>
</code></pre><p>section跟分组有关</p>
<p>最后系统询问，每一行实现什么？</p>
<pre><code><span class="pp">-<span class="params">(<span class="variable">UITableViewCell</span> *)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView cellForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath
{

}</span>
</code></pre><p>这个方法的实现可以说是核心的核心，在UITableView中每一行是要求实现一个cell，可以想象每一个cell相当于就是一个容器，这个容器里面装载着很多其他UI对象，当然cell也可以自定义。</p>
<p>考虑到性能，其实每一个cell可以从缓存中读取</p>
<pre><code><span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@"cell"</span>];
<span class="keyword">if</span> (!cell) {
    cell = [[<span class="built_in">UITableViewCell</span> alloc] initWithStyle:UITableViewStylePlain reuseIdentifier:<span class="string">@"cell"</span>];
}

<span class="comment">//do</span>
</code></pre><p>indexPath是一个类，看看头文件就可以明白，它这个里面装载着row，section等，这些数值非常有意义，在从模型里获取数据的时候。数据源还有一些其他的方法可以实现，比如编辑模式，这个东西一般用于删除每一条消息，从右向左滑动的时候。</p>
<pre><code><span class="pp">-<span class="params">(void)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView commitEditingStyle:<span class="params">(<span class="variable">UITableViewCellEditingStyle</span>)</span>editingStyle forRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath
{

}</span>
</code></pre><p>排序</p>
<pre><code><span class="pp">-<span class="params">(void)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView moveRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>sourceIndexPath toIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>destinationIndexPath
{

}</span>
</code></pre><p>有了数据源，当然也会存在一些代理，这些代理就是一些动作，比如实现了某些代理方法之后，系统会询问，你点了？一个手指按下不动了？等等，然后再doing什么，就是写在这些代理的方法中，主要是实现UITableViewDelegate。</p>
<p>常用的比如按下的时候，放开的时候：</p>
<p>点击了每一行时做的动作</p>
<pre><code><span class="pp">-<span class="params">(void)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView didSelectRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath
{

}</span>
</code></pre><p>放开每一行时做的动作</p>
<pre><code><span class="pp">-<span class="params">(void)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView didDeselectRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath
{

}</span>
</code></pre><p>协议中有很多在某些情况下会非常有用，细节就要慢慢在学习中积累了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>UITableView是在iOS开发中使用非常频繁的一个控件，比如QQ的消息人列表，淘宝的商品，微信等等都会使用到它，对于它的理解有一个前提，那就是要理解iOS MVC的设计思路。</p>
<p>创建一个UITableView可以使用代码的方式，也可以使用xib或者stor]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript十二之理解作用域]]></title>
    <link href="http://lcepy.github.io/2015/02/05/%E5%A4%8D%E4%B9%A0JavaScript%E5%8D%81%E4%BA%8C%E4%B9%8B%E7%90%86%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://lcepy.github.io/2015/02/05/复习JavaScript十二之理解作用域/</id>
    <published>2015-02-05T10:17:09.000Z</published>
    <updated>2015-02-05T13:19:53.000Z</updated>
    <content type="html"><![CDATA[<p>理解作用域链是Js编程中一个必须要具备的，作用域决定了变量和函数有权力访问哪些数据。在Web浏览器中，全局执行环境是window对象，这也意味着所有的全局变量或者方法都是window对象的属性或方法。当个函数在被调用的时候都会创建自己的执行环境，而这个函数中所写的代码就开始进入这个函数的执行环境，于是由变量对象构建起了一个作用域链。</p>
<pre><code><span class="keyword">var</span> wow = <span class="string">'魔兽世界'</span>;
<span class="keyword">var</span> message = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> _wow = <span class="string">'123'</span>;
}
</code></pre><p>在这个例子中全局环境中包含了两个对象（全局环境的变量对象不算），window.wow和window.message，而这个message函数中又包含了两个对象，它自己的变量对象（其中定义了arguments对象）和全局环境的变量对象。当这个函数开始执行时，message自己的变量对象中定义了_wow，而它的全局环境的变量对象有wow，假设在message中alert一下wow，实际上是message中包含的全局环境的变量对象.wow，于是可以访问。</p>
<pre><code><span class="keyword">var</span> wow = <span class="string">'123'</span>;
<span class="keyword">var</span> message = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> wow = <span class="string">'456'</span>;
}
</code></pre><p>如果执行message函数alert一下wow，它的作用域是这样开始搜索的，先搜索message自己的变量对象中是否存在wow，如果有就访问并且立马停止搜索，如果没有则继续往上访问它，有wow，则访问并且立马停止搜索，以此类推一直搜索到全局环境上的变量对象，如果这里都没，恭喜你，这里要抛错了。</p>
<pre><code><span class="keyword">var</span> c = <span class="string">'123'</span>;
<span class="keyword">var</span> message = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> g = <span class="string">'123'</span>;
    <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="keyword">var</span> d = <span class="string">'123'</span>;
    }
}
</code></pre><p>在这个例子中包含有三个执行环境，全局环境，message的环境，a的环境。从这里可以看出message自身包含两个对象，自己的变量对象和全局环境中的变量对象，而函数a则包含了三个，自身的变量对象，message的变量对象和全局变量对象。</p>
<p>当开始执行这函数时，在函数a中可以访问到变量g，那是因为函数a包含了message的变量对象，于是在自身没有开始搜索上一级的变量对象时发现了，于是可以访问。那么访问c的原理也是如此，当自身和上一级的message的变量对象都没有，但是全局变量对象中存在，于是访问成功。</p>
<p>了解这个作用域，对于Js编程是至关重要的，不然可能会出现，明明想要的预期结果是123，但是变成了456，为什么？那就是因为一级一级的搜索，可能会存在覆盖，或者搜索到别的地方就立即停止搜索了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>理解作用域链是Js编程中一个必须要具备的，作用域决定了变量和函数有权力访问哪些数据。在Web浏览器中，全局执行环境是window对象，这也意味着所有的全局变量或者方法都是window对象的属性或方法。当个函数在被调用的时候都会创建自己的执行环境，而这个函数中所写的代码就开始]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS的copy语法]]></title>
    <link href="http://lcepy.github.io/2015/02/05/iOS%E7%9A%84copy%E8%AF%AD%E6%B3%95/"/>
    <id>http://lcepy.github.io/2015/02/05/iOS的copy语法/</id>
    <published>2015-02-05T10:01:43.000Z</published>
    <updated>2015-02-06T12:50:11.000Z</updated>
    <content type="html"><![CDATA[<p>这是一个关于深拷贝和浅拷贝的问题，OC设计这个语法的目的就是创建一个副本，修改副本的时候不会改变原来的对象。</p>
<blockquote>
<p>对于这两个问题可以这么理解，浅拷贝也就是把指针赋值，大家用的都是地址。而深拷贝，则是创建了一个新的空间，虽然内容可能是一样的，但是大家使用的空间，地址都是不同的。</p>
</blockquote>
<p>在OC中可以使用copy或者mutableCopy语法来实现深拷贝和浅拷贝，要求实现NSCopying或者NSMutableCopying协议。</p>
<p>copy和mutableCopy是有区别的，区别在于NSString和NSMutableString的区别，如果使用NSString调用copy创建出来的新对象那就是NSString，如果是使用NSString的mutableCopy创建出来的新对象那就是NSMutableString。前者是不可变的，后者是可变的，它的空间不是固定的。</p>
<pre><code>NSString *<span class="typename">string</span> = [[NSString alloc] initWithFormat:@<span class="string">"123"</span>,<span class="number">10</span>];

NSMutableString *str = [<span class="typename">string</span> mutableCopy];

[<span class="typename">string</span> <span class="keyword">release</span>];
[str <span class="keyword">release</span>];
</code></pre><p>遵守上面所说的创建一个副本，修改副本的时候不会改变原来的对象，其实这里可以看内存地址就可以看出来，它们是不同的。</p>
<pre><code><span class="attr_selector">[str appendString:@"123"]</span>;

<span class="function">NSlog</span>(<span class="at_rule">@<span class="string">"%@"</span>,string);</span>
<span class="function">NSlog</span>(<span class="at_rule">@<span class="string">"%@"</span>,str);</span>
</code></pre><p>从打印的结果可以很明显的看的出来，从内存的角度上来看，因为是新对象，所以它的引用计数是加1的，所以copy或者mutableCopy都需要release。</p>
<p>如果使用copy语法，因为有一个机制不可变的元素，所以OC就直接把原来的对象返回，并且引用计数加1，于是这就是浅拷贝了，而mutableCopy就是深拷贝了。</p>
<p>如果在OC中反过来又是什么样的情况呢？比如使用NSMutableString调用它的copy方法，会产生什么样的情况呢？</p>
<pre><code>NSMutableString *<span class="built_in">string</span> = [[NSMutableString alloc]stringWithForma<span class="variable">t:</span>@<span class="string">"123"</span>,<span class="number">10</span>];
NSString *str = [<span class="built_in">string</span> <span class="built_in">copy</span>];
</code></pre><p>如果从可变成不可变使用的copy却是一个深拷贝，产生一个新的对象，它的引用计数为1。如果可变的使用mutableCopy产生一个对象，它也是深拷贝，产生一个新对象，引用计数为1，所以都需要release。</p>
<blockquote>
<p>总结一下，只有一种情况是浅拷贝，不可变对象调用它的copy方法为浅拷贝，再原对象上计数加1.而其他的不管是调用copy还是mutableCopy都是深拷贝，产生一个新的对象，计数为1。</p>
</blockquote>
<h3 id="如何自定义的类提供copy或者mutableCopy">如何自定义的类提供copy或者mutableCopy</h3>
<p>如果要自己实现自定义对象的copy或者mutableCopy语法，首先要实现NSCopying或者NSMutableCopying协议，它们的原理都是一样的，按NSCopying来讲解一个例子。</p>
<pre><code>-(<span class="property">id</span>)copyWithZone:(NSZone *)zone
{
    Pser *<span class="keyword">copy</span> = [[[self <span class="type">class</span>] allocWithZone:zone] init];
    <span class="keyword">copy</span>.<span class="property">name</span> = _name;
<span class="command">    return</span> <span class="keyword">copy</span>;
}
</code></pre><p>主要是实现copyWithZone方法，系统会为copy分配一个空间，以存储创建出来的副本。它不要求在copyWithZone内部进行内存管理，因为外部还需要使用。一般来说，使用copy还需要注意一些问题，也就是父子的问题。假设父类有实现copyWithZone方法，一般来说在子类中需要覆盖一下，然后调用它的父类的copyWithZone。而且在需要使用self class来实例对象，谁使用self就是谁，这样才能说子类调用之后，接收的还是子类，而不是父类。</p>
<pre><code> <span class="title">[super copyWithZone:zone]</span><span class="comment">;</span>
</code></pre><p>然后再进一步的操作。</p>
<p>NSMutableCopying的操作步骤是一模一样的，注意的问题也是如同。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一个关于深拷贝和浅拷贝的问题，OC设计这个语法的目的就是创建一个副本，修改副本的时候不会改变原来的对象。</p>
<blockquote>
<p>对于这两个问题可以这么理解，浅拷贝也就是把指针赋值，大家用的都是地址。而深拷贝，则是创建了一个新的空间，虽然内容可能是一样的]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS的内存管理]]></title>
    <link href="http://lcepy.github.io/2015/02/04/iOS%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://lcepy.github.io/2015/02/04/iOS的内存管理/</id>
    <published>2015-02-04T15:00:33.000Z</published>
    <updated>2015-02-06T11:56:21.000Z</updated>
    <content type="html"><![CDATA[<p>在iOS开发中使用的是引用计数的方式来管理内存，也就是跟踪记录每个值被引用的次数。当声明一个变量来接收一个指针对象，引用次数就＋1，如果指针对象被添加到数组，字典，或者被其他指针对象所使用又＋1.如果使用完毕之后对它进行－1，一直到0，系统会立马释放这段内存。</p>
<blockquote>
<p>如果开启了ARC机制，编译器会帮助我们在代码中添加上内存管理的代码，而且在Xcode中比如retain这些都是不可以使用的</p>
</blockquote>
<p>在OC中可以使用retainCount来查看指针对象的引用次数。</p>
<pre><code><span class="variable">Wower</span> *wower = [[<span class="variable">Wower</span> alloc] init<span class="variable">WithName</span>:@<span class="string">"lcepy"</span> <span class="keyword">and</span><span class="variable">T</span>:@<span class="string">"魔兽世界"</span>];
<span class="variable">NSLog</span>(@<span class="string">"%zi"</span>,[wower retain<span class="variable">Count</span>]);
</code></pre><p>一般来说如果在代码中使用了alloc，copy，retain，引用计数都是加一，而release则是引用计数减一，又比如把指针对象添加到数组，字典，内部的引用计数也会加一，但是这个的话，系统是会来管理的。又比如一些静态方法，也会由系统来管理，内部是会加一的。还有一种叫做自动释放池的玩意，autorelease，它的功能是整个执行过程结束，系统来管理释放的工作。</p>
<p>一般来说基本类型的数据也就是C语言的如int这样的，直接赋值即可不用管理，在iOS中主要是对OC指针对象进行内存管理。在使用@property的时候，根据参数retain，copy，编译器会帮助我们生成getter，setter方法，而且还会帮助我们进行一下内存管理，比如：</p>
<pre><code><span class="pp">-<span class="params">(void)</span>setterFound:<span class="params">(<span class="variable">Found</span> *)</span>found
{
    if <span class="params">(<span class="variable">_</span>found != found)</span> {
        [_found release];
        _found = found;
        [_found retain];
    }
}</span>
</code></pre><p>有一点要注意的是如果是retain，copy一般来说接收的都是OC对象，基本类型可以用assign。</p>
<p>实例：</p>
<pre><code><span class="comment">//.h文件</span>
<span class="class"><span class="keyword">@interface</span> <span class="title">Found</span> : <span class="title">NSObject</span></span>

<span class="keyword">@end</span>


<span class="class"><span class="keyword">@interface</span> <span class="title">Wower</span> : <span class="title">NSObject</span></span>
{
    Found *_found;
}

<span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;
<span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSString</span> *game;

-(<span class="keyword">id</span>)initWithName:(<span class="built_in">NSString</span> *)name andT:(<span class="built_in">NSString</span> *)game;
-(<span class="keyword">void</span>)setterFound:(Found *)found;

<span class="keyword">@end</span>
<span class="comment">//.m文件</span>
<span class="class"><span class="keyword">@implementation</span> <span class="title">Wower</span></span>

-(<span class="keyword">id</span>)initWithName:(<span class="built_in">NSString</span> *)name andT:(<span class="built_in">NSString</span> *)game
{
    <span class="keyword">self</span> = [<span class="keyword">super</span> init];
    <span class="keyword">if</span> (<span class="keyword">self</span>) {
        _name = name;
        _game = game;
    }
    <span class="keyword">return</span> <span class="keyword">self</span>;
}


-(<span class="keyword">void</span>)dealloc
{

    <span class="built_in">NSLog</span>(<span class="string">@"Found的引用计数%zi"</span>,[_found retainCount]);
    [_found release];
    <span class="built_in">NSLog</span>(<span class="string">@"Found的引用计数%zi"</span>,[_found retainCount]);
    [<span class="keyword">super</span> dealloc];

}

-(<span class="keyword">void</span>)showMessage
{

    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,_name);
    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,_game);
}

-(<span class="keyword">void</span>)setterFound:(Found *)found
{
    <span class="keyword">if</span> (_found != found) {
        [_found release];
        _found = found;
        [_found retain];
    }
}
<span class="keyword">@end</span>

<span class="class"><span class="keyword">@implementation</span> <span class="title">Found</span></span>

-(<span class="keyword">void</span>)dealloc
{
    [<span class="keyword">super</span> dealloc];
    <span class="built_in">NSLog</span>(<span class="string">@"释放"</span>);
}

<span class="keyword">@end</span>

<span class="comment">//main文件</span>

<span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) {
    <span class="keyword">@autoreleasepool</span> {
        Wower *wower = [[Wower alloc] initWithName:<span class="string">@"lcepy"</span> andT:<span class="string">@"魔兽世界"</span>];
        <span class="built_in">NSLog</span>(<span class="string">@"%zi"</span>,[wower retainCount]);
        Found *f = [[Found alloc] init];
        [wower setterFound:f];
        [wower release];
        [f release];
    }
    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><p>dealloc是OC对象释放之后，系统会自动调用，这里一般都是来释放一些其他对象。在Wower类的dealloc中只释放了_found，而copy的那个却没有释放，那是因为@””快速创建的，一般来说这些都不需要自己来管理而是系统。</p>
<blockquote>
<p>关于OC的内存管理，其实有一个原则，就是谁创建谁释放，谁使用谁释放。在之前，创建了wower,f对象，于是它们要在外部释放，而我使用了setFound方法来把f对象设置到成员变量中，于是这里就成了wower对象的_found成员变量在使用，于是它有责任在dealloc的时候来把f对象的引用计数减1。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在iOS开发中使用的是引用计数的方式来管理内存，也就是跟踪记录每个值被引用的次数。当声明一个变量来接收一个指针对象，引用次数就＋1，如果指针对象被添加到数组，字典，或者被其他指针对象所使用又＋1.如果使用完毕之后对它进行－1，一直到0，系统会立马释放这段内存。</p>
<b]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript十一之理解内存管理]]></title>
    <link href="http://lcepy.github.io/2015/02/04/%E5%A4%8D%E4%B9%A0JavaScript%E5%8D%81%E4%B8%80%E4%B9%8B%E7%90%86%E8%A7%A3%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://lcepy.github.io/2015/02/04/复习JavaScript十一之理解内存管理/</id>
    <published>2015-02-04T10:53:09.000Z</published>
    <updated>2015-02-04T15:00:09.000Z</updated>
    <content type="html"><![CDATA[<p>一般来说内存管理主要有这么几种方式，引用计数和标记，而JavaScript采用的就是标记管理的方式。Js的内存管理是自动的，但是并不是说执行完后立马销毁，而是有时间周期性，相隔一段时间执行一下垃圾回收，把没有引用的内存全部销毁。</p>
<p>OC中采用的是引用计数来手动管理内存，这样的方式比较好，可以让开发者自己来管理。当然也有不好的地方，如果遗忘了释放，很可能引起应用的崩溃。</p>
<p>总体来看在IE中因为COM组件的原因，可能会发生循环引用的问题，这个问题在引用计数的内存管理都会遇见。所谓的循环引用是指在对象A中包含了一个指向B的指针，然后再对象B中包含一个指向A的指针，于是悲剧了。</p>
<pre><code>var element = document.getElementById(<span class="string">'doc'</span>);
var <span class="keyword">my</span> = {};
<span class="keyword">my</span>.element = element;
element.<span class="keyword">my</span> = <span class="keyword">my</span>;
</code></pre><p>大家都引用，于是，可想而知。要避免这种问题，一定要在不使用的时候my.element = null，把它断开。</p>
<p>那么，其他浏览器呢？还是标记清理的机制，比如一个函数的变量，在进入环境时标记上“进入环境”，执行完之后标记上“离开环境”，然后等待系统来释放。</p>
<p>IE有一个手动释放的方法，window.CollectGarbage，调用它就立马释放已经标记离开环境的变量，不过很多文章都不建议这样做。</p>
<p>那么一般都这样做，引用类型的释放</p>
<pre><code><span class="keyword">var</span> my = {};
<span class="comment">//使用完毕之后</span>
my = <span class="literal">null</span>;
</code></pre><p>让my脱离执行环境，标记上已经离开环境，然后等待系统执行垃圾回收，释放内存。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一般来说内存管理主要有这么几种方式，引用计数和标记，而JavaScript采用的就是标记管理的方式。Js的内存管理是自动的，但是并不是说执行完后立马销毁，而是有时间周期性，相隔一段时间执行一下垃圾回收，把没有引用的内存全部销毁。</p>
<p>OC中采用的是引用计数来手动管]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript十之理解引用类型和匿名函数闭包]]></title>
    <link href="http://lcepy.github.io/2015/02/03/%E5%A4%8D%E4%B9%A0JavaScript%E5%8D%81%E4%B9%8B%E7%90%86%E8%A7%A3%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85/"/>
    <id>http://lcepy.github.io/2015/02/03/复习JavaScript十之理解引用类型和匿名函数闭包/</id>
    <published>2015-02-03T11:02:01.000Z</published>
    <updated>2015-02-04T10:51:00.000Z</updated>
    <content type="html"><![CDATA[<p>引用类型虽然看起来很类很相似，但是它们却是不同的概念，引用类型的值，也就是对象是引用类型的一个实例。在Js中引用类型主要有Object，Array，Date，正则，Function等。</p>
<p>Object之前已经复习过了，Array是用的非常频繁的一个引用类型。</p>
<p><strong>Array</strong></p>
<p>在Js中数组可以存储任意的数据，而且它的大小是可以动态调整的类似于OC中的NSMutableArray。创建数组可以使用构造函数的方式也可以使用字面量的形式，另外可以使用concat从一个数组中复制一个副本出来。数组本身提供了很多方法让开发者使用来操作数组。</p>
<ul>
<li>length 数组的长度</li>
<li>toString  可以返回一个以，拼接的字符串，相当于是调用了下join(‘,’)</li>
<li>join 可以用一个分割符来拼接成一个字符串</li>
<li>push 添加一个数据到数组的末端</li>
<li>pop 删除数组中的最后一项，有返回值</li>
<li>shift 删除数组的第一项，有返回值</li>
<li>unshift 添加一个数据到数组的首端</li>
<li>reverse 倒序</li>
<li>sort 可以传入一个排序的函数</li>
<li>slice 可以基于当前数组返回一个新的数组，接收两个参数，返回项的起始位置和结束位置</li>
<li>splice 可以传入N个参数，第一个参数表示要删除，插入或则替换的位置，第二个参数表示要删除的项数，第三个到第N个表示要插入或则替换的数据</li>
</ul>
<p><strong>Date</strong></p>
<p>时间对象也是使用非常多的玩意，它是使用GMT时间来描述，而且时间对象是可以直接比对大小的。</p>
<pre><code><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>,<span class="number">1</span>,<span class="number">2</span>);
<span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>,<span class="number">1</span>,<span class="number">10</span>);

date1 &lt; date2  
</code></pre><p>常用的方法</p>
<ul>
<li>getTime 获取时间对象的毫秒数</li>
<li>setTime 设置时间对象的毫秒数，会改变日期</li>
<li>getFullYear 获取时间对象的年（2015）</li>
<li>getMonth 获取时间对象的月（需要加1）</li>
<li>getDay 获取日期的星期几（0-6）星期天到星期六</li>
<li>getDate 获取日期的天数</li>
<li>getHours 获取当前日期的小时</li>
<li>getMinutes 获取当前日期的分钟数</li>
<li>getSeconds 获取当然日期的秒数</li>
</ul>
<p>上面看起来都是获取，当然也有设置，只是相应的get置换成set即可。</p>
<p><strong>正则表达式</strong></p>
<p>在Js里正则表达式是用RegExp类型来支持的，关于正则可以看看之前写的一篇文章，用python来描述的如何读懂正则。</p>
<p>Js也支持三种模式，gim，表示全局，不区分大小写，多行。</p>
<p>一般来说很少有人这么使用var xxx = new RegExp()，而是用字面量的方式，比如var xx = /[bc]/gi;像用的比较多的方法有exec用于捕获包含第一个匹配项的数组，没有则返回null。test，用于判断，如果匹配返回true，不匹配返回false。</p>
<p><strong>Function</strong></p>
<p>说起来Js的核心是什么？那就是函数了。对于函数主要是理解它的几个概念，它可以当值来传递，没有重栽。而且声明的时候，比如function a(){} var a = function(){} 执行时会有区别。函数内部的参数arguments包含了传入的所有参数，this，表示在这个函数内的作用域，以及prototype。</p>
<p><strong>处理字符串</strong></p>
<p>在Js中还有一种叫做包装类型的玩意，正因为此所以处理一些基本数据类型，比如字符串时，有很多方法可以使用。</p>
<ul>
<li>concat 可以将一个或者多个字符串拼接起来，返回一个新的字符串</li>
<li>slice 接收两个参数，起始位置和结束位置，返回一个新的字符串</li>
<li>substr和substring和slice一样，唯一的不同是substr第二个参数是返回字符串的个数</li>
<li>indexOf 从头开始查询字符串，存在会返回它所在的位置，没有返回－1</li>
<li>lastIndexOf 从最后开始查询字符串</li>
<li>toUpperCase 转大写</li>
<li>toLowerCase 转小写</li>
<li>match 正则表达式使用跟exec一样</li>
<li>search 正则表达式使用，查询到返回一个位置，没有返回－1</li>
<li>replace 替换，第一个参数可以是正则表达式也可以是字符串，第二个参数是要替换的字符串</li>
<li>localeCompare比较字符串，如果字符串相等返回0，如果字符串的字母排在参数字符串之前，返回负数，如果是之后，返回正数。</li>
</ul>
<h3 id="理解匿名函数和闭包">理解匿名函数和闭包</h3>
<p>匿名函数又叫拉姆达函数，主要是在把函数当值传递的时候用，或者是把函数当返回值，比如：</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">d</span><span class="params">(callback)</span></span>{
    <span class="keyword">callback</span>();
}
d(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    alert(<span class="string">'123'</span>)
});

<span class="comment">//或者</span>

<span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">()</span></span>{
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        alert(<span class="string">'123'</span>);
    }
}
<span class="keyword">var</span> g = b();
g();
</code></pre><p>其实第二种方式跟闭包的意义一样了，所谓的闭包书面的解释是可以访问另一个函数作用域内变量的函数，稍微改写一下可能会更明显。</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">()</span></span>{
    <span class="keyword">var</span> name = <span class="string">'123'</span>;
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        alert(name);
    }
}
<span class="keyword">var</span> g = b();
g();
</code></pre><p>从这里可以看出来return的函数可以访问到name，而外部却不行，这个返回值的函数就可以理解为闭包。理解闭包还可以看一个经典的求值的例子。</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">save_i</span><span class="params">()</span></span>{
    <span class="keyword">var</span> a = [];
    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++){
        a[i] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            <span class="keyword">return</span> i;
        }
    }
    <span class="keyword">return</span> a;    
}

<span class="keyword">var</span> c = save_i();
<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++){
    alert(c[i]());
}
</code></pre><p>从这个例子上来看，我们想得到的结果是10次循环a[i]保存着一个闭包，然后alert出从0到10，但是结果很出人意料，全部是10，为什么？哪里理解的不对呢？a[i]明明是内部函数，然后让它访问另外一个函数作用域内的变量i。</p>
<p>个人觉得可以这样去分析问题，在客户端执行Js时有一个全局执行环境，指向的是window对象。而所谓的对象也就是引用类型，实际上在后台执行环境中，它就是一个指针。</p>
<p>回到Js当代码在执行的时候，会创建变量对象并且构建一个作用域链，而这个对象保存着当前函数可以访问的对象。</p>
<pre><code>window
    -<span class="ruby">&gt;save_i
</span>        -<span class="ruby">&gt;this|argument
</span>        -<span class="ruby">&gt;a
</span>        -<span class="ruby">&gt;i
</span>        -<span class="ruby">&gt;看不见的a[<span class="number">0</span>]-a[<span class="number">10</span>]
</span>        -<span class="ruby">&gt;a[<span class="number">0</span>]function(){}
</span>            -<span class="ruby">&gt;i
</span>    -<span class="ruby">&gt;c</span>
</code></pre><p>上述的i和a[0]里的i是同一个i，那么结果就是10。</p>
<p>进一步处理</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">save_i</span><span class="params">()</span></span>{
    <span class="keyword">var</span> a = [];
    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++){
        a[i] = <span class="function"><span class="keyword">function</span><span class="params">(k)</span></span>{
            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
                <span class="keyword">return</span> k;
            };
        }(i)
    }
    <span class="keyword">return</span> a;    
}

<span class="keyword">var</span> c = save_i();
<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++){
    <span class="built_in">console</span>.log(c[i]());
}
</code></pre><p>接着按上面的节奏来分析</p>
<pre><code>window
    -<span class="ruby">&gt;save_i
</span>        -<span class="ruby">&gt;this|argument
</span>        -<span class="ruby">&gt;a
</span>        -<span class="ruby">&gt;i
</span>        -<span class="ruby">&gt;看不见的a[<span class="number">0</span>]-a[<span class="number">10</span>]
</span>        -<span class="ruby">&gt;a[<span class="number">0</span>]function(){}
</span>            -<span class="ruby">&gt;k
</span>            -<span class="ruby">&gt;function(){}
</span>                -<span class="ruby">&gt;k
</span>
    -<span class="ruby">&gt;c</span>
</code></pre><p>什么是传参？按值传递，相当于是在那个立即执行的函数中创建了一个新的地址和空间，虽然值是一样的，但是每一个k又是不同的，所以得到的结果正好满足了我们的预期。</p>
<p>本来正常情况下save_i执行完毕后就要销毁，但是内部的闭包被包含在这个作用域内了，所以save_i没法销毁，从这里可以看的出来闭包会带来内存的问题，因为用完之后没法销毁，如果不注意的话。</p>
<p>那么用完之后只能设置为null来解除引用，等着自动销毁把内存回收。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>引用类型虽然看起来很类很相似，但是它们却是不同的概念，引用类型的值，也就是对象是引用类型的一个实例。在Js中引用类型主要有Object，Array，Date，正则，Function等。</p>
<p>Object之前已经复习过了，Array是用的非常频繁的一个引用类型。</]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript九之客户端存储方案]]></title>
    <link href="http://lcepy.github.io/2015/02/03/%E5%A4%8D%E4%B9%A0JavaScript%E4%B9%9D%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/"/>
    <id>http://lcepy.github.io/2015/02/03/复习JavaScript九之客户端存储方案/</id>
    <published>2015-02-03T09:43:48.000Z</published>
    <updated>2015-02-03T11:00:43.000Z</updated>
    <content type="html"><![CDATA[<p>随着Web应用越来越复杂，总是有很多需求需要在客户端存储一些特定的信息，用来描述访问者或者跟访问者相关的信息。于是，就有了这些客户端存储的方案，供开发者选择以及使用。</p>
<h3 id="cookie">cookie</h3>
<p>说起来cookie的出现是非常早的，用于在客户端存储会话信息，它要求服务器对任意的HTTP请求发送Set-Cookie HTTP头作为响应的一部分，例如：</p>
<pre><code><span class="status">HTTP/1.1 <span class="number">200</span> OK</span>
<span class="attribute">Content-Type</span>: <span class="string">text/html</span>
<span class="attribute">Set-Cookie</span>: <span class="string">name=value</span>
</code></pre><p>cookie虽然好用，但是它在客户端上有很多限制，而去获取也不是很容易。最重要的是关于请求的性能，cookie是对任意HTTP设置，所以也会发送给服务器，这些额外信息有时候不是必需的。</p>
<ul>
<li>cookie是跟特定的域有关系的，也就意味着存储在cookie中的信息只能让特定的域来访问</li>
<li>cookie的条数是有限制的，大体上来说各浏览器不会超过50个，除了safair chrome</li>
<li>cookie在客户端只有一个方法可以用document.cookie</li>
<li>cookie的大小在客户端上也有限制，大体不会超过1MB</li>
<li>如果在客户端设置了cookie，是没法删除的，只能在同一个cookie上设置name=空字符串或者设置失效时间</li>
<li>如果设置了secure，cookie只能在SSL链接才能传输</li>
</ul>
<p>cookie在浏览器上的保存是由几个方面组成的，理解这个对于使用Js操作cookie是一个必备条件，它由名称也就是每一项的key，每一项的值value，域名的限制，路径对于哪一个页面起作用，时间，以及安全标识secure。</p>
<p>在客户端主要是使用document.cookie来进行操作，获取和设置都是这一个。而去获取是一个全的字符串，还需要进一步的处理才能得到值。如果是设置，也是需要设置一个全的字符串。对于这个，最好都要encodeURIComponent一下，获取的时候decodeURIComponent一下。</p>
<pre><code><span class="keyword">var</span> setCookie = <span class="function"><span class="keyword">function</span><span class="params">(name,value,expires,path,domain,secure)</span></span>{
    <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name)+<span class="string">'='</span>+<span class="built_in">encodeURIComponent</span>(value);

    <span class="comment">//各项的拼接</span>
    <span class="built_in">document</span>.cookie = cookieText;
}
</code></pre><p>聪明的开发者为了绕开浏览器上对于条数的限制，研究出了一个方式，把真实的值设置在子cookie上。</p>
<pre><code><span class="variable">name=</span><span class="variable">name=</span>value
</code></pre><h3 id="IE上的客户端存储userData">IE上的客户端存储userData</h3>
<p>在IE中引入了一个userData的方案来存储客户端数据，允许每个文档最多128KB，每个域1MB的数据量。想使用它首选在那个元素上应用一个css。</p>
<pre><code>&lt;<span class="keyword">div</span> style=<span class="string">"behavior:url(#default#userData)"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>使用的时候跟设置dom属性一样，唯一有一个不同的地方是最后要调用save方法，告诉它存储在哪个数据仓库上。</p>
<pre><code><span class="keyword">var</span> dataStore = <span class="built_in">document</span>.getElementById(<span class="string">'dataStore'</span>);
dataStore.setAttribute(<span class="string">'name'</span>,<span class="string">'lcepy'</span>);
dataStore.save(<span class="string">'MyNameInfo'</span>);
</code></pre><p>获取</p>
<pre><code>dataStore.<span class="built_in">load</span>(<span class="string">'MyNameInfo'</span>);
dataStore.getAttribute(<span class="string">'name'</span>);
</code></pre><h3 id="HTML5的客户端存储方案">HTML5的客户端存储方案</h3>
<blockquote>
<p>支持度以及使用比较广泛的是Web Storage API，当然客户端还有本地数据IndexDB等等，这些也是可以存储客户端数据，但是它们支持的很少。在做移动端开发时，localStorage的使用是非常频繁的，还要注意一点是个别比如safair浏览器有隐私模式，本地缓存是不起作用的，无法读取，所以要做一些额外的处理。</p>
</blockquote>
<p>主要的是两个sessionStorage和localStorage两套API来应用，它们是有区别的，前者只在浏览器运行时存在，也可以跨页面，前提是页面不能关闭。后者是永久存在的，如果用户不删除，那么它永远不会删除。它们的使用方式都是一样的，包括API。至于分配的空间，要看各浏览器的态度的，一般情况下是5MB，还有一点它是跟域走的。</p>
<pre><code><span class="title">interface</span> Storage{
    <span class="title">readonly</span> attribute unsigned long legth;
    <span class="title">getter</span> DOMString key();
    <span class="title">getter</span> any getItem();
    <span class="title">setter</span> creator void setItem();
    <span class="title">deleter</span> void removeItem();
    <span class="title">viod</span> clear();
}
</code></pre><ul>
<li>length 描述Storage对象中存储的key=value数量</li>
<li>key 方法允许获取一个指定位置的键</li>
<li>getItem方法根据指定的key返回一个value</li>
<li>setItem方法将数据value存入指定的位置key</li>
<li>removeItem根据指定的key来删除数据</li>
<li>clear 删除全部的数据</li>
</ul>
<p>使用：</p>
<pre><code><span class="transposed_variable">localStorage.</span>setItem(<span class="string">'name'</span>,<span class="string">'lcepy'</span>);
<span class="transposed_variable">localStorage.</span>getItem(<span class="string">'name'</span>);
<span class="transposed_variable">localStorage.</span>key(<span class="number">0</span>);
<span class="transposed_variable">localStorage.</span><span class="built_in">length</span>;
<span class="transposed_variable">localStorage.</span>removeItem(<span class="string">'name'</span>);
<span class="transposed_variable">localStorage.</span><span class="keyword">clear</span>();
</code></pre><p>另外API中还有一套事件用于本地存储发生改变时的通知</p>
<pre><code><span class="built_in">window</span>.addEventLister(<span class="string">'storage'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{},<span class="literal">true</span>);
</code></pre><p>event对象中包含有</p>
<ul>
<li>key 存储了被更新或者删除的键</li>
<li>oldValue 包含了更新之前的数据</li>
<li>url Storage事件发生的源</li>
<li>newValue 包含了更新之后的数据</li>
<li>storageArea 包含一个引用，指向发生改变之前的localStorage或者sessionStorage</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着Web应用越来越复杂，总是有很多需求需要在客户端存储一些特定的信息，用来描述访问者或者跟访问者相关的信息。于是，就有了这些客户端存储的方案，供开发者选择以及使用。</p>
<h3 id="cookie">cookie</h3>
<p>说起来cookie的出现是非常早的，]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript八之操作XML]]></title>
    <link href="http://lcepy.github.io/2015/02/02/%E5%A4%8D%E4%B9%A0JavaScript%E5%85%AB%E4%B9%8B%E6%93%8D%E4%BD%9CXML/"/>
    <id>http://lcepy.github.io/2015/02/02/复习JavaScript八之操作XML/</id>
    <published>2015-02-02T09:50:14.000Z</published>
    <updated>2015-02-02T10:53:39.000Z</updated>
    <content type="html"><![CDATA[<p>在以前XML是存储和传输数据的事实标准（客户端没有出现JSON之前），那个时候浏览器还不支持解析XML，于是很多开发者需要自己写一个XML解析器。原理，就是把XML也转化成DOM文档，然后通过DOM API来获取。</p>
<p>而现在，在客户端（浏览器）编程中几乎很少会使用到XML，数据的交换都应用在JSON上了，了解这个有一个好处，就是在做服务端编程，比如SAOP协议时就会用到，还有桌面的客户端，或者是移动客户端上，比如iOS，它把一些数据，比如NSArray写入到本地，实际上就是一个XML文本，当然在代码层面上，是看不出来有解析的，如果读取这个文件，是直接转成NSArray对象的。</p>
<blockquote>
<p>IE有它自己的实现对XML的支持，下面说的两个类型，在IE中都不支持</p>
</blockquote>
<p>将XML字符串序列化成DOM文档，主要是使用DOMparser类来实现，其他的用法跟获取DOM节点一样。</p>
<pre><code><span class="keyword">var</span> parser = <span class="keyword">new</span> DOMparser();
<span class="keyword">var</span> xmlDomObject = parser.parserFromString(<span class="string">'&lt;root&gt;&lt;child/&gt;&lt;/root&gt;'</span>,<span class="string">'text/xml'</span>);

xmlDomObject.getElementsByTagName(<span class="string">'child'</span>);
</code></pre><p>将DOM文档反序列化成XML字符串，主要是使用XMLSerializer类型，使用上述的xmlDomObject对象。</p>
<pre><code><span class="built_in">var</span> serializer <span class="subst">=</span> <span class="literal">new</span> XMLSerializer();
<span class="built_in">var</span> <span class="built_in">xml</span> <span class="subst">=</span> serializer<span class="built_in">.</span>serializeToString(xmlDomObject);
</code></pre><p>如果XML解析有错误都会返回一个parsererror标签，获取的时候就可以判断是否有这个标签来决定解析是否有错误。</p>
<p>据说DOM3版本的XML操作只有一个浏览器实现了，所以当资料了解就好。</p>
<h3 id="IE版本">IE版本</h3>
<blockquote>
<p>IE版本的XML解析主要是使用它的ActiveXObject类型来实现</p>
</blockquote>
<p>在IE中想要解析XML就必须先创建一个空的DOM文档，然后通过这个文档来获取。</p>
<pre><code>var xmldom = createDocument();
xmldom.loadXML(<span class="comment">'<span class="xmlDocTag">&lt;root&gt;</span><span class="xmlDocTag">&lt;child/&gt;</span><span class="xmlDocTag">&lt;/root&gt;</span>');</span>

xmldom.getElementsByTagName(<span class="comment">'child');</span>
</code></pre><p>如果解析有错误，可以检查parseError对象。</p>
<pre><code><span class="keyword">if</span>(xmldom.parseError !== <span class="number">0</span>){
    //<span class="keyword">do</span> 
}
</code></pre><p>在IE中进行序列化非常的方便，因为它都内置在了DOM文档中，每一个DOM节点都有一个xml属性，它就保存着XML字符串。</p>
<pre><code>xmldom<span class="built_in">.</span><span class="built_in">xml</span>
</code></pre><p>最后IE还提供了一个可以加载远程XML文件的方法load，它就接收一个参数，远程XML的URL地址。当然，也可以使用async属性来设置同步还是异步，默认是异步（true）。</p>
<pre><code><span class="keyword">var</span> xmldom = createDocument();
xmldom.<span class="keyword">async</span> = <span class="keyword">false</span>;
xmldom.load(<span class="string">'http://xxx.sss.xml'</span>);
</code></pre><p>如果是异步还要监听一下onreadystatechange事件，判断readystate状态，这个跟Ajax的使用是一样的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在以前XML是存储和传输数据的事实标准（客户端没有出现JSON之前），那个时候浏览器还不支持解析XML，于是很多开发者需要自己写一个XML解析器。原理，就是把XML也转化成DOM文档，然后通过DOM API来获取。</p>
<p>而现在，在客户端（浏览器）编程中几乎很少会使]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UINavigationController的理解]]></title>
    <link href="http://lcepy.github.io/2015/02/01/UINavigationController%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://lcepy.github.io/2015/02/01/UINavigationController的理解/</id>
    <published>2015-02-01T11:23:41.000Z</published>
    <updated>2015-02-06T10:42:45.000Z</updated>
    <content type="html"><![CDATA[<p>在做iOS开发的时候，<strong>UINavigationController</strong>可以说使用跟那个UITableView一样非常的常见。在学习这个之前，需要了解一下在iOS开发中的层级关系。</p>
<p>我把它想象成一本书，虽然这么描述非常的不精准，但是却很像。每一个UIViewController就像书页，最外面的一个是封页，当然它就是我们的启动UI界面了，而目录就相当于是UINavigationController，通过它可以精准的翻到每一页。在iOS应用中，这样的层级关系就像书页一页。</p>
<blockquote>
<p>实际上这里可能描述的有些错误，但是我只能这么想象了，当我翻到某一页时，这一页（UIViewController）就是在顶端的，而其他页（UIViewController）是在下面的。当然，对于导航控制，它想要控制每一页（对于书来说是人在控制）就必需在每一个视图控制器的根部。</p>
</blockquote>
<p>UINavigationController是一个栈结构，所谓的栈结构也就是一个顺序（先进后出的顺序），因为当前的书页我们要看见，它永远都必须在第一的位置，我们才能看见，也就决定了它是我们人看完之后才能出去的顺序。</p>
<p>如何创建一个UINavigationController？</p>
<pre><code> ViewController *<span class="variable">view =</span> [[ViewController alloc] init];
UINavigationController *<span class="variable">navigation =</span> [[UINavigationController alloc]
initWithRootViewController:view];
self.window.<span class="variable">rootViewController =</span> navigation;
</code></pre><p>这里会要求加入一个根视图控制器，也就是初始化时我们看见的那一页。</p>
<p>从官方的.h文件中可以看的出来用来进行导航的就四个方法，协议的不算。</p>
<pre><code>- (<span class="keyword">void</span>)pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated; <span class="comment">// Uses a horizontal slide transition. Has no effect if the view controller is already in the stack.</span>

- (<span class="built_in">UIViewController</span> *)popViewControllerAnimated:(<span class="built_in">BOOL</span>)animated; <span class="comment">// Returns the popped controller.</span>
- (<span class="built_in">NSArray</span> *)popToViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated; <span class="comment">// Pops view controllers until the one specified is on top. Returns the popped controllers.</span>
- (<span class="built_in">NSArray</span> *)popToRootViewControllerAnimated:(<span class="built_in">BOOL</span>)animated; <span class="comment">// Pops until there's only a single view controller left on the stack. Returns the popped controllers.</span>
</code></pre><p>分别是添加到视图控制器入栈，移出最后一个视图控制器，移出到跟视图控制器上，移出到任意位置上的视图控制器。</p>
<p>除了上述的方法外，还有几个属性需要掌握，在写到这个之前，还需要理解导航控制上的一些概念问题。对于管理多个内容视图的push和pop，导航控制器自身提供了视图切换的动画效果。一般来说一个app中的内容区域就相当于视图控制器，而这个框就是导航控制器，当然这个框又是在另一个框上的，比如window。假设一下，当我们切换了内容后，有些app是上部的一个工具条不会变中间的内容变，也有可能中间和上部都会变。从这里，其实可以看的出来，导航控制存在着这些toolBar，也控制着视图控制器，但是这些toolBar的真正控制权是在每一个视图控制器上的。</p>
<p>总结起来</p>
<blockquote>
<p>一个navigationController对应一个navigationBar，一个navigationController包含多个UIViewController，每个UIViewController对应一个UINavigationItem，UINavigationItem控制着多个UIBarButtonItem，一个UINavigationController控制一个UIToolBar，UIToolBar中的UIBarButtonItem由当前视图控制器管理，而不是导航控制器来控制。需要注意的是，一个UINavigationItem不是由navigationbar或者是导航控制器来控制，而是由当前视图控制器来控制。</p>
</blockquote>
<p>对于生成一个系统自带的UIBarButtonItem，从代码上就可以看的出来它不是self.navigationController在控制，当然有系统的一般来说肯定有自定义的。</p>
<pre><code><span class="built_in">UIBarButtonItem</span> *leftbutton = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemBookmarks target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(leftEvent)];
<span class="keyword">self</span><span class="variable">.navigationItem</span><span class="variable">.leftBarButtonItem</span> = leftbutton;

<span class="built_in">UIButton</span> *button1 = [<span class="built_in">UIButton</span> buttonWithType:UIButtonTypeRoundedRect];
[button1 setTitle:<span class="string">@"view"</span> forState:UIControlStateNormal];
[button1 setTitleColor:[<span class="built_in">UIColor</span> blackColor] forState:UIControlStateNormal];
[button1 setFrame:CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">40</span>)];
[button1 addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(customviews:) forControlEvents:UIControlEventTouchUpInside];
<span class="built_in">UIBarButtonItem</span> *right = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithCustomView:button1];

<span class="keyword">self</span><span class="variable">.navigationItem</span><span class="variable">.rightBarButtonItem</span> = right;
</code></pre><p>自定义一个button放到navigationItem的右边的bar中</p>
<pre><code><span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:UIButtonTypeRoundedRect];
[button setTitle:<span class="string">@"Push"</span> forState:UIControlStateNormal];
[button setTitleColor:[<span class="built_in">UIColor</span> blackColor] forState:UIControlStateNormal];
[button setFrame:CGRectMake(<span class="number">90</span>, <span class="number">100</span>, <span class="number">140</span>, <span class="number">40</span>)];
[button addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pushview:) forControlEvents:UIControlEventTouchUpInside];
[<span class="keyword">self</span><span class="variable">.view</span> addSubview:button];

-(<span class="keyword">void</span>)pushview:(<span class="built_in">UIButton</span> *)sender
{
    SecondViewController *secoundVC = [[SecondViewController alloc] init];
    [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:secoundVC animated:<span class="literal">YES</span>];
}
</code></pre><p>然后创建一个按钮，导航到第二个视图控制器上。</p>
<p><a href="https://github.com/lcepy/geekObjective-C/tree/master/NavigationControllerDemo" target="_blank" rel="external">源代码查看</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在做iOS开发的时候，<strong>UINavigationController</strong>可以说使用跟那个UITableView一样非常的常见。在学习这个之前，需要了解一下在iOS开发中的层级关系。</p>
<p>我把它想象成一本书，虽然这么描述非常的不精准，但是]]>
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript七之DOM]]></title>
    <link href="http://lcepy.github.io/2015/01/28/%E5%A4%8D%E4%B9%A0JavaScript%E4%B8%83%E4%B9%8BDOM/"/>
    <id>http://lcepy.github.io/2015/01/28/复习JavaScript七之DOM/</id>
    <published>2015-01-28T11:51:01.000Z</published>
    <updated>2015-02-01T11:53:05.000Z</updated>
    <content type="html"><![CDATA[<p>DOM是针对HTML和XML文档的一个API，主要是使用JavaScript来进行编程操作HTML和XML文档。其他语言如果实现了DOM标准，理论上也是可以使用这个API的，这里仅仅讨论JavaScript的应用。</p>
<p><strong>理解层级结构与关系</strong></p>
<p>在浏览器中比如HTML页面是由很多有层次结构的标签组成的，而为这些标签提供查询，添加，删除等等方法主要就是DOM在提供支持。</p>
<p>（页面又称为文档）文档中所有的节点之间都存在这样或那样的关系，比如下面一个经典的HTML：</p>
<pre><code><span class="tag">&lt;<span class="title">html</span>&gt;</span>
    <span class="tag">&lt;<span class="title">head</span>&gt;</span><span class="tag">&lt;/<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body</span>&gt;</span><span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>一个标签又可以称为一个元素，head和body那就是兄弟关系，它们都来自一个父系html，又可以说html的子元素是head和body，可能这样描述还不太明显，这样就用原生Js操作DOM来的方式来看看层级结构。</p>
<pre><code><span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];
</code></pre><p>先通过getElementsByTagName获取html根元素的节点，每一个元素都有一个childNodes集合和一个parentNode分别代表子节点集合和父节点，<strong>如果不存在，则都是null，如果是集合不存在，则是一个[]</strong>。</p>
<blockquote>
<p>html的childNodes //[head,body] html的parentNode // document</p>
</blockquote>
<p>每一个元素也都有一个firstChild和lastChild来分别代表第一个子元素和最后一个子元素</p>
<p>每一个元素也都有一个nextSibling和previousSibling分别代表前面一个元素和后面一个元素，以当前自己为参照物。</p>
<p>从这样可以看出来，它就像族谱一样对元素的关系进行了定义，通过理解这些层级关系，利用DOM提供的API可以很顺利的进行操作。</p>
<h3 id="操作DOM">操作DOM</h3>
<p><strong>常见的获取方式</strong></p>
<ul>
<li>document.getElementById （通过ID来获取到节点）</li>
<li>document.getElementsByTagName （通过节点标签来获取）</li>
<li>document.querySelector  </li>
<li>document.querySelectorAll</li>
</ul>
<p>后面两个属于HTML5提供的新API，在移动端会用的比较多，前者是获取单个，后者获取集合。</p>
<p><strong>常见添加，删除</strong></p>
<ul>
<li>appendChild</li>
<li>insterBefore</li>
<li>replaceChild</li>
<li>removeChild</li>
</ul>
<p>appendChild主要是向childNodes集合的末尾添加一条元素，insterBefore可以用来插入特定位置，两个参数，要插入的节点和作为参照的节点，更新成功后插入的节点会在参照节点之前，也就是参照节点的previousSibling。replaceChild和insterBefore有些类似，两个参数，要插入的节点和参照节点，更新成功后，要插入的节点会替换参照节点，removeChild就比较好理解了，删除一个节点，这四个方法都有返回值。</p>
<p><strong>常见元素属性</strong></p>
<p>一般来说，如果var doc = document.getElementById(‘doc’);doc.id = ‘xx’;这样的方式也是可以更新或者获取到元素的属性的，不过不推荐这么使用，要获取元素的属性，DOM API也提供了三个方法来使用。</p>
<ul>
<li>getAttribute</li>
<li>setAttribute</li>
<li>removeAttribute</li>
</ul>
<p>getAttribute可以获取元素的属性，setAttribute可以对元素的属性进行设置，如果属性名不存在，则创建该属性。removeAttribute则是完全删除此属性。</p>
<p>还有一个属性attributes，主要是获取元素属性集合，这个不是很常用，主要是在遍历元素属性时会使用到，它是一个集合。</p>
<p><strong>常见创建元素或文本</strong></p>
<p>一般情况下创建元素都会使用字符串的形式，innerHTML进去。不过，某些情况下，会用到createElement来创建一个元素，如果用到它，那么创建的文本也必须使用createTextNode了。</p>
<p>对于文本节点，注释节点等开发真的很少用，可以当一个子类大概了解即可。</p>
<blockquote>
<p>关于模式的讨论，主要可以用document.compatMode来判断，如果是CSS1Compat就是标准模式，移动端不会出现这样的情况，IE上可能有别的模式，模式主要是影响到CSS布局上，Js影响非常少。</p>
<p>在移动端上滚动是一个比较要处理的问题，一般来说会使用scrollIntoView，scrollIntoViewIfNeeded，scrollByLines，scrollByPages，这四个方法safari chrome都有实现，意味着在iOS和安卓平台都是良好的。</p>
</blockquote>
<ul>
<li>scrollByPages 将元素的内容滚动到指定的页面高度，具体的高度是由元素的高度来决定的。</li>
<li>scrollByLines 将元素的内容滚动到知道的行数高度，参数可正可负。</li>
<li>scrollIntoViewIfNeeded，当元素在视窗（viewport）不可见，会滚动容器元素或者浏览器窗口让其可见。如果是可见的，这个方法不起任何作用。如果参数为true，可能是垂直居中的可见。</li>
<li>scrollIntoView 滚动容器元素或者浏览器窗口，让元素可见。</li>
</ul>
<p><strong>一些小技巧</strong></p>
<p>每一个元素都存在一个contains方法，用来检测传入的节点是不是当前节点的子节点，火狐对于的方法名叫compareDocumentPosition。</p>
<p>如果要获取一个文本节点可以使用innerText（纯文本）来获取字符串，如果要获取所有的包括标签的字符串可以使用innerHTML。它们还有一种outer系列对应的方法，主要的区别是前者（outerText）会替换节点，后者(outerHTML)会修改调用它的元素，一般基本没人使用。它们可以获取，也可以通过赋值来设置新的节点。</p>
<h3 id="DOM2和DOM3">DOM2和DOM3</h3>
<p>对于这两级在DOM中基本上IE没啥支持，或者说支持的非常少，像style对象，CSS的一些对象外。</p>
<p>这里最大的变化是增加了对XML命名空间的支持，元素样式的访问，节点的遍历以及range。当然目前来看，节点的遍历，range，XML命名空间在开发中使用的非常少，可以当资料来阅读，了解有这么回事，用到的时候再查询。而元素样式的访问，这个在开发中普遍使用的较多，因为在没法使用css3动画的浏览器中，可以通过改变样式来到达动画的目的。</p>
<pre><code><span class="keyword">var</span> doc = <span class="built_in">document</span>.getElementById(<span class="string">'doc'</span>);
doc.style.width = <span class="string">'100px'</span>;
</code></pre><p>对于iframe的访问这里增加了一个contentDocument对象来进行引用，还有节点的比较，isSameNode和isEqualNode，这两个的区别在于，前者是否引用的同一个节点对象，后者是指两个节点是否是相同的类型。不过，它们使用的也不多，了解就好。</p>
<p><strong>元素的大小</strong></p>
<p>这个部分需要理解，因为关乎到元素在浏览器上的位置显示，跟动画有关系，四个属性。</p>
<ul>
<li>offsetWidth 元素在水平方向占用的空间大小</li>
<li>offsetHeight 元素在垂直方向占用的空间大小</li>
<li>offsetLeft 元素的左外边框到内边框的距离</li>
<li>offsetTop 元素的上外边框到内边框的距离</li>
</ul>
<p><strong>滚动大小</strong></p>
<p>这个在视察滚动或者处理滚动条的时候用的上，也是四个属性</p>
<ul>
<li>scrollHeight 在没有滚动的情况下，元素的总高度</li>
<li>scrollWidth 在没有滚动的情况下，元素的总宽度</li>
<li>scrollLeft 被隐藏在内容区域左侧的像素度</li>
<li>scrollTop 被隐藏在内容区域上侧的像素度</li>
</ul>
<blockquote>
<p>下面这些IE全部不支持，range支持一种叫做文本范围的东西</p>
</blockquote>
<p><strong>元素遍历</strong></p>
<p>关于遍历其实有两个方法可用createNodeIterator和createTreeWalker，不过这些在开发中几乎不会使用到，谁没事去遍历节点完呢。</p>
<p><strong>关于range</strong></p>
<p>这个也是非常少会使用到，除非是做那种编辑器应用或者在线编辑器等等，不过使用它可以更精准的控制的DOM，主要是使用createRange方法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>DOM是针对HTML和XML文档的一个API，主要是使用JavaScript来进行编程操作HTML和XML文档。其他语言如果实现了DOM标准，理论上也是可以使用这个API的，这里仅仅讨论JavaScript的应用。</p>
<p><strong>理解层级结构与关系</str]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript六之事件]]></title>
    <link href="http://lcepy.github.io/2015/01/27/%E5%A4%8D%E4%B9%A0JavaScript%E5%85%AD%E4%B9%8B%E4%BA%8B%E4%BB%B6/"/>
    <id>http://lcepy.github.io/2015/01/27/复习JavaScript六之事件/</id>
    <published>2015-01-27T10:08:04.000Z</published>
    <updated>2015-01-28T11:42:03.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>IE浏览器的事件不是复习的重点</p>
</blockquote>
<p>事件是JavaScript与HTML进行交互的一个纽带，理解事件可以更好的处理Web应用程序，现在的浏览器中主要支持两种事件流：</p>
<ul>
<li>事件冒泡</li>
<li>事件捕获</li>
<li>DOM事件流</li>
</ul>
<p>事件冒泡则是指事件开始时由具体的元素接收，然后逐级向上传播。比如：</p>
<pre><code><span class="tag">&lt;<span class="title">html</span>&gt;</span>
    <span class="tag">&lt;<span class="title">head</span>&gt;</span><span class="tag">&lt;/<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>给p标签监听一个事件，它的流向是p,div,body,html,document，其实细心看来这种流的走向会存在一个问题，给div也监听一个事件，当用户点击P的时候是会触发两次的，好在event对象中有可以阻止事件冒泡的方法。</p>
<p>事件捕获则是指事件由最上级接收，逐级向下传播到具体的元素上，了解了冒泡之后这个就非常好理解了，正是一个相反的步骤。</p>
<p>而DOM事件流又正好是冒泡与捕获的结合体，它分为三个阶段：事件捕获，目标事件，事件冒泡，如果在纸上画出来，它的走向就是一个圆形。</p>
<blockquote>
<p>对于事件处理程序，写在HTML标签中的，另外一种是直接写一个function的，比如doc.onclick = function(){}，一般来说这些浏览器支持，但是基本上不会使用了。因为前者是跟HTML耦合的，不利代码维护，而且虽然HTML加载了但是Js文件还未加载，用户点击后，是直接报错的。后者虽然也可以删除，比如doc.onclick = null，对于对代码有强迫症的同学，基本上不会使用到它。</p>
</blockquote>
<p>那么，我们该怎么给一个元素添加上事件处理程序呢？</p>
<h3 id="DOM2级事件处理程序">DOM2级事件处理程序</h3>
<ul>
<li>addEventLister</li>
<li>removeEventLister</li>
</ul>
<p>所有的DOM节点都具备这两个方法，它接收三个参数：</p>
<ul>
<li>要处理的事件名称，比如click（这里跟上述两个以及IE注册事件都不同，不需要on）</li>
<li>需要事件进行处理的函数</li>
<li>一个布尔值，表示（true，在捕获阶段调用事件处理函数）（false，在冒泡阶段调用事件处理函数）</li>
</ul>
<blockquote>
<p>一般情况下第三个参数都填false</p>
</blockquote>
<p>IE浏览器对应的两个方法，attachEvent，detachEvent，它们只有冒泡，事件名要加上on。</p>
<h3 id="事件对象">事件对象</h3>
<p>在注册完事件处理程序后，事件的一个比较重要的对象必须要理解，<strong>event事件对象</strong>。</p>
<p>一般来说，这个对象中包含着所有与当前元素所监听的事件有关的信息，比如元素监听的事件类型，元素本身等等。</p>
<p><strong>比较重要的属性和方法（只读）</strong></p>
<ul>
<li>currentTarget 真正监听事件的那个元素</li>
<li>target 事件的目标元素</li>
<li>type 事件的类型</li>
<li>perventDefault()  取消事件的默认行为</li>
<li>stopPropagation()  取消事件的捕获或者冒泡</li>
<li>bubbles 事件是否冒泡</li>
<li>eventPhase 事件处理程序的三个阶段，1捕获2处于目标3冒泡</li>
</ul>
<p><strong>比较重要的属性和方法（读写）</strong></p>
<ul>
<li>clientX 鼠标在窗口中的水平位置</li>
<li>clientY 鼠标在窗口中的垂直位置</li>
</ul>
<h3 id="事件类型">事件类型</h3>
<blockquote>
<p>PC端主要是针对鼠标，移动端则是触摸，手势相关的处理</p>
</blockquote>
<p>如果在PC端上发生一次click事件，实际上它是发生了三次事件，mousedown当鼠标按下的时候，mouseup当用户放开的时候，click两个加起来就发生了一次click事件。相对于移动，PC上的鼠标事件非常的丰富，例如mouseover当鼠标首次移入一个元素边界时触发，mouseout当鼠标移出元素时触发，这个移出，到子元素上也会触发这个事件，mousemove当鼠标在元素内移动时重复触发。</p>
<p>总体来说对于文档加载，表单控件，窗口大小改变等事件，比如获取焦点，在失去或者获取焦点是值改变等移动上都是一样的，focus（获得焦点）blur（失去焦点）。</p>
<p>在做一些视差滚动的效果时scroll事件是非常好用，移动上在css中提供了一个类似的属性。</p>
<p>唯一的区别是移动端上没有键盘事件。</p>
<h3 id="移动事件">移动事件</h3>
<ul>
<li>touchstart 当手指触摸到屏幕时触发</li>
<li>touchmove 当手指在屏幕上连续滑动时触发</li>
<li>touchend 当手指从屏幕上移开时触发</li>
<li>touchcancel 当系统停止跟踪触摸时触发（这个事件没有确定的触发时间）</li>
</ul>
<p>它们都是冒泡的，也可以取消</p>
<p><strong>三个跟踪触摸事件的属性</strong></p>
<ul>
<li>touches 当前跟踪触摸操作的touch数组，在touchend事件中为空</li>
<li>targetTouchs 特定事件目标的touch数组</li>
<li>ChangedTouches 上次触摸时发生了什么改变的touch数组</li>
</ul>
<p><strong>移动event事件对象</strong></p>
<p>PC上存在的，在移动上也存在，描述上有差异，比如</p>
<ul>
<li>target 触摸的DOM节点目标</li>
<li>pageX 触摸目标在页面中的X坐标</li>
<li>pageY 触摸目标在页面中的Y坐标</li>
</ul>
<p><strong>一些手势</strong></p>
<ul>
<li>gesturestart 当一个手指按在屏幕上另外一个手指又触摸屏幕时触发</li>
<li>gesturechange 依赖前者当其中的一个手指发生改变时触发</li>
<li>gestureend 当任何一个手指离开时触发</li>
</ul>
<p><strong>移动手势干货三部曲</strong></p>
<p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/23/webkit-touch-event-1.html" target="_blank" rel="external">对于Touch的处理</a></p>
<p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-2.html" target="_blank" rel="external">处理简单手势</a></p>
<p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-3.html" target="_blank" rel="external">处理复杂手势</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>IE浏览器的事件不是复习的重点</p>
</blockquote>
<p>事件是JavaScript与HTML进行交互的一个纽带，理解事件可以更好的处理Web应用程序，现在的浏览器中主要支持两种事件流：</p>
<ul>
<li>事件冒泡</li>]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript五之面向对象的程序设计]]></title>
    <link href="http://lcepy.github.io/2015/01/26/%E5%A4%8D%E4%B9%A0JavaScript%E4%BA%94%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://lcepy.github.io/2015/01/26/复习JavaScript五之面向对象的程序设计/</id>
    <published>2015-01-26T06:52:39.000Z</published>
    <updated>2015-01-27T10:04:38.000Z</updated>
    <content type="html"><![CDATA[<p>面向对象的语言有一个非常明显的标志：类，通过类来创建任意多个具有相同属性和方法的对象，可惜的是Js里没有这样的概念。</p>
<p>但是Js有一个特性：一切皆是对象。</p>
<p>聪明的开发者通过这些特性进行摸索，于是迂回发明了一些程序设计，以便更好的组织代码结构。</p>
<h3 id="工厂模式">工厂模式</h3>
<p>主要是用来解决有多个相同属性和方法的对象的问题，可以用函数来封装特定的接口来实现</p>
<pre><code><span class="keyword">var</span> computer = <span class="function"><span class="keyword">function</span><span class="params">(name,version)</span></span>{
    <span class="keyword">return</span> {
        <span class="string">'name'</span>:name,
        <span class="string">'version'</span>:version,
        <span class="string">'showMessage'</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            alert(<span class="keyword">this</span>.name);
        }
    }
}
<span class="keyword">var</span> test = computer(<span class="string">'apple'</span>,<span class="string">'11.1'</span>);
test.showMessage();
</code></pre><h3 id="构造函数模式">构造函数模式</h3>
<p>我们知道像原生的构造函数，比如Object，Array等，它们是在运行时自动出现在执行环境中的。因此，为了模仿它，这里也可以通过一个普通的函数，并且new出一个对象，这样就成为了自定义的构造函数，也可以为他们添加自定义的属性和方法。</p>
<p>但是这样的构造函数有一个缺陷，就是每个方法都会在每个实例上创建一次，因为每次创建都需要分配内存空间，但是有时候这样的特性还是有用的，主要是要控制它们，在不使用的时候释放内存。</p>
<pre><code><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span><span class="params">(name,version)</span></span>{
    <span class="keyword">this</span>.name = name;
    <span class="keyword">this</span>.version = version;
    <span class="keyword">this</span>.showMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        alert(<span class="keyword">this</span>.name);
    }
}

<span class="keyword">var</span> apple = <span class="keyword">new</span> Computer(<span class="string">'apple'</span>,<span class="number">2014</span>);
<span class="keyword">var</span> dell = <span class="keyword">new</span> Computer(<span class="string">'dell'</span>,<span class="number">2010</span>);
apple.showMessage();
dell.showMessage();
</code></pre><p>像apple，dell是通过Computer实例化出来的不同的对象，但是它们的constructor都是指向Computer的。这里也可以使用instanceof来对（对象）进行检测。</p>
<p>在书写上构造函数跟其他函数是没有什么区别的，主要的区别还是在使用上，构造函数需要使用new操作符。</p>
<p>其实这样的书写，已经跟类没有什么区别了，表面上来看，而构造函数我个人更倾向于一个类的某个静态方法。</p>
<h3 id="原型模式">原型模式</h3>
<p>说到原型模式就不得不提一提关于指针的问题，因为每一个函数都有一个prototype属性，而这个属性是一个指针，指向一个对象。</p>
<p><strong>C语言描述指针，这个在iOS开发中非常重要</strong></p>
<p>比如我先定义一个int类型的指针变量和一个普通的int类型数据，然后给指针变量赋值。</p>
<pre><code><span class="keyword">int</span> *<span class="keyword">p</span>;
<span class="keyword">int</span> <span class="keyword">pp</span> = <span class="number">123</span>;
<span class="keyword">p</span> = &amp;<span class="keyword">pp</span>;
*<span class="keyword">p</span> = <span class="number">999</span>;
<span class="built_in">printf</span>(<span class="string">'%d'</span>,<span class="keyword">pp</span>);
</code></pre><p>*是一个特殊符号用于标明它是一个指针变量。</p>
<p>&amp;是地址符</p>
<p>分析这个就要说到栈内存和堆内存了，比如*p在栈内存中分配了一个地址假设是ff22x0，它还没有空间。而pp存在一个地址ff23x0，并且分配了一个空间存储着123，这个地址是指向这个空间的。</p>
<p>p = &amp;pp 这样的赋值操作，也就是把ff23x0取出来，并且给p分配一个空间把ff23x0存储进去，并且ff22x0指向这个空间。</p>
<p>*p = 999 从这里就可以看出来p操作的是地址，而这个地址不就是ff23x0么，于是pp成了999。</p>
<p>所谓的指针也就是存储着地址的变量。</p>
<p>回到原型上，如果每一个函数中的 prototype属性都是一个指针，实际上它只是一个地址引用着一个空间，而这个空间正是我们写的xxx.prototype.xxx = function(){}这样的代码在运行时分配的空间。那么可见，使用原型的好处是空间只分配一次，大家都是共享的，因为它是指针。</p>
<p>先看一个例子</p>
<pre><code><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    <span class="keyword">this</span>.name = name;
}
Computer.prototype.showMessage = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    alert(name);
}

<span class="keyword">var</span> apple = <span class="keyword">new</span> Computer(<span class="string">'apple'</span>);
<span class="keyword">var</span> dell = <span class="keyword">new</span> Computer(<span class="string">'dell'</span>);
Computer.prototype.isPrototypeOf(apple);
</code></pre><p>在解释这个原型链之前，还要明白Js的一个特性，就是如果自身不存在，它会沿着原型往上查找。它的原理稍微有些绕，Computer自身的prototype是指向它自身的原型对象的，而每一个函数又有一个constructor指向它自身，prototype.constructor又指向它自身。于是Computer的两个实例apple，dell内部有一个<strong>proto</strong>属性是指向Computer.prototype的，最后的结果是它们可以使用showMessage方法。</p>
<p>当然它们还有一个搜索原则，比如在调用showMessage的时候，引擎先问apple自身有showMessage吗？“没有”，继续搜索，apple的原型有吗，“有”，调用。所以从这里可以看出，this.showMessage是会覆盖prototype.showMessage的。</p>
<p>另外还可以使用isPrototypeOf来检测一个对象是否在另一个对象的原型链上，上述的代码返回的是true。</p>
<pre><code>apple.hasOwnProperty(<span class="string">'name'</span>)

apple.hasOwnProperty(<span class="string">'showMessage'</span>)
</code></pre><p>使用hasOwnProperty来检测到底是对象属性还是原型属性，使用this创建的属性是一个对象属性。<br><a id="more"></a></p>
<p>从上面可以看出来原型链的好处，但是它也不是万能的，正因为指针的存在，对于某些引用类型来说这个就非常不好了，我需要保持原对象属性值是每一个对象特有的，而不是共享的，于是把之前的构造函数与原型组合起来，也就解决了这样的问题。</p>
<pre><code><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    <span class="keyword">this</span>.name = name;
}
Computer.prototype.showMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    alert(<span class="keyword">this</span>.name);
}

<span class="keyword">var</span> apple = <span class="keyword">new</span> Computer(<span class="string">'apple'</span>);
apple.showMessage();
</code></pre><p>这样的结果是在对象中都会创建一份属于自己的属性，而方法则是共享的。</p>
<p><strong>动态原型模式</strong></p>
<p>有时候遇到某些问题需要动态添加原型，但是实例中是不能添加的，所以绕来一下，在初始化构造函数中添加。</p>
<pre><code><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.showMessage !== <span class="string">'function'</span>){
        Computer.prototype.showMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{

        }
    }
}
</code></pre><p>只要初始化了一次，以后就不用修改了。</p>
<h3 id="寄生构造函数模式">寄生构造函数模式</h3>
<p>这种模式的原理就是在一个函数中封装需要创建对象的代码，然后返回它。</p>
<pre><code><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    <span class="keyword">return</span> {
        <span class="string">'name'</span>:name
    }
}
<span class="keyword">var</span> g = <span class="keyword">new</span> test(<span class="string">'apple'</span>);
<span class="keyword">var</span> f = de(<span class="string">'dell'</span>);
</code></pre><p>看起来它跟工厂模式还是很像的，</p>
<h3 id="稳妥模式">稳妥模式</h3>
<p>这种模式主要是在解决需要安全的环境中使用，一般来说一个类如果不提供getter，setter方法，是不允许直接访问和修改的。</p>
<pre><code><span class="keyword">var</span> computer = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    <span class="keyword">var</span> _name = name;
    <span class="keyword">return</span> {
        <span class="string">'getter'</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            <span class="keyword">return</span> _name;
        },
        <span class="string">'setter'</span>:<span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
            _name = name;
        }
    }
}
</code></pre><p>这样的方式可以保证属性或者说是数据的安全性，不允许直接随便修改，如果不提供setter方法的话，压根就不允许。</p>
<h3 id="继承">继承</h3>
<p>谈到面向对象，那么就不能不谈谈继承的问题了，而在Js中主要是将原型作为实现继承的主要思路。</p>
<pre><code><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    <span class="comment">//this.name = name;</span>
}
Computer.prototype.show = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    alert(<span class="string">'computer'</span>)
}

<span class="keyword">var</span> Apple = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{

}
Apple.prototype = <span class="keyword">new</span> Computer();
Apple.prototype.hide = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{}
Apple.prototype.show = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    alert(<span class="string">'apple'</span>)
}
<span class="keyword">var</span> apple = <span class="keyword">new</span> Apple();
apple.show();
alert(apple <span class="keyword">instanceof</span> Computer);
</code></pre><p>使用这样的方式，实际上是从Computer的实例中先借它的prototype中所有的方法，但是这里会存在几个问题。</p>
<ul>
<li>如果Computer中需要传入参数，比如name，借的时候我根本不知道要传入什么参数。</li>
<li>在Apple中如果要继续给原型添加方法，那么就不能使用字面量的形式了，它会覆盖掉</li>
<li>如果要重写父类中的方法必须要在借prototype之后</li>
<li>那么如何确定原型和实例的关系？貌似用instanceof和isPrototypeOf都会返回true</li>
</ul>
<p><strong>解决问题一如何传入参数</strong></p>
<p>我们知道Js中有两个方法可以改变函数的上下文，apply和call，实际上类就是函数，这里既借属性也借prototype，不就可以解决这样的问题了么。</p>
<pre><code><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    <span class="comment">//this.name = name;</span>
}
Computer.prototype.show = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    alert(<span class="string">'computer'</span>)
}

<span class="keyword">var</span> Apple = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    Computer.call(<span class="keyword">this</span>,name);
}
Apple.prototype = <span class="keyword">new</span> Computer();

<span class="keyword">var</span> apple = <span class="keyword">new</span> Apple(<span class="string">'apple'</span>);
alert(apple <span class="keyword">instanceof</span> Apple);
alert(apple <span class="keyword">instanceof</span> Computer);
</code></pre><p>在运行时先借prototype，然后再借子类的this，但是这个也有个问题，那就是会调用两次父类。</p>
<p><strong>继承的技巧</strong></p>
<p>还有一种继承是生成一个临时对象，然后临时对象借需要继承的父类的prototype。</p>
<pre><code><span class="keyword">var</span> extend = <span class="function"><span class="keyword">function</span><span class="params">(o)</span></span>{
    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{}
    F.prototype = o;
    <span class="keyword">return</span> <span class="keyword">new</span> F();
}

<span class="keyword">var</span> <span class="keyword">parent</span> = {
    <span class="string">'name'</span>:[<span class="string">'lcepy'</span>]
}

<span class="keyword">var</span> game = extend(<span class="keyword">parent</span>);
game.name.push(<span class="string">'wow'</span>);

<span class="keyword">var</span> _game = extend(<span class="keyword">parent</span>);
_game.name.push(<span class="string">'view'</span>);
</code></pre><p>使用这样的方式有个很大的缺陷，那就是不要借属性之类的数据，因为它们是共享的，这是一个浅拷贝，还是因为指针的原因。不过要是继承方法，这种方式很方便。</p>
<p>还有一种方式跟上述类似，主要是封装了一层函数，用来返回对象。</p>
<h3 id="寄生组合继承">寄生组合继承</h3>
<p>这样的方式主要解决的问题是调用两次父类的问题，避免额外的借来的属性或方法。想想看第一次Computer.call(this)，借来了this上的属性或方法，第二次Apple.prototype = new Computer()，又借来了this上的属性或方法，这里的初衷是想借原型，没办法这个是实例，所以该借的不该借的都借来了。那么要避免这样的问题，就要解决继承属性的继承属性，继承原型的继承原型，也不乱借。</p>
<pre><code><span class="keyword">var</span> extendPrototype = <span class="function"><span class="keyword">function</span><span class="params">(sub,supers)</span></span>{
    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{}
    F.prototype = supers.prototype;
    <span class="keyword">var</span> _f = <span class="keyword">new</span> F();
    _f.constructor = sub;
    sub.prototype = _f;
}
<span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    <span class="keyword">this</span>.name = name;
}
Computer.prototype.show = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    alert(<span class="keyword">this</span>.name);
}

<span class="keyword">var</span> Apple = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    Computer.call(<span class="keyword">this</span>,name);
}
extendPrototype(Apple,Computer);

<span class="keyword">var</span> apple = <span class="keyword">new</span> Apple(<span class="string">'apple'</span>);
apple.show();
</code></pre><p>第一步把supers的原型赋值给F，第二步创建F的实例，第三步把_f实例的constructor属性修改成子类，第四步把_f实例赋值给子类的prototype。</p>
<p>这样的话就是不该借的也不会继承了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>面向对象的语言有一个非常明显的标志：类，通过类来创建任意多个具有相同属性和方法的对象，可惜的是Js里没有这样的概念。</p>
<p>但是Js有一个特性：一切皆是对象。</p>
<p>聪明的开发者通过这些特性进行摸索，于是迂回发明了一些程序设计，以便更好的组织代码结构。</p>
<h3 id="工厂模式">工厂模式</h3>
<p>主要是用来解决有多个相同属性和方法的对象的问题，可以用函数来封装特定的接口来实现</p>
<pre><code><span class="keyword">var</span> computer = <span class="function"><span class="keyword">function</span><span class="params">(name,version)</span></span>{
    <span class="keyword">return</span> {
        <span class="string">'name'</span>:name,
        <span class="string">'version'</span>:version,
        <span class="string">'showMessage'</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            alert(<span class="keyword">this</span>.name);
        }
    }
}
<span class="keyword">var</span> test = computer(<span class="string">'apple'</span>,<span class="string">'11.1'</span>);
test.showMessage();
</code></pre><h3 id="构造函数模式">构造函数模式</h3>
<p>我们知道像原生的构造函数，比如Object，Array等，它们是在运行时自动出现在执行环境中的。因此，为了模仿它，这里也可以通过一个普通的函数，并且new出一个对象，这样就成为了自定义的构造函数，也可以为他们添加自定义的属性和方法。</p>
<p>但是这样的构造函数有一个缺陷，就是每个方法都会在每个实例上创建一次，因为每次创建都需要分配内存空间，但是有时候这样的特性还是有用的，主要是要控制它们，在不使用的时候释放内存。</p>
<pre><code><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span><span class="params">(name,version)</span></span>{
    <span class="keyword">this</span>.name = name;
    <span class="keyword">this</span>.version = version;
    <span class="keyword">this</span>.showMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        alert(<span class="keyword">this</span>.name);
    }
}

<span class="keyword">var</span> apple = <span class="keyword">new</span> Computer(<span class="string">'apple'</span>,<span class="number">2014</span>);
<span class="keyword">var</span> dell = <span class="keyword">new</span> Computer(<span class="string">'dell'</span>,<span class="number">2010</span>);
apple.showMessage();
dell.showMessage();
</code></pre><p>像apple，dell是通过Computer实例化出来的不同的对象，但是它们的constructor都是指向Computer的。这里也可以使用instanceof来对（对象）进行检测。</p>
<p>在书写上构造函数跟其他函数是没有什么区别的，主要的区别还是在使用上，构造函数需要使用new操作符。</p>
<p>其实这样的书写，已经跟类没有什么区别了，表面上来看，而构造函数我个人更倾向于一个类的某个静态方法。</p>
<h3 id="原型模式">原型模式</h3>
<p>说到原型模式就不得不提一提关于指针的问题，因为每一个函数都有一个prototype属性，而这个属性是一个指针，指向一个对象。</p>
<p><strong>C语言描述指针，这个在iOS开发中非常重要</strong></p>
<p>比如我先定义一个int类型的指针变量和一个普通的int类型数据，然后给指针变量赋值。</p>
<pre><code><span class="keyword">int</span> *<span class="keyword">p</span>;
<span class="keyword">int</span> <span class="keyword">pp</span> = <span class="number">123</span>;
<span class="keyword">p</span> = &amp;<span class="keyword">pp</span>;
*<span class="keyword">p</span> = <span class="number">999</span>;
<span class="built_in">printf</span>(<span class="string">'%d'</span>,<span class="keyword">pp</span>);
</code></pre><p>*是一个特殊符号用于标明它是一个指针变量。</p>
<p>&amp;是地址符</p>
<p>分析这个就要说到栈内存和堆内存了，比如*p在栈内存中分配了一个地址假设是ff22x0，它还没有空间。而pp存在一个地址ff23x0，并且分配了一个空间存储着123，这个地址是指向这个空间的。</p>
<p>p = &amp;pp 这样的赋值操作，也就是把ff23x0取出来，并且给p分配一个空间把ff23x0存储进去，并且ff22x0指向这个空间。</p>
<p>*p = 999 从这里就可以看出来p操作的是地址，而这个地址不就是ff23x0么，于是pp成了999。</p>
<p>所谓的指针也就是存储着地址的变量。</p>
<p>回到原型上，如果每一个函数中的 prototype属性都是一个指针，实际上它只是一个地址引用着一个空间，而这个空间正是我们写的xxx.prototype.xxx = function(){}这样的代码在运行时分配的空间。那么可见，使用原型的好处是空间只分配一次，大家都是共享的，因为它是指针。</p>
<p>先看一个例子</p>
<pre><code><span class="keyword">var</span> Computer = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    <span class="keyword">this</span>.name = name;
}
Computer.prototype.showMessage = <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
    alert(name);
}

<span class="keyword">var</span> apple = <span class="keyword">new</span> Computer(<span class="string">'apple'</span>);
<span class="keyword">var</span> dell = <span class="keyword">new</span> Computer(<span class="string">'dell'</span>);
Computer.prototype.isPrototypeOf(apple);
</code></pre><p>在解释这个原型链之前，还要明白Js的一个特性，就是如果自身不存在，它会沿着原型往上查找。它的原理稍微有些绕，Computer自身的prototype是指向它自身的原型对象的，而每一个函数又有一个constructor指向它自身，prototype.constructor又指向它自身。于是Computer的两个实例apple，dell内部有一个<strong>proto</strong>属性是指向Computer.prototype的，最后的结果是它们可以使用showMessage方法。</p>
<p>当然它们还有一个搜索原则，比如在调用showMessage的时候，引擎先问apple自身有showMessage吗？“没有”，继续搜索，apple的原型有吗，“有”，调用。所以从这里可以看出，this.showMessage是会覆盖prototype.showMessage的。</p>
<p>另外还可以使用isPrototypeOf来检测一个对象是否在另一个对象的原型链上，上述的代码返回的是true。</p>
<pre><code>apple.hasOwnProperty(<span class="string">'name'</span>)

apple.hasOwnProperty(<span class="string">'showMessage'</span>)
</code></pre><p>使用hasOwnProperty来检测到底是对象属性还是原型属性，使用this创建的属性是一个对象属性。<br>]]>
    
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript四之Object]]></title>
    <link href="http://lcepy.github.io/2015/01/25/%E5%A4%8D%E4%B9%A0JavaScript%E5%9B%9B%E4%B9%8BObject/"/>
    <id>http://lcepy.github.io/2015/01/25/复习JavaScript四之Object/</id>
    <published>2015-01-25T13:42:07.000Z</published>
    <updated>2015-01-26T06:27:02.000Z</updated>
    <content type="html"><![CDATA[<p>JavaScript的所有对象都衍生于Object对象，所有对象都继承了Object.prototype上的方法和属性，虽然它们可能会被覆盖，熟悉它对于编程能起到很大的作用，也能比较深刻的了解JavaScript这门语言。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="external">可参考的资料-Object</a></p>
<p>创建一个对象可以使用new，也可以使用快速创建的方式：</p>
<pre><code><span class="keyword">var</span> _<span class="class"><span class="keyword">object</span> = </span>{};
</code></pre><p>_object对象中就可以使用Object.prototype中所有的方法和属性，虽然看起来它是空的。说到这里在编程中常常有一个非常有用的需求，如何判断一个对象是空对象。</p>
<p>这是zepto中的判断一个对象是否是空对象，常常使用：</p>
<pre><code>$.isEmptyObject = <span class="function"><span class="keyword">function</span><span class="params">(obj)</span> </span>{
    <span class="keyword">var</span> name
    <span class="keyword">for</span> (name <span class="keyword">in</span> obj) <span class="keyword">return</span> <span class="literal">false</span>
    <span class="keyword">return</span> <span class="literal">true</span>
  }
</code></pre><p>也顺便看了下jQuery原理是一模一样的：</p>
<pre><code>isEmptyObject: <span class="function"><span class="keyword">function</span><span class="params">( obj )</span> </span>{
    <span class="keyword">var</span> name;
    <span class="keyword">for</span> ( name <span class="keyword">in</span> obj ) {
        <span class="keyword">return</span> <span class="literal">false</span>;
    }
    <span class="keyword">return</span> <span class="literal">true</span>;
}
</code></pre><p>使用in操作符来实现，它不会遍历到父原型链。</p>
<p>constructor返回一个指向创建了该对象的函数引用，这个东西主要是可以用来识别（类）到底是指向哪里的。</p>
<p>defineProperty直接在一个对象上定义一个新属性，非常适合用于动态构建，传入三个参数［动态添加对象的目标对象，需要定义或被修改的属性名，需要定义的对象］，在第三个参数中可以有些属性来表示是否继承（<strong>proto</strong>），要不要定义get，set方法，enumerable是否可枚举。</p>
<p>defineProperties跟上述defineProperty一样，但是它可以添加多个。</p>
<p>getOwnPropertyNames返回一个由指定对象的所有属性组成的数组</p>
<p>keys返回一个数组包括对象所有的属性（可枚举）</p>
<blockquote>
<p>keys是经常会用到的一个属性，它只能包可枚举的，如果想获取一个对象的所有属性包括不枚举的，那么使用getOwnPropertyNames。</p>
</blockquote>
<p>hasOwnProperty用于判断某个对象是否包含有自身的属性，这个方法常常用于检测对象中的属性是否存在，它只检测自身，对于继承过来的都是false，这一点是非常重要的理解。</p>
<p>isPrototypeOf 用于检测一个对象是否在另一个对象的原型链上，比如有两个对象是互相交互的，常常会使用它来进行检测。</p>
<p>propertyIsEnumerable这个方法也比较重要，返回一个布尔值，检测一个对象的自身属性是否可以枚举</p>
<blockquote>
<p>可枚举的理解，也就是对象的属性可枚举，它的属性值不可以修改，但是在Js中它有自己的定义，引擎内部看不见的该属性的[[Enumerable]]特性为true，那么就是可枚举的。基本上把一个普通对象可以看做是一个枚举类型，比如var color = {‘red’:1}，red是可以修改的，但是red是可枚举的，但是如果是继承过来的属性，propertyIsEnumerable是返回false的，它还有一个特点，就是自身。</p>
</blockquote>
<p>如果要定义不可枚举的属性，那就要使用defineProperty方法了，目前不能用对象直接量或者构造函数定义出来。</p>
<pre><code><span class="keyword">var</span> obj = {name: <span class="string">'jack'</span>, age:<span class="number">23</span>}
Object.defineProperty(obj, <span class="string">'id'</span>, {<span class="keyword">value</span> : <span class="string">'123'</span>, enumerable : <span class="keyword">false</span> });
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>JavaScript的所有对象都衍生于Object对象，所有对象都继承了Object.prototype上的方法和属性，虽然它们可能会被覆盖，熟悉它对于编程能起到很大的作用，也能比较深刻的了解JavaScript这门语言。</p>
<p><a href="https://d]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript三之BOM]]></title>
    <link href="http://lcepy.github.io/2015/01/24/%E5%A4%8D%E4%B9%A0JavaScript%E4%B8%89%E4%B9%8BBOM/"/>
    <id>http://lcepy.github.io/2015/01/24/复习JavaScript三之BOM/</id>
    <published>2015-01-24T14:14:04.000Z</published>
    <updated>2015-01-25T09:48:38.000Z</updated>
    <content type="html"><![CDATA[<p>BOM提供了很多对象，它的核心是window，表示它是浏览器的一个实例，在ECMAScript中又是Global对象。它提供了很多访问浏览器的功能，这些功能与网页无关，所以缺少事实标准的BOM既有意思又有些坑。复习它，主要是复习几个比较有用的对象，其他可以了解一二。</p>
<h3 id="location">location</h3>
<blockquote>
<p>算起来它是我用的最多的一个对象</p>
</blockquote>
<p>它提供了当前窗口加载的页面有关的信息，也对URL进行了片段分解，既是window的属性，也是document的属性。</p>
<ul>
<li>hash 返回URL的散列（#号后面跟着的零个或多个值）</li>
<li>host 返回服务器名称和端口号</li>
<li>hostname 返回不带端口号的服务器名称</li>
<li>href 返回当前加载页面的完整URL</li>
<li>pathname 返回URL中的目录或文件名</li>
<li>port 返回URL中指定的端口号</li>
<li>protocol 返回页面使用的协议</li>
<li>search 返回URL中的查询字符串，它以问好（?）开头</li>
</ul>
<p>上述的属性基本上都可以直接使用，search除外，它返回的是一个完整的查询字符串，没有办法访问其中的每个查询字符串参数，还需要额外的进行处理。</p>
<p>一般来说根据它的特点，?开头&amp;拼接，key=value的形式来展现，最好是key和value都要decodeURIComponent一下。</p>
<p>在location中除了上述的属性外，还有一些比较有用的方法和技巧，主要是用来控制页面跳转的问题。</p>
<ul>
<li>assign方法接收一个参数，表示立即打开一个新的页面并在历史纪录中生成一条记录，它的效果等同于window.location.href = ‘’或者location.href = ‘’</li>
<li>修改location对象的属性比如href，hash，search等也可以来改变URL</li>
<li>replace方法接收一个参数，既跳转到新的URL上，并且不会在历史纪录中增加一条新的纪录</li>
<li>reload表示重新加载当前页面</li>
</ul>
<a id="more"></a>

<h3 id="处理框架，设置时间，open，窗口位置，窗口大小">处理框架，设置时间，open，窗口位置，窗口大小</h3>
<blockquote>
<p>open现在估计没人会用了</p>
</blockquote>
<p>如果页面中包含框架，则每个框架都有自己的window对象，可以使用frames来获取，比如frames[0]或者frames[‘name’]。这里还要了解的是top，parent，对于这些只要理解的层级关系，每一个指向都是会非常清楚的。</p>
<p>在做某些动画效果的时候，主要是针对PC端，可能会使用到窗口位置，窗口大小的属性来进行计算，比如innerWidth，innerHeight，outerWidth，outerHeight，获取到这些尺寸，一般会与当前div的高宽进行减法来获取精准的位置。</p>
<p>setTimeout和setInterval是进行时间调度的函数，我们知道Js是单线程的，但是可以使用这个在特定的时间范围内执行代码，前面一个setTimeout是在指定的时间内执行（只执行一次），后面的setInterval则是以指定的时间重复执行（N次）</p>
<h3 id="navigator">navigator</h3>
<p>用这个一般是在统计用户浏览器版本，操作系统等场景下才用的上，偶尔有几个会比较实用。</p>
<ul>
<li>cookieEnabled 判断cookie是否开启</li>
<li>userAgent 浏览器用户代理字符串</li>
<li>plugins数组 主要是用来检测浏览器安装的插件</li>
</ul>
<h3 id="screen">screen</h3>
<p>在Js中有几个对象在编程里真用不上，这个就是其中之一。它主要是用来表明客户端的能力，比如显示器的信息，像素，高，宽等。</p>
<h3 id="history">history</h3>
<p>history对象保存着用户上网的历史纪录，但是这个也是非常不常用。主要是用go方法，back方法，forward方法。</p>
<blockquote>
<p>说实话，后面三个navigator,screen,history基本上很废材</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>BOM提供了很多对象，它的核心是window，表示它是浏览器的一个实例，在ECMAScript中又是Global对象。它提供了很多访问浏览器的功能，这些功能与网页无关，所以缺少事实标准的BOM既有意思又有些坑。复习它，主要是复习几个比较有用的对象，其他可以了解一二。</p>
<h3 id="location">location</h3>
<blockquote>
<p>算起来它是我用的最多的一个对象</p>
</blockquote>
<p>它提供了当前窗口加载的页面有关的信息，也对URL进行了片段分解，既是window的属性，也是document的属性。</p>
<ul>
<li>hash 返回URL的散列（#号后面跟着的零个或多个值）</li>
<li>host 返回服务器名称和端口号</li>
<li>hostname 返回不带端口号的服务器名称</li>
<li>href 返回当前加载页面的完整URL</li>
<li>pathname 返回URL中的目录或文件名</li>
<li>port 返回URL中指定的端口号</li>
<li>protocol 返回页面使用的协议</li>
<li>search 返回URL中的查询字符串，它以问好（?）开头</li>
</ul>
<p>上述的属性基本上都可以直接使用，search除外，它返回的是一个完整的查询字符串，没有办法访问其中的每个查询字符串参数，还需要额外的进行处理。</p>
<p>一般来说根据它的特点，?开头&amp;拼接，key=value的形式来展现，最好是key和value都要decodeURIComponent一下。</p>
<p>在location中除了上述的属性外，还有一些比较有用的方法和技巧，主要是用来控制页面跳转的问题。</p>
<ul>
<li>assign方法接收一个参数，表示立即打开一个新的页面并在历史纪录中生成一条记录，它的效果等同于window.location.href = ‘’或者location.href = ‘’</li>
<li>修改location对象的属性比如href，hash，search等也可以来改变URL</li>
<li>replace方法接收一个参数，既跳转到新的URL上，并且不会在历史纪录中增加一条新的纪录</li>
<li>reload表示重新加载当前页面</li>
</ul>
]]>
    
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如果宅*纪念]]></title>
    <link href="http://lcepy.github.io/2015/01/23/%E5%A6%82%E6%9E%9C%E5%AE%85-%E7%BA%AA%E5%BF%B5/"/>
    <id>http://lcepy.github.io/2015/01/23/如果宅-纪念/</id>
    <published>2015-01-23T15:37:26.000Z</published>
    <updated>2015-01-23T18:34:37.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://websources.qiniudn.com/img/mywow.png" alt="青春独醉"></p>
<p>魔兽世界练到100级之后，我竟然一点再玩的想法也没有了，不知道是对游戏不感兴趣了呢，还是自己老了。细数下来，八个角色，只有一个练到了100级，其他的再也不想登陆了。</p>
<p>今天回到家里看见了四年前买的一本书《如果＊宅》，花了一天的时间把它读完了，我才知道我的魔兽世界跟他们一样，一去不可复返了。</p>
<p>2006年的夏天在安江买电脑报里面送了一张体验卡，第一感觉是“这个游戏真牛逼”，比之前玩的传奇要“牛逼”几个档次，当时还是九城，超级大的一个板块，在介绍一个全新的世界。当然，进入游戏断断续续的玩了段时间，高考了。</p>
<p>2008年重新注册了一个账号，在三区天空之墙安家落户了，玩的是法师。那时候YY刚刚流行起来，走在TBC的末期。没有牛逼的人，但是有个牛逼的公会，貌似我忘记发生了什么，2010年的夏天，我又AFKl了。好像是刷马桶刷了一年半，切蛋蛋切了两年多，哈哈，公会的战士，盗贼人手一把蛋刀，我的法师也有了凤凰。让我印象很深刻的是，半夜了，很多人一起在YY聊天，然后在泰卡罗森林的那个鸦人巢穴打生命，刷布，刷材料，那里是要有飞行坐骑才能到，而且还是刷虚空鳐声望的地方。</p>
<p>说起来TBC是我玩的最久，也是最开心的一个版本，感觉每天都很有精力和激情去做每一件事情，比如刷虚空龙，刷乌鸦，刷材料，在拍卖行倒卖物资，代刷破碎，代刷祖尔法拉克，代刷STSM，现在想起来，我也是蛮拼的了。</p>
<p>2013年熊猫人版本，我又重新建了个角色SS，玩到了90级。后续，就成了刷单机，各种随机团，随机副本，玩了玩很没味道，聊天的人都没有了。</p>
<p>2014年德拉若版本练到了100级，这下更好，出了个要塞系统，彻底单机了。</p>
<p>游戏一路在变，人也是一样，发现自己再也没法融入这个世界的圈子了，27岁。</p>
<p>删除客户端，AFK。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://websources.qiniudn.com/img/mywow.png" alt="青春独醉"></p>
<p>魔兽世界练到100级之后，我竟然一点再玩的想法也没有了，不知道是对游戏不感兴趣了呢，还是自己老了。细数下来，八个角色，只有一个]]>
    </summary>
    
      <category term="生活" scheme="http://lcepy.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript二之跨域]]></title>
    <link href="http://lcepy.github.io/2015/01/23/%E5%A4%8D%E4%B9%A0JavaScript%E4%BA%8C%E4%B9%8B%E8%B7%A8%E5%9F%9F/"/>
    <id>http://lcepy.github.io/2015/01/23/复习JavaScript二之跨域/</id>
    <published>2015-01-23T14:17:20.000Z</published>
    <updated>2015-01-23T18:29:07.000Z</updated>
    <content type="html"><![CDATA[<p>客户端Js出于安全的考虑，不允许跨域调用其他页面的对象，正是因为这样才给Ajax带来了很多不方便的地方。跨域最简单的理解就是因为Js同源策略的存在，比如a.com域名下的Js不能访问b.com下的Js对象。</p>
<ul>
<li>协议端口没法跨，客户端</li>
<li>在跨域上，域仅仅是通过首部来识别，window.location.protocol +window.location.host</li>
</ul>
<h3 id="利用document-domain和iframe来设置">利用document.domain和iframe来设置</h3>
<p>对于主域相同而子域名不同的情况，可以通过document.domain来处理，比如www.163.com/index.html和wow.163.com/wower.html，在这两个文件中分别加入document.domain = “163.com”，然后在index.html页面中创建一个iframe引入wower.html，获取iframe的contentDocument，这样这两个js就可以交互了。</p>
<p>index.html</p>
<pre><code><span class="built_in">document</span>.domain = <span class="string">'163.com'</span>;
<span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);
iframe.src = <span class="string">'http://wow.163.com/wower.html'</span>;
iframe.style.display = <span class="string">'none'</span>; 
<span class="built_in">document</span>.body.appendChild(iframe);
iframe.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> doc = iframe.contentDocument || iframe.contentWindow.document;
    <span class="comment">//现在可以通过doc来操作wower.html中的js对象了</span>
}
</code></pre><p>wower.html</p>
<pre><code><span class="built_in">document</span>.domain = <span class="string">'163.com'</span>;
</code></pre><p>使用这样的方式来实现的跨域是有限制的</p>
<ul>
<li>主域名必须是同一个</li>
<li>安全性引发的问题，比如第一个页面出现了安全问题，在后面的页面也会出现</li>
<li>iframe引用过多的话，每一个iframe都必须设置document.domain，比较琐碎</li>
</ul>
<blockquote>
<p>偶尔可以使用一下</p>
</blockquote>
<h3 id="利用window-name">利用window.name</h3>
<p>稍微有些绕，但是数据量比较大，也比较安全</p>
<ul>
<li>wow.163.com/app.html 应用所在的页面</li>
<li>wow.163.com/empty.html 中间代理页面，搞个空的即可，但是必须在主域名下</li>
<li>www.qq.com/data.html 需要交互的数据页面</li>
</ul>
<p>在data.html页面中</p>
<pre><code><span class="attribute">window.name </span>=<span class="string"> 123;</span>
</code></pre><p>app.html页面中创建一个隐藏的iframe，它的scr指向data.html，在onload事件中，把当前iframe的contentWindow.loaction修改成empty.html，当再次onload时就可以通过contentWindow.name来获取到123了。</p>
<blockquote>
<p>偶尔使用</p>
</blockquote>
<h3 id="利用iframe和location-hash">利用iframe和location.hash</h3>
<p>利用这种方式，说实话（不建议），比较绕，而且数据量小，直接暴露在URL上。它的原理主要是这样的，假设wow.163.com/index.html页面，wow.163.com/empty.html（空的，什么内容都没有），需要交换数据的页面在www.qq.com/a.html上。</p>
<p>在wow.163.com/index.html#（＃号就是我们要传递的数据），创建一个隐藏的iframe，hash值可以当参数传递给www.qq.com/a.html#()，在www.qq.com/a.html中可以获取到hash值，根据它进行处理，然后在www.qq.com/a.html页面中创建一个隐藏iframe，把处理的结果当hash值进行传递，给wow.163.com/empty.html#()这样，在同一个域名下，wow.163.com/empty.html中的js可以通过parent.parent.location.hash = self.location.hash来改变hash值，这样就达到了跨域的目的。</p>
<blockquote>
<p>不建议使用，坑爹的思路</p>
</blockquote>
<h3 id="JSONP">JSONP</h3>
<p>这种方式是目前开发时最常用的一种方式，利用动态创建script标签来实现跨域的目的，虽然浏览器有显示Js对象的访问，但是它没有限制Js文件的加载，任何域名下的Js文件都可以加载。</p>
<p>对客户端而言，文件的加载其实就是发送一次GET请求，在服务端实现时，也就是处理这次的GET请求，并且响应，参数可以通过?来带走，俗称一波流。</p>
<p>在客户端上对于script文件加载是否已经完毕的判断，IE是判断script标签的readystatechange属性，而其他浏览器是onload事件。</p>
<blockquote>
<p>突然感觉做移动端不考虑IE的兼容，果然是杠杠的，建议使用</p>
</blockquote>
<h3 id="HTML5_postMessage">HTML5 postMessage</h3>
<p>主要是利用window.postMessage来发送消息，监听window.message来获取消息，判断origin可以判断消息来源，data获取消息内容，soucre来引用发送方的window对象引用。</p>
<p>www.b.com/b.html发送消息给www.a.com/a.html</p>
<pre><code><span class="built_in">window</span>.postMessage(<span class="string">'hello'</span>,<span class="string">'www.a.com/a.html'</span>)
</code></pre><p>www.a.com/a.html获取消息</p>
<pre><code><span class="built_in">window</span>.addEventLister(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>{
    <span class="keyword">if</span>(event.origin === <span class="string">'http://b.com'</span>){
        <span class="comment">//处理</span>
    }
})
</code></pre><p>iframe的发送方式</p>
<pre><code>contentWindow.postMessage(<span class="string">'data'</span>,<span class="string">'b.com'</span>)
</code></pre><blockquote>
<p>话不多说，移动端这种跨域方式也很常用（建议推荐使用）</p>
</blockquote>
<h3 id="HTML5_跨域头_XMLHttpRequest2">HTML5 跨域头 XMLHttpRequest2</h3>
<p>如果是自己产品，又是做移动端可以使用，比上述任何方式都要方便，需要服务端支持响应时也要设置跨域头。</p>
<p>如果服务器响应此头，浏览器会检查此头，它的值表示请求内容所允许的域名，也就是如果是*号，表示所有域都可以访问，如果这里是a.com，表示除了同源外，只允许来自a.com域的访问。</p>
<pre><code>Access-<span class="keyword">Control</span>-Allow-Origin：＊
</code></pre><p>如果需要读取cookie则需要设置它</p>
<pre><code>Access-Control-Allow-Credentials:<span class="literal">true</span>
</code></pre><p>设置允许跨域的请求类型</p>
<pre><code>Access-Control-Allow-Method<span class="variable">s:POST</span>
</code></pre><blockquote>
<p>兼容性问题，某些版本的浏览器需要在open之后，设置xhr.withCredentials ＝ true;话不多说，建议推荐使用</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>客户端Js出于安全的考虑，不允许跨域调用其他页面的对象，正是因为这样才给Ajax带来了很多不方便的地方。跨域最简单的理解就是因为Js同源策略的存在，比如a.com域名下的Js不能访问b.com下的Js对象。</p>
<ul>
<li>协议端口没法跨，客户端</li>
<li]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复习JavaScript一之Ajax]]></title>
    <link href="http://lcepy.github.io/2015/01/23/%E5%A4%8D%E4%B9%A0JavaScript%E4%B8%80%E4%B9%8BAjax/"/>
    <id>http://lcepy.github.io/2015/01/23/复习JavaScript一之Ajax/</id>
    <published>2015-01-23T10:07:54.000Z</published>
    <updated>2015-01-23T14:12:26.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>IE8已上，支持现代XMLHttpRequest</p>
</blockquote>
<p>客户端Js与服务器进行网络交互必备的一个玩意，它不支持跨域，若要跨域还需要进行一些额外的处理。</p>
<pre><code><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();
</code></pre><p>在使用xhr对象时，要调用的第一个方法是open()，它接受三个参数［发送请求的类型，请求的URL，描述是否同步还是异步的布尔值］false同步，true异步。</p>
<p>关于Ajax同步异步的个人理解：</p>
<ul>
<li>同步，是用数据块的方式来传输的，在Js执行的表现上，当执行到这个Ajax请求时会等待它与服务器交互成功之后才能执行下面一行的代码，也就是阻塞。</li>
<li>异步，是用字节来传输的，它不等待是否成功，会执行之后的代码</li>
</ul>
<p>结束时需要调用xhr.send()，如果没有发送数据的主体，必须要null，做为发送参数。另外在接收到响应之前还可以调用abort()来取消异步请求（不建议调用它）</p>
<h3 id="HTTP状态验证">HTTP状态验证</h3>
<p>当收到响应后会自动填充xhr对象，它有几个比较重要的状态，我们必须要了解清楚与处理。</p>
<ul>
<li>responseText:作为响应主体返回的文本</li>
<li>responseXML:如果响应内容的类型是”text/xml”或者”application/xml”，这个属性中保存的就是XML的DOM文档</li>
<li>status：响应的HTTP状态</li>
<li>statusText：HTTP状态的说明</li>
<li>readyState：用于描述请求发送到完成的过程</li>
</ul>
<p>正常情况下需要检测status === 200 readyState === 4 这就表示responseText或者responseXML中已经填充了全部的数据可以提供给客户端使用了。</p>
<pre><code>1 开头的用于描述请求已经发送，需要请求者继续操作才能继续的状态
2 开头的用于描述请求已经成功
3 开头的用于描述成功，但是还需要继续操作
4 开头的用于描述客户端发送了什么数据导致服务器错误
5 开头的用于描述服务器错误（常见的如，服务端代码抛错了）
</code></pre><p>readyState状态</p>
<pre><code><span class="number">0</span> 未初始化，还没有调用<span class="built_in">open</span>方法
<span class="number">1</span> 已经调用<span class="built_in">open</span>方法，还没有调用<span class="built_in">send</span>方法
<span class="number">2</span> 已经调用<span class="built_in">send</span>方法，但是还没有接收到响应
<span class="number">3</span> 已经接收了部分数据
<span class="number">4</span> 已经接收了全部的数据
</code></pre><h3 id="xhr对象其他方法或事件">xhr对象其他方法或事件</h3>
<p>每一个请求和响应都会带有相应的HTTP头信息，其中对开发者是很有用的，而xhr对象提供了一个setRequestHeader方法来设置头信息，它必须在调用open方法之后并且在send方法之前。有设置，必须得有获取，xhr对象也提供了两个方法分别来获取，getResponseHeader传入一个头部字段名来获取，getAllResponseHeaders来获取全部的头信息。</p>
<p>onreadystatechange事件，每次刷新状态时，系统都会重新调用此事件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>IE8已上，支持现代XMLHttpRequest</p>
</blockquote>
<p>客户端Js与服务器进行网络交互必备的一个玩意，它不支持跨域，若要跨域还需要进行一些额外的处理。</p>
<pre><code><span class="ke]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动H5-HybridApp开发思路的一些总结]]></title>
    <link href="http://lcepy.github.io/2015/01/10/%E7%A7%BB%E5%8A%A8H5-HybridApp%E5%BC%80%E5%8F%91%E6%80%9D%E8%B7%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://lcepy.github.io/2015/01/10/移动H5-HybridApp开发思路的一些总结/</id>
    <published>2015-01-10T07:04:24.000Z</published>
    <updated>2015-01-10T08:31:57.000Z</updated>
    <content type="html"><![CDATA[<p>利用H5来开发移动app时，很大一部分的逻辑处理是在每一个视图的切换上，包括维护生命周期，释放内存，以及维护动画。我们在使用iOS时，基本上当前屏幕中内容显示的区域内就应该算是一个视图，当然H5版的app跟纯粹的iOS开发又有一些不同。</p>
<ul>
<li>H5版本的app是一个HTML页面，场景的切换基本上是切换内部的div容器，而当前浏览器内的框架则是它的window</li>
<li>H5版本的app还需要监听hashchange或者history，来维护每一个视图控制器js文件的加载，执行</li>
<li>每一个视图控制器需要维护它自身的生命周期，如创建，渲染视图，添加事件，销毁，以及离开当前视图时等一系列的生命周期</li>
<li>一个视图控制器对应一个视图，一个模型，视图控制器来控制模型的请求，视图的渲染，模型与视图之间互相不干扰</li>
<li>H5版本的app还需要维护一个NavigationController的头，用来控制内容区域内的视图控制器的转换以及它的动画</li>
<li>应用兼容iOS，安卓，WP手持设备的dom兼容库（zepto），以及手势，触摸事件的兼容处理</li>
<li>关于请求还需要维护本地存储与它之间的联系</li>
<li>在Hybrid中，要构建起与原生框架的交互桥梁，比如phoneGap</li>
<li>维护一个UI组件交互的库，比如一些常用的scoll，slider等</li>
</ul>
<p>从上述的一些总结中，可以看的出来要开发基于H5的移动端app，需要做的事情还是有很多的，浓缩的总结有三个方面：</p>
<blockquote>
<p>代码组织，MVC或者MVVM以及它们的生命周期与文件加载</p>
<p>DOM 触摸 手势兼容处理</p>
<p>与Native的交互</p>
</blockquote>
<p>在代码实现的思路上，这里都会使用一个栈来实现它。</p>
<ul>
<li>栈顶属于当前视图控制器</li>
<li>基栈则是根视图控制器</li>
</ul>
<a id="more"></a>

<h2 id="思路实现的假设">思路实现的假设</h2>
<p>每一个视图都会对应一个hash，可以监听window的hashchange事件来获取，而这个hash值做为一个唯一标识，用于map映射到对应的视图控制器实例上。</p>
<p>设计一个大的框架（page）根据功能或者业务划分，每个不同的业务需要使用不同的lcepy.github.io/page1/index.html  lcepy.github.io/page2/index.html，如果hash值为空，则默认为#index。这样的设计主要是考虑内存的消耗，释放的问题。因为业务代码不受约束，如果开发人员没有主动的意识，很可能出现溢出程序崩溃的情况。</p>
<p>每一个视图控制器最少要存在三个方法用于描述它的生命周期：</p>
<ul>
<li><strong>init</strong> 整个视图控制器的入口</li>
<li><strong>hide</strong> 当离开当前视图时执行</li>
<li><strong>viewwillapper</strong> 在创建视图容器时先执行</li>
</ul>
<p>每一个视图控制器最少要存在四个属性用于描述它的视图，标识，模版等：</p>
<ul>
<li><strong>hash</strong> 用于描述它的hash值</li>
<li><strong>view</strong> 存储视图的容器DOM对象</li>
<li><strong>didkeys</strong> 用于描述它创建时的唯一标识，hash值+当前时间的毫秒数</li>
<li><strong>template</strong> 用于描述当前视图的模版</li>
</ul>
<blockquote>
<p>场景假设：用户打开#index，并且点击一个按钮到#push</p>
<p>框架假设：navigationController 简称NC</p>
</blockquote>
<p>最少会执行下面的一些动作，以及可能会使用到下列的一些库：<strong>zepto requrejs template</strong></p>
<p>当客户端呈现#index页面时，会做如下的一些事情：</p>
<ul>
<li>获取hash值index，先检索NC的一个队列中是否存在index，如果不存在则利用requrejs加载index.js文件，map进入NC队列，标示这个文件已经加载，将来不重复加载。</li>
<li>文件加载成功后，可以获取到index视图控制器类，实例化，并把它压入栈，调用viewwillapper，生成一个视图容器</li>
<li>视图容器DOM对象赋值给view</li>
<li>加载的模版字符串赋值给template，并渲染到视图容器中</li>
<li>执行init方法</li>
</ul>
<p>当点击某个按钮，进入#push页面时，会做如下的一些事情：</p>
<ul>
<li>获取hash值并检索NC加载文件，实例化，入栈</li>
<li>调用基栈hide方法，并出栈，然后销毁释放内存</li>
<li>执行呈现#index时的那些动作</li>
</ul>
<p>当然一个比较成熟的项目需要处理的问题，肯定不是现在写的这些。</p>
<p><strong>总结在携程一年（移动开发）</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>利用H5来开发移动app时，很大一部分的逻辑处理是在每一个视图的切换上，包括维护生命周期，释放内存，以及维护动画。我们在使用iOS时，基本上当前屏幕中内容显示的区域内就应该算是一个视图，当然H5版的app跟纯粹的iOS开发又有一些不同。</p>
<ul>
<li>H5版本的app是一个HTML页面，场景的切换基本上是切换内部的div容器，而当前浏览器内的框架则是它的window</li>
<li>H5版本的app还需要监听hashchange或者history，来维护每一个视图控制器js文件的加载，执行</li>
<li>每一个视图控制器需要维护它自身的生命周期，如创建，渲染视图，添加事件，销毁，以及离开当前视图时等一系列的生命周期</li>
<li>一个视图控制器对应一个视图，一个模型，视图控制器来控制模型的请求，视图的渲染，模型与视图之间互相不干扰</li>
<li>H5版本的app还需要维护一个NavigationController的头，用来控制内容区域内的视图控制器的转换以及它的动画</li>
<li>应用兼容iOS，安卓，WP手持设备的dom兼容库（zepto），以及手势，触摸事件的兼容处理</li>
<li>关于请求还需要维护本地存储与它之间的联系</li>
<li>在Hybrid中，要构建起与原生框架的交互桥梁，比如phoneGap</li>
<li>维护一个UI组件交互的库，比如一些常用的scoll，slider等</li>
</ul>
<p>从上述的一些总结中，可以看的出来要开发基于H5的移动端app，需要做的事情还是有很多的，浓缩的总结有三个方面：</p>
<blockquote>
<p>代码组织，MVC或者MVVM以及它们的生命周期与文件加载</p>
<p>DOM 触摸 手势兼容处理</p>
<p>与Native的交互</p>
</blockquote>
<p>在代码实现的思路上，这里都会使用一个栈来实现它。</p>
<ul>
<li>栈顶属于当前视图控制器</li>
<li>基栈则是根视图控制器</li>
</ul>
]]>
    
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[this与prototype的区别]]></title>
    <link href="http://lcepy.github.io/2015/01/05/this%E4%B8%8Eprototype%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://lcepy.github.io/2015/01/05/this与prototype的区别/</id>
    <published>2015-01-05T11:15:53.000Z</published>
    <updated>2015-01-05T12:08:36.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>this可以访问私有成员（用var声明的变量）私有方法（直接function或者内部），prototype无法访问</li>
<li>Js首先查找自身的静态属性，方法，再查找上下文中可以访问的属性或方法，最后才查找prototype，谁先谁优先</li>
<li>prototype比this要节约分配的空间，因为prototype有一个指向父类的指向，而this，每次实例化时都要分配存储空间</li>
</ul>
<pre><code>    <span class="keyword">var</span> Copy = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="keyword">var</span> d = <span class="string">"123"</span>;
        <span class="keyword">this</span>._log = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            <span class="built_in">console</span>.log(d);
        }
        <span class="keyword">this</span>.log = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            <span class="built_in">console</span>.log(<span class="string">'yes'</span>);
        }
    }
    Copy.prototype.log = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="built_in">console</span>.log(<span class="string">'no'</span>);
    }
    <span class="keyword">var</span> c = <span class="keyword">new</span> Copy();
    c.log();
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>this可以访问私有成员（用var声明的变量）私有方法（直接function或者内部），prototype无法访问</li>
<li>Js首先查找自身的静态属性，方法，再查找上下文中可以访问的属性或方法，最后才查找prototype，谁先谁优先</li>
<li]]>
    </summary>
    
      <category term="node&amp;js" scheme="http://lcepy.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS学习第一个月心得与总结]]></title>
    <link href="http://lcepy.github.io/2015/01/02/iOS%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%9C%88%E5%BF%83%E5%BE%97%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://lcepy.github.io/2015/01/02/iOS学习第一个月心得与总结/</id>
    <published>2015-01-02T15:45:14.000Z</published>
    <updated>2015-01-03T05:34:21.000Z</updated>
    <content type="html"><![CDATA[<p>从买来Mac之后，还是看的池建强老师的一篇文章《程序员如何选择技术方向》，就开始自发的学习iOS了，因为我也想做一个自己的应用，想学一门编译型的语言，说来也巧，买Mac电脑，还是看了池老师《Mac Talk人生元编程》才开始真正下定决心入手了一台。</p>
<p>在开始学习iOS编程之前，我先重新去复习了一下C语言，这个是非常有必要的。虽然现在Swift已经出来了，但是Objective-C还是需要掌握的，而它又是C的超集，无可厚非，于是从头开始。</p>
<p>C语言总结：</p>
<ul>
<li>学习它的基本类型，比如int float等</li>
<li>学习数组，了解C语言数组是没有边界的，以及数组的指针是如何指向的</li>
<li>学习C语言的函数，了解它的一些传参，返回值等等，C语言中的函数如果想改变参数的值，那么必须传入指针类型</li>
<li>学习内存分配，以及如何分析问题</li>
<li>学习指针*，地址符&amp;</li>
<li>学习结构体，静态类型</li>
<li>学习宏定义，文件包含，条件编译</li>
<li>学习typedef</li>
<li>学习指向一维，二维数组的指针，指针字符串，以及指向函数的指针与返回指针的函数</li>
<li>枚举</li>
<li>个别C语言函数库</li>
</ul>
<p>总体来说学习完C语言之后，再学习OC非常的轻松，很多东西都可以command + 鼠标左键 去h文件中自己看，苹果的方法长的跟句子一样，真的很难记住，所以必须要看头文件了。而且学习完C语言，对于内存的分配，更加的清楚了。</p>
<p>Objective-C语言语法总结：</p>
<ul>
<li>学习OC后的结果第一条就是要学习如何看源代码</li>
<li>@interface定义一个类，在h文件中，以及如何在m文件中实现这个类@implementation，它们都有@end来结尾</li>
<li>了解OC是单继承，所以一个类只能继承一个父类，但可以有多个子类，OC中的继承是在头文件定义的类名后面:UIViewController 写上需要继承父类的类名</li>
<li>OC里也有成员变量，可以用一个大括号括起来，它也有如@public @private等，如果没有显示的声明，那么默认都是@protected</li>
<li>接着是学习如何定义方法，- + 以及self的作用，－表示实例方法，+表示静态方法，self表示当前谁用就指向谁</li>
<li>学习如何传入参数-(int)number:(int)num; 第一个括号表示返回值，冒号也算方法名，后面跟着的括号，表示传入一个int类型的参数</li>
<li>在成员变量中，可以显示的声明getter，setter方法，而在OC中这两种可以使用点语法来使用</li>
<li>学习分类category，在xcode中创建的文件一般都是类＋分类名比如@interface Game:(Test)，通过它可以实现对类的扩展</li>
<li>学习协议protocol，这玩意在做实际项目时会大量的运用到，它跟接口非常的类似，OC不强制要求实现全部的协议，使用的时候在类名后面加上尖括号<xxxdelegate>要求实现这个协议</xxxdelegate></li>
<li>block语法，^{}，这玩意跟Js中的callback函数非常的类似，只是OC实现的语法会非常的奇怪int(^number)(int,int)第一个int表示返回值，中间括号表示block的名字，最后一个括号表示传入参数的类型，这玩意字符多的时候看起来会有些怪异和费解</li>
<li>一些循环，for for in 或者block</li>
<li>内存管理，OC是使用引用计数的方式来管理内存的，所以创建就必须对应有释放，现在因为已经有了ARC所以这部分代码可以不用写了，编译器会帮助我们自动补全。alloc retain copy ＋1 relese -1 0的时候系统释放，一般情况下，谁使用，谁释放的原则，比如我现在用alloc创建一个对象，那么我就需要在relese它，如果我把这个对象setter给另一个对象当属性，那么这个对象就要retain一次，在dealloc这个方法中对它relese，原则就是这样的，谁使用，谁释放。</li>
<li>@property属性，OC提供了一个快速创建属性并默认实现getter setter方法的东西，主要是配合原子性，retain copy来使用，在开启ARC的环境下，可以用weak strong来使用，这个主要对应UI方面，一般情况下只是赋值用assign，NSString用copy，其他OC对象用retain</li>
<li>学习copy语法，了解什么是浅拷贝，深拷贝</li>
</ul>
<a id="more"></a>

<p>接下来是学习Foundation框架提供的OC类型了，都可以用@来快速实现，比如@””字符串，@[]数组，@{}字典，唯一的缺点是这些创建的是不可变的，如果要创建可变的，就要使用NSMutable …之类的了，前缀名字都一样。每一个类型都有N多方法，而且名字，长的根句子一样，所以就不写了，比如字符串，有创建，格式化，截取，数组，分割，排序等都有，需要学习Foundation提供的这些方法，因为它跟后面编写应用时，处理数据息息相关。</p>
<p>UIKit学习，到这里就开始进入应用编程的范围了，学习它是关于如何搭建UI界面，比如，如何使用xib，storyboard，用代码实现，认识UIViewController，以及如何监听事件，实现各控件的代理等。</p>
<p>UIKit学习总结：</p>
<ul>
<li>初识MVC</li>
</ul>
<p>官方的推荐任何一种对象都分配成三种角色。控制器可以直接访问模型和视图，但是模型跟视图是不允许互相访问。模型不允许直接访问控制器，从设计角度上来看，模型应该是重用的，如果下一个项目或者别的需要使用这个模型，如果模型中包含了控制器，那么就不可以使用了。模型应该关注的自身的数据，究竟这个数据需要放在哪里，则由控制器来控制。在控制中设置数据源datasource，当视图对控制器发送一个消息询问，数据源是啥，来索要数据。而它本身是不知道数据是哪个，而是由控制器来告知。</p>
<ul>
<li>清楚UIViewController的生命周期</li>
</ul>
<p>先走init方法，如果有自定义视图，则走自定义视图。如果没有，则走xib或storyborad，如果这个也没有则走loadView方法，loadView方法系统调用，也可以重载它。当我们重载它时，可以[super loadView] 父类帮助我们创建一个空的view，如果不调用父类，那么就要自己创建一个UIView，并且self.view = UIView。</p>
<p>如果在调用loadView时不调用父类，也不创建，如果使用self.view的getter method并且view等于nil，会发生自我循环调用。一般情况下，不要在初始化时做view相当的动作。在viewDiload中调用一些网络访问的动作，可以在初始化方法中做一些关于模型数据的准备工作。</p>
<p>如果覆盖了loadView，则必须创建UIViewController的view属性。如果没有覆盖该方法，UIViewController会默认调用initWithNibName方法来初始化并加载view。</p>
<p>viewWillAppear -&gt; viewDidAppear（控制视图显示）viewWillDisappear -&gt; viewDidDisappear （控制视图卸载）</p>
<ul>
<li>学习基础UI控件，比如UILabel UIButton等，创建基本上各控件都是一样的，可以用构造方法，也可以alloc，然后指定x y 高 宽，CGRect结构体，然后有些有代理，可以监听各种事件，有些则没有。大部分的基类都是UIView，有些是UIControl，它是继承至UIView，唯一的区别是后者可以监听事件，它是一个控制器。</li>
<li>学习UIView CAAnimation CATransition等，还有各控件的transform属性，可以做一些基础的动画，大部分是改变x y 高 宽值。然后会使用它们的block版本动画，少写很多代码。</li>
<li>学习模态视图，以及视图切换，控制器切换等。</li>
<li>学习UITableView UIPickerView UISlider UIImageView等，还有UIAlertView，太多了，就不一个一个的举例子了，比较重要，用的很多的就是UITableView UISlider UIImageView UIAlertView等，特别是UITableView，三个数据源，N个事件监听代理。</li>
<li>使用xib做自定义View</li>
</ul>
<p>关于UIKit的学习，可以每个多试一试 ，也可以去看看头文件。</p>
<h2 id="最后的总结">最后的总结</h2>
<p>一个月下来，也算是进门了，感觉它没有网上人们传的那么困难，凡事用心，一点一点的推进，就容易了，希望今年可以做自己的第一个应用上架App Store。</p>
<p><a href="https://github.com/lcepy/geekObjective-C/tree/master/UseHMGLTransitionsAnimations" target="_blank" rel="external">使用基础动画以及UITableView制作的一个Demo</a></p>
<p><a href="https://github.com/lcepy/geekObjective-C/tree/master/HttpImageAndPho" target="_blank" rel="external">访问相册，摄像头，简单从网络获取资源制作的一个Demo</a></p>
<p>iOS学习资料的收集</p>
<p><a href="https://github.com/lcepy/ios-programming-books-zh_CN" target="_blank" rel="external">https://github.com/lcepy/ios-programming-books-zh_CN</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从买来Mac之后，还是看的池建强老师的一篇文章《程序员如何选择技术方向》，就开始自发的学习iOS了，因为我也想做一个自己的应用，想学一门编译型的语言，说来也巧，买Mac电脑，还是看了池老师《Mac Talk人生元编程》才开始真正下定决心入手了一台。</p>
<p>在开始学习iOS编程之前，我先重新去复习了一下C语言，这个是非常有必要的。虽然现在Swift已经出来了，但是Objective-C还是需要掌握的，而它又是C的超集，无可厚非，于是从头开始。</p>
<p>C语言总结：</p>
<ul>
<li>学习它的基本类型，比如int float等</li>
<li>学习数组，了解C语言数组是没有边界的，以及数组的指针是如何指向的</li>
<li>学习C语言的函数，了解它的一些传参，返回值等等，C语言中的函数如果想改变参数的值，那么必须传入指针类型</li>
<li>学习内存分配，以及如何分析问题</li>
<li>学习指针*，地址符&amp;</li>
<li>学习结构体，静态类型</li>
<li>学习宏定义，文件包含，条件编译</li>
<li>学习typedef</li>
<li>学习指向一维，二维数组的指针，指针字符串，以及指向函数的指针与返回指针的函数</li>
<li>枚举</li>
<li>个别C语言函数库</li>
</ul>
<p>总体来说学习完C语言之后，再学习OC非常的轻松，很多东西都可以command + 鼠标左键 去h文件中自己看，苹果的方法长的跟句子一样，真的很难记住，所以必须要看头文件了。而且学习完C语言，对于内存的分配，更加的清楚了。</p>
<p>Objective-C语言语法总结：</p>
<ul>
<li>学习OC后的结果第一条就是要学习如何看源代码</li>
<li>@interface定义一个类，在h文件中，以及如何在m文件中实现这个类@implementation，它们都有@end来结尾</li>
<li>了解OC是单继承，所以一个类只能继承一个父类，但可以有多个子类，OC中的继承是在头文件定义的类名后面:UIViewController 写上需要继承父类的类名</li>
<li>OC里也有成员变量，可以用一个大括号括起来，它也有如@public @private等，如果没有显示的声明，那么默认都是@protected</li>
<li>接着是学习如何定义方法，- + 以及self的作用，－表示实例方法，+表示静态方法，self表示当前谁用就指向谁</li>
<li>学习如何传入参数-(int)number:(int)num; 第一个括号表示返回值，冒号也算方法名，后面跟着的括号，表示传入一个int类型的参数</li>
<li>在成员变量中，可以显示的声明getter，setter方法，而在OC中这两种可以使用点语法来使用</li>
<li>学习分类category，在xcode中创建的文件一般都是类＋分类名比如@interface Game:(Test)，通过它可以实现对类的扩展</li>
<li>学习协议protocol，这玩意在做实际项目时会大量的运用到，它跟接口非常的类似，OC不强制要求实现全部的协议，使用的时候在类名后面加上尖括号<xxxdelegate>要求实现这个协议</xxxdelegate></li>
<li>block语法，^{}，这玩意跟Js中的callback函数非常的类似，只是OC实现的语法会非常的奇怪int(^number)(int,int)第一个int表示返回值，中间括号表示block的名字，最后一个括号表示传入参数的类型，这玩意字符多的时候看起来会有些怪异和费解</li>
<li>一些循环，for for in 或者block</li>
<li>内存管理，OC是使用引用计数的方式来管理内存的，所以创建就必须对应有释放，现在因为已经有了ARC所以这部分代码可以不用写了，编译器会帮助我们自动补全。alloc retain copy ＋1 relese -1 0的时候系统释放，一般情况下，谁使用，谁释放的原则，比如我现在用alloc创建一个对象，那么我就需要在relese它，如果我把这个对象setter给另一个对象当属性，那么这个对象就要retain一次，在dealloc这个方法中对它relese，原则就是这样的，谁使用，谁释放。</li>
<li>@property属性，OC提供了一个快速创建属性并默认实现getter setter方法的东西，主要是配合原子性，retain copy来使用，在开启ARC的环境下，可以用weak strong来使用，这个主要对应UI方面，一般情况下只是赋值用assign，NSString用copy，其他OC对象用retain</li>
<li>学习copy语法，了解什么是浅拷贝，深拷贝</li>
</ul>
]]>
    
    </summary>
    
      <category term="iOS" scheme="http://lcepy.github.io/tags/iOS/"/>
    
  </entry>
  
</feed>
